
Metal_Detector.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003120  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00003120  000031b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000020  00800068  00800068  000031bc  2**0
                  ALLOC
  3 .stab         00002a9c  00000000  00000000  000031bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010d3  00000000  00000000  00005c58  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00006d2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00006e8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000701a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000905f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000a160  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000b0e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000b264  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000b526  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bdb4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 ed 0a 	jmp	0x15da	; 0x15da <__vector_1>
       8:	0c 94 20 0b 	jmp	0x1640	; 0x1640 <__vector_2>
       c:	0c 94 53 0b 	jmp	0x16a6	; 0x16a6 <__vector_3>
      10:	0c 94 58 10 	jmp	0x20b0	; 0x20b0 <__vector_4>
      14:	0c 94 0f 10 	jmp	0x201e	; 0x201e <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 ee 0e 	jmp	0x1ddc	; 0x1ddc <__vector_10>
      2c:	0c 94 a5 0e 	jmp	0x1d4a	; 0x1d4a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a8 38       	cpi	r26, 0x88	; 136
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e0 e2       	ldi	r30, 0x20	; 32
      78:	f1 e3       	ldi	r31, 0x31	; 49
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 77 13 	call	0x26ee	; 0x26ee <main>
      8a:	0c 94 8e 18 	jmp	0x311c	; 0x311c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 57 18 	jmp	0x30ae	; 0x30ae <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 73 18 	jmp	0x30e6	; 0x30e6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 63 18 	jmp	0x30c6	; 0x30c6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 7f 18 	jmp	0x30fe	; 0x30fe <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 63 18 	jmp	0x30c6	; 0x30c6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 7f 18 	jmp	0x30fe	; 0x30fe <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 57 18 	jmp	0x30ae	; 0x30ae <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 73 18 	jmp	0x30e6	; 0x30e6 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 5f 18 	jmp	0x30be	; 0x30be <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 7b 18 	jmp	0x30f6	; 0x30f6 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 63 18 	jmp	0x30c6	; 0x30c6 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 7f 18 	jmp	0x30fe	; 0x30fe <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 63 18 	jmp	0x30c6	; 0x30c6 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 7f 18 	jmp	0x30fe	; 0x30fe <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 63 18 	jmp	0x30c6	; 0x30c6 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 7f 18 	jmp	0x30fe	; 0x30fe <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 67 18 	jmp	0x30ce	; 0x30ce <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 83 18 	jmp	0x3106	; 0x3106 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <MDIO_voidInit>:
#include"../include/MCAL/DIO/DIO_interface.h"
#include"../include/MCAL/DIO/DIO_private.h"
#include"../include/MCAL/DIO/DIO_configuration.h"

void MDIO_voidInit (void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	DDRA_REG = CONC_BIT(PORTA_PIN7_DIRECTION, PORTA_PIN6_DIRECTION, PORTA_PIN5_DIRECTION, PORTA_PIN4_DIRECTION,
     ca6:	ea e3       	ldi	r30, 0x3A	; 58
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	8f ef       	ldi	r24, 0xFF	; 255
     cac:	80 83       	st	Z, r24
						PORTA_PIN3_DIRECTION, PORTA_PIN2_DIRECTION, PORTA_PIN1_DIRECTION, PORTA_PIN0_DIRECTION);

	DDRB_REG = CONC_BIT(PORTB_PIN7_DIRECTION, PORTB_PIN6_DIRECTION, PORTB_PIN5_DIRECTION, PORTB_PIN4_DIRECTION,
     cae:	e7 e3       	ldi	r30, 0x37	; 55
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	8f ef       	ldi	r24, 0xFF	; 255
     cb4:	80 83       	st	Z, r24
						PORTB_PIN3_DIRECTION, PORTB_PIN2_DIRECTION, PORTB_PIN1_DIRECTION, PORTB_PIN0_DIRECTION);

	DDRC_REG = CONC_BIT(PORTC_PIN7_DIRECTION, PORTC_PIN6_DIRECTION, PORTC_PIN5_DIRECTION, PORTC_PIN4_DIRECTION,
     cb6:	e4 e3       	ldi	r30, 0x34	; 52
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	8f ef       	ldi	r24, 0xFF	; 255
     cbc:	80 83       	st	Z, r24
						PORTC_PIN3_DIRECTION, PORTC_PIN2_DIRECTION, PORTC_PIN1_DIRECTION, PORTC_PIN0_DIRECTION);

	DDRD_REG = CONC_BIT(PORTD_PIN7_DIRECTION, PORTD_PIN6_DIRECTION, PORTD_PIN5_DIRECTION, PORTD_PIN4_DIRECTION,
     cbe:	e1 e3       	ldi	r30, 0x31	; 49
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	80 ef       	ldi	r24, 0xF0	; 240
     cc4:	80 83       	st	Z, r24
						PORTD_PIN3_DIRECTION, PORTD_PIN2_DIRECTION, PORTD_PIN1_DIRECTION, PORTD_PIN0_DIRECTION);

	PORTA_REG = CONC_BIT(PORTA_PIN7_VALUE, PORTA_PIN6_VALUE, PORTA_PIN5_VALUE, PORTA_PIN4_VALUE,
     cc6:	eb e3       	ldi	r30, 0x3B	; 59
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	10 82       	st	Z, r1
						 PORTA_PIN3_VALUE, PORTA_PIN2_VALUE, PORTA_PIN1_VALUE, PORTA_PIN0_VALUE);

	PORTB_REG = CONC_BIT(PORTB_PIN7_VALUE, PORTB_PIN6_VALUE, PORTB_PIN5_VALUE, PORTB_PIN4_VALUE,
     ccc:	e8 e3       	ldi	r30, 0x38	; 56
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	10 82       	st	Z, r1
						 PORTB_PIN3_VALUE, PORTB_PIN2_VALUE, PORTB_PIN1_VALUE, PORTB_PIN0_VALUE);

	PORTC_REG = CONC_BIT(PORTC_PIN7_VALUE, PORTC_PIN6_VALUE, PORTC_PIN5_VALUE, PORTC_PIN4_VALUE,
     cd2:	e5 e3       	ldi	r30, 0x35	; 53
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	10 82       	st	Z, r1
		   				 PORTC_PIN3_VALUE, PORTC_PIN2_VALUE, PORTC_PIN1_VALUE, PORTC_PIN0_VALUE);

	PORTD_REG = CONC_BIT(PORTD_PIN7_VALUE, PORTD_PIN6_VALUE, PORTD_PIN5_VALUE, PORTD_PIN4_VALUE,
     cd8:	e2 e3       	ldi	r30, 0x32	; 50
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	8c e0       	ldi	r24, 0x0C	; 12
     cde:	80 83       	st	Z, r24
						 PORTD_PIN3_VALUE, PORTD_PIN2_VALUE, PORTD_PIN1_VALUE, PORTD_PIN0_VALUE);

}
     ce0:	cf 91       	pop	r28
     ce2:	df 91       	pop	r29
     ce4:	08 95       	ret

00000ce6 <MDIO_voidSetPinDirection>:
// PORT ID :- POTRTA - PORTB - PORTC - PORTD
// PIN ID :- PIN0 ... PIN7
// PIN DIRECTION:- PIN_INPUT - PIN_OUTPUT
void MDIO_voidSetPinDirection (u8 A_u8PortId, u8 A_u8PinId, u8 A_u8Direction)
{
     ce6:	df 93       	push	r29
     ce8:	cf 93       	push	r28
     cea:	cd b7       	in	r28, 0x3d	; 61
     cec:	de b7       	in	r29, 0x3e	; 62
     cee:	2d 97       	sbiw	r28, 0x0d	; 13
     cf0:	0f b6       	in	r0, 0x3f	; 63
     cf2:	f8 94       	cli
     cf4:	de bf       	out	0x3e, r29	; 62
     cf6:	0f be       	out	0x3f, r0	; 63
     cf8:	cd bf       	out	0x3d, r28	; 61
     cfa:	89 83       	std	Y+1, r24	; 0x01
     cfc:	6a 83       	std	Y+2, r22	; 0x02
     cfe:	4b 83       	std	Y+3, r20	; 0x03
	switch(A_u8PortId)
     d00:	89 81       	ldd	r24, Y+1	; 0x01
     d02:	28 2f       	mov	r18, r24
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	3d 87       	std	Y+13, r19	; 0x0d
     d08:	2c 87       	std	Y+12, r18	; 0x0c
     d0a:	8c 85       	ldd	r24, Y+12	; 0x0c
     d0c:	9d 85       	ldd	r25, Y+13	; 0x0d
     d0e:	81 30       	cpi	r24, 0x01	; 1
     d10:	91 05       	cpc	r25, r1
     d12:	09 f4       	brne	.+2      	; 0xd16 <MDIO_voidSetPinDirection+0x30>
     d14:	4f c0       	rjmp	.+158    	; 0xdb4 <MDIO_voidSetPinDirection+0xce>
     d16:	2c 85       	ldd	r18, Y+12	; 0x0c
     d18:	3d 85       	ldd	r19, Y+13	; 0x0d
     d1a:	22 30       	cpi	r18, 0x02	; 2
     d1c:	31 05       	cpc	r19, r1
     d1e:	2c f4       	brge	.+10     	; 0xd2a <MDIO_voidSetPinDirection+0x44>
     d20:	8c 85       	ldd	r24, Y+12	; 0x0c
     d22:	9d 85       	ldd	r25, Y+13	; 0x0d
     d24:	00 97       	sbiw	r24, 0x00	; 0
     d26:	71 f0       	breq	.+28     	; 0xd44 <MDIO_voidSetPinDirection+0x5e>
     d28:	eb c0       	rjmp	.+470    	; 0xf00 <MDIO_voidSetPinDirection+0x21a>
     d2a:	2c 85       	ldd	r18, Y+12	; 0x0c
     d2c:	3d 85       	ldd	r19, Y+13	; 0x0d
     d2e:	22 30       	cpi	r18, 0x02	; 2
     d30:	31 05       	cpc	r19, r1
     d32:	09 f4       	brne	.+2      	; 0xd36 <MDIO_voidSetPinDirection+0x50>
     d34:	77 c0       	rjmp	.+238    	; 0xe24 <MDIO_voidSetPinDirection+0x13e>
     d36:	8c 85       	ldd	r24, Y+12	; 0x0c
     d38:	9d 85       	ldd	r25, Y+13	; 0x0d
     d3a:	83 30       	cpi	r24, 0x03	; 3
     d3c:	91 05       	cpc	r25, r1
     d3e:	09 f4       	brne	.+2      	; 0xd42 <MDIO_voidSetPinDirection+0x5c>
     d40:	a9 c0       	rjmp	.+338    	; 0xe94 <MDIO_voidSetPinDirection+0x1ae>
     d42:	de c0       	rjmp	.+444    	; 0xf00 <MDIO_voidSetPinDirection+0x21a>
	{
	case PORTA:
		switch(A_u8Direction)
     d44:	8b 81       	ldd	r24, Y+3	; 0x03
     d46:	28 2f       	mov	r18, r24
     d48:	30 e0       	ldi	r19, 0x00	; 0
     d4a:	3b 87       	std	Y+11, r19	; 0x0b
     d4c:	2a 87       	std	Y+10, r18	; 0x0a
     d4e:	8a 85       	ldd	r24, Y+10	; 0x0a
     d50:	9b 85       	ldd	r25, Y+11	; 0x0b
     d52:	00 97       	sbiw	r24, 0x00	; 0
     d54:	d1 f0       	breq	.+52     	; 0xd8a <MDIO_voidSetPinDirection+0xa4>
     d56:	2a 85       	ldd	r18, Y+10	; 0x0a
     d58:	3b 85       	ldd	r19, Y+11	; 0x0b
     d5a:	21 30       	cpi	r18, 0x01	; 1
     d5c:	31 05       	cpc	r19, r1
     d5e:	09 f0       	breq	.+2      	; 0xd62 <MDIO_voidSetPinDirection+0x7c>
     d60:	cf c0       	rjmp	.+414    	; 0xf00 <MDIO_voidSetPinDirection+0x21a>
		{
		case PIN_OUTPUT: SET_BIT(DDRA_REG,A_u8PinId);
     d62:	aa e3       	ldi	r26, 0x3A	; 58
     d64:	b0 e0       	ldi	r27, 0x00	; 0
     d66:	ea e3       	ldi	r30, 0x3A	; 58
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	80 81       	ld	r24, Z
     d6c:	48 2f       	mov	r20, r24
     d6e:	8a 81       	ldd	r24, Y+2	; 0x02
     d70:	28 2f       	mov	r18, r24
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	81 e0       	ldi	r24, 0x01	; 1
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	02 2e       	mov	r0, r18
     d7a:	02 c0       	rjmp	.+4      	; 0xd80 <MDIO_voidSetPinDirection+0x9a>
     d7c:	88 0f       	add	r24, r24
     d7e:	99 1f       	adc	r25, r25
     d80:	0a 94       	dec	r0
     d82:	e2 f7       	brpl	.-8      	; 0xd7c <MDIO_voidSetPinDirection+0x96>
     d84:	84 2b       	or	r24, r20
     d86:	8c 93       	st	X, r24
     d88:	bb c0       	rjmp	.+374    	; 0xf00 <MDIO_voidSetPinDirection+0x21a>
						 break;
		case PIN_INPUT : CLR_BIT(DDRA_REG,A_u8PinId);
     d8a:	aa e3       	ldi	r26, 0x3A	; 58
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	ea e3       	ldi	r30, 0x3A	; 58
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	48 2f       	mov	r20, r24
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	02 2e       	mov	r0, r18
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <MDIO_voidSetPinDirection+0xc2>
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	0a 94       	dec	r0
     daa:	e2 f7       	brpl	.-8      	; 0xda4 <MDIO_voidSetPinDirection+0xbe>
     dac:	80 95       	com	r24
     dae:	84 23       	and	r24, r20
     db0:	8c 93       	st	X, r24
     db2:	a6 c0       	rjmp	.+332    	; 0xf00 <MDIO_voidSetPinDirection+0x21a>
		default:
				 break;
		}
		break;
	case PORTB:
		switch(A_u8Direction)
     db4:	8b 81       	ldd	r24, Y+3	; 0x03
     db6:	28 2f       	mov	r18, r24
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	39 87       	std	Y+9, r19	; 0x09
     dbc:	28 87       	std	Y+8, r18	; 0x08
     dbe:	88 85       	ldd	r24, Y+8	; 0x08
     dc0:	99 85       	ldd	r25, Y+9	; 0x09
     dc2:	00 97       	sbiw	r24, 0x00	; 0
     dc4:	d1 f0       	breq	.+52     	; 0xdfa <MDIO_voidSetPinDirection+0x114>
     dc6:	28 85       	ldd	r18, Y+8	; 0x08
     dc8:	39 85       	ldd	r19, Y+9	; 0x09
     dca:	21 30       	cpi	r18, 0x01	; 1
     dcc:	31 05       	cpc	r19, r1
     dce:	09 f0       	breq	.+2      	; 0xdd2 <MDIO_voidSetPinDirection+0xec>
     dd0:	97 c0       	rjmp	.+302    	; 0xf00 <MDIO_voidSetPinDirection+0x21a>
		{
		case PIN_OUTPUT: SET_BIT(DDRB_REG,A_u8PinId);
     dd2:	a7 e3       	ldi	r26, 0x37	; 55
     dd4:	b0 e0       	ldi	r27, 0x00	; 0
     dd6:	e7 e3       	ldi	r30, 0x37	; 55
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	80 81       	ld	r24, Z
     ddc:	48 2f       	mov	r20, r24
     dde:	8a 81       	ldd	r24, Y+2	; 0x02
     de0:	28 2f       	mov	r18, r24
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	81 e0       	ldi	r24, 0x01	; 1
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	02 2e       	mov	r0, r18
     dea:	02 c0       	rjmp	.+4      	; 0xdf0 <MDIO_voidSetPinDirection+0x10a>
     dec:	88 0f       	add	r24, r24
     dee:	99 1f       	adc	r25, r25
     df0:	0a 94       	dec	r0
     df2:	e2 f7       	brpl	.-8      	; 0xdec <MDIO_voidSetPinDirection+0x106>
     df4:	84 2b       	or	r24, r20
     df6:	8c 93       	st	X, r24
     df8:	83 c0       	rjmp	.+262    	; 0xf00 <MDIO_voidSetPinDirection+0x21a>
						 break;
		case PIN_INPUT : CLR_BIT(DDRB_REG,A_u8PinId);
     dfa:	a7 e3       	ldi	r26, 0x37	; 55
     dfc:	b0 e0       	ldi	r27, 0x00	; 0
     dfe:	e7 e3       	ldi	r30, 0x37	; 55
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	80 81       	ld	r24, Z
     e04:	48 2f       	mov	r20, r24
     e06:	8a 81       	ldd	r24, Y+2	; 0x02
     e08:	28 2f       	mov	r18, r24
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	02 2e       	mov	r0, r18
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <MDIO_voidSetPinDirection+0x132>
     e14:	88 0f       	add	r24, r24
     e16:	99 1f       	adc	r25, r25
     e18:	0a 94       	dec	r0
     e1a:	e2 f7       	brpl	.-8      	; 0xe14 <MDIO_voidSetPinDirection+0x12e>
     e1c:	80 95       	com	r24
     e1e:	84 23       	and	r24, r20
     e20:	8c 93       	st	X, r24
     e22:	6e c0       	rjmp	.+220    	; 0xf00 <MDIO_voidSetPinDirection+0x21a>
		default:
				break;
		}
		break;
	case PORTC:
		switch(A_u8Direction)
     e24:	8b 81       	ldd	r24, Y+3	; 0x03
     e26:	28 2f       	mov	r18, r24
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	3f 83       	std	Y+7, r19	; 0x07
     e2c:	2e 83       	std	Y+6, r18	; 0x06
     e2e:	8e 81       	ldd	r24, Y+6	; 0x06
     e30:	9f 81       	ldd	r25, Y+7	; 0x07
     e32:	00 97       	sbiw	r24, 0x00	; 0
     e34:	d1 f0       	breq	.+52     	; 0xe6a <MDIO_voidSetPinDirection+0x184>
     e36:	2e 81       	ldd	r18, Y+6	; 0x06
     e38:	3f 81       	ldd	r19, Y+7	; 0x07
     e3a:	21 30       	cpi	r18, 0x01	; 1
     e3c:	31 05       	cpc	r19, r1
     e3e:	09 f0       	breq	.+2      	; 0xe42 <MDIO_voidSetPinDirection+0x15c>
     e40:	5f c0       	rjmp	.+190    	; 0xf00 <MDIO_voidSetPinDirection+0x21a>
		{
		case PIN_OUTPUT: SET_BIT(DDRC_REG,A_u8PinId);
     e42:	a4 e3       	ldi	r26, 0x34	; 52
     e44:	b0 e0       	ldi	r27, 0x00	; 0
     e46:	e4 e3       	ldi	r30, 0x34	; 52
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	80 81       	ld	r24, Z
     e4c:	48 2f       	mov	r20, r24
     e4e:	8a 81       	ldd	r24, Y+2	; 0x02
     e50:	28 2f       	mov	r18, r24
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	02 2e       	mov	r0, r18
     e5a:	02 c0       	rjmp	.+4      	; 0xe60 <MDIO_voidSetPinDirection+0x17a>
     e5c:	88 0f       	add	r24, r24
     e5e:	99 1f       	adc	r25, r25
     e60:	0a 94       	dec	r0
     e62:	e2 f7       	brpl	.-8      	; 0xe5c <MDIO_voidSetPinDirection+0x176>
     e64:	84 2b       	or	r24, r20
     e66:	8c 93       	st	X, r24
     e68:	4b c0       	rjmp	.+150    	; 0xf00 <MDIO_voidSetPinDirection+0x21a>
						 break;
		case PIN_INPUT : CLR_BIT(DDRC_REG,A_u8PinId);
     e6a:	a4 e3       	ldi	r26, 0x34	; 52
     e6c:	b0 e0       	ldi	r27, 0x00	; 0
     e6e:	e4 e3       	ldi	r30, 0x34	; 52
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	80 81       	ld	r24, Z
     e74:	48 2f       	mov	r20, r24
     e76:	8a 81       	ldd	r24, Y+2	; 0x02
     e78:	28 2f       	mov	r18, r24
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	81 e0       	ldi	r24, 0x01	; 1
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	02 2e       	mov	r0, r18
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <MDIO_voidSetPinDirection+0x1a2>
     e84:	88 0f       	add	r24, r24
     e86:	99 1f       	adc	r25, r25
     e88:	0a 94       	dec	r0
     e8a:	e2 f7       	brpl	.-8      	; 0xe84 <MDIO_voidSetPinDirection+0x19e>
     e8c:	80 95       	com	r24
     e8e:	84 23       	and	r24, r20
     e90:	8c 93       	st	X, r24
     e92:	36 c0       	rjmp	.+108    	; 0xf00 <MDIO_voidSetPinDirection+0x21a>
		default:
				break;
		}
		break;
	case PORTD:
		switch(A_u8Direction)
     e94:	8b 81       	ldd	r24, Y+3	; 0x03
     e96:	28 2f       	mov	r18, r24
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	3d 83       	std	Y+5, r19	; 0x05
     e9c:	2c 83       	std	Y+4, r18	; 0x04
     e9e:	8c 81       	ldd	r24, Y+4	; 0x04
     ea0:	9d 81       	ldd	r25, Y+5	; 0x05
     ea2:	00 97       	sbiw	r24, 0x00	; 0
     ea4:	c9 f0       	breq	.+50     	; 0xed8 <MDIO_voidSetPinDirection+0x1f2>
     ea6:	2c 81       	ldd	r18, Y+4	; 0x04
     ea8:	3d 81       	ldd	r19, Y+5	; 0x05
     eaa:	21 30       	cpi	r18, 0x01	; 1
     eac:	31 05       	cpc	r19, r1
     eae:	41 f5       	brne	.+80     	; 0xf00 <MDIO_voidSetPinDirection+0x21a>
		{
		case PIN_OUTPUT: SET_BIT(DDRD_REG,A_u8PinId);
     eb0:	a1 e3       	ldi	r26, 0x31	; 49
     eb2:	b0 e0       	ldi	r27, 0x00	; 0
     eb4:	e1 e3       	ldi	r30, 0x31	; 49
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	80 81       	ld	r24, Z
     eba:	48 2f       	mov	r20, r24
     ebc:	8a 81       	ldd	r24, Y+2	; 0x02
     ebe:	28 2f       	mov	r18, r24
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	02 2e       	mov	r0, r18
     ec8:	02 c0       	rjmp	.+4      	; 0xece <MDIO_voidSetPinDirection+0x1e8>
     eca:	88 0f       	add	r24, r24
     ecc:	99 1f       	adc	r25, r25
     ece:	0a 94       	dec	r0
     ed0:	e2 f7       	brpl	.-8      	; 0xeca <MDIO_voidSetPinDirection+0x1e4>
     ed2:	84 2b       	or	r24, r20
     ed4:	8c 93       	st	X, r24
     ed6:	14 c0       	rjmp	.+40     	; 0xf00 <MDIO_voidSetPinDirection+0x21a>
						 break;
		case PIN_INPUT : CLR_BIT(DDRD_REG,A_u8PinId);
     ed8:	a1 e3       	ldi	r26, 0x31	; 49
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	e1 e3       	ldi	r30, 0x31	; 49
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	48 2f       	mov	r20, r24
     ee4:	8a 81       	ldd	r24, Y+2	; 0x02
     ee6:	28 2f       	mov	r18, r24
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	02 2e       	mov	r0, r18
     ef0:	02 c0       	rjmp	.+4      	; 0xef6 <MDIO_voidSetPinDirection+0x210>
     ef2:	88 0f       	add	r24, r24
     ef4:	99 1f       	adc	r25, r25
     ef6:	0a 94       	dec	r0
     ef8:	e2 f7       	brpl	.-8      	; 0xef2 <MDIO_voidSetPinDirection+0x20c>
     efa:	80 95       	com	r24
     efc:	84 23       	and	r24, r20
     efe:	8c 93       	st	X, r24
		}
		break;
	default:
		break;
	}
}
     f00:	2d 96       	adiw	r28, 0x0d	; 13
     f02:	0f b6       	in	r0, 0x3f	; 63
     f04:	f8 94       	cli
     f06:	de bf       	out	0x3e, r29	; 62
     f08:	0f be       	out	0x3f, r0	; 63
     f0a:	cd bf       	out	0x3d, r28	; 61
     f0c:	cf 91       	pop	r28
     f0e:	df 91       	pop	r29
     f10:	08 95       	ret

00000f12 <MDIO_voidSetPinValue>:
// PORT ID :- POTRTA - PORTB - PORTC - PORTD
// PIN ID :- PIN0 ... PIN7
// PIN VALUE:- PIN_LOW - PIN_HIGH
void MDIO_voidSetPinValue (u8 A_u8PortId, u8 A_u8PinId, u8 A_u8Value)
{
     f12:	df 93       	push	r29
     f14:	cf 93       	push	r28
     f16:	cd b7       	in	r28, 0x3d	; 61
     f18:	de b7       	in	r29, 0x3e	; 62
     f1a:	2d 97       	sbiw	r28, 0x0d	; 13
     f1c:	0f b6       	in	r0, 0x3f	; 63
     f1e:	f8 94       	cli
     f20:	de bf       	out	0x3e, r29	; 62
     f22:	0f be       	out	0x3f, r0	; 63
     f24:	cd bf       	out	0x3d, r28	; 61
     f26:	89 83       	std	Y+1, r24	; 0x01
     f28:	6a 83       	std	Y+2, r22	; 0x02
     f2a:	4b 83       	std	Y+3, r20	; 0x03
	switch(A_u8PortId)
     f2c:	89 81       	ldd	r24, Y+1	; 0x01
     f2e:	28 2f       	mov	r18, r24
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	3d 87       	std	Y+13, r19	; 0x0d
     f34:	2c 87       	std	Y+12, r18	; 0x0c
     f36:	8c 85       	ldd	r24, Y+12	; 0x0c
     f38:	9d 85       	ldd	r25, Y+13	; 0x0d
     f3a:	81 30       	cpi	r24, 0x01	; 1
     f3c:	91 05       	cpc	r25, r1
     f3e:	09 f4       	brne	.+2      	; 0xf42 <MDIO_voidSetPinValue+0x30>
     f40:	4f c0       	rjmp	.+158    	; 0xfe0 <MDIO_voidSetPinValue+0xce>
     f42:	2c 85       	ldd	r18, Y+12	; 0x0c
     f44:	3d 85       	ldd	r19, Y+13	; 0x0d
     f46:	22 30       	cpi	r18, 0x02	; 2
     f48:	31 05       	cpc	r19, r1
     f4a:	2c f4       	brge	.+10     	; 0xf56 <MDIO_voidSetPinValue+0x44>
     f4c:	8c 85       	ldd	r24, Y+12	; 0x0c
     f4e:	9d 85       	ldd	r25, Y+13	; 0x0d
     f50:	00 97       	sbiw	r24, 0x00	; 0
     f52:	71 f0       	breq	.+28     	; 0xf70 <MDIO_voidSetPinValue+0x5e>
     f54:	eb c0       	rjmp	.+470    	; 0x112c <MDIO_voidSetPinValue+0x21a>
     f56:	2c 85       	ldd	r18, Y+12	; 0x0c
     f58:	3d 85       	ldd	r19, Y+13	; 0x0d
     f5a:	22 30       	cpi	r18, 0x02	; 2
     f5c:	31 05       	cpc	r19, r1
     f5e:	09 f4       	brne	.+2      	; 0xf62 <MDIO_voidSetPinValue+0x50>
     f60:	77 c0       	rjmp	.+238    	; 0x1050 <MDIO_voidSetPinValue+0x13e>
     f62:	8c 85       	ldd	r24, Y+12	; 0x0c
     f64:	9d 85       	ldd	r25, Y+13	; 0x0d
     f66:	83 30       	cpi	r24, 0x03	; 3
     f68:	91 05       	cpc	r25, r1
     f6a:	09 f4       	brne	.+2      	; 0xf6e <MDIO_voidSetPinValue+0x5c>
     f6c:	a9 c0       	rjmp	.+338    	; 0x10c0 <MDIO_voidSetPinValue+0x1ae>
     f6e:	de c0       	rjmp	.+444    	; 0x112c <MDIO_voidSetPinValue+0x21a>
		{
		case PORTA:
			switch(A_u8Value)
     f70:	8b 81       	ldd	r24, Y+3	; 0x03
     f72:	28 2f       	mov	r18, r24
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	3b 87       	std	Y+11, r19	; 0x0b
     f78:	2a 87       	std	Y+10, r18	; 0x0a
     f7a:	8a 85       	ldd	r24, Y+10	; 0x0a
     f7c:	9b 85       	ldd	r25, Y+11	; 0x0b
     f7e:	00 97       	sbiw	r24, 0x00	; 0
     f80:	d1 f0       	breq	.+52     	; 0xfb6 <MDIO_voidSetPinValue+0xa4>
     f82:	2a 85       	ldd	r18, Y+10	; 0x0a
     f84:	3b 85       	ldd	r19, Y+11	; 0x0b
     f86:	21 30       	cpi	r18, 0x01	; 1
     f88:	31 05       	cpc	r19, r1
     f8a:	09 f0       	breq	.+2      	; 0xf8e <MDIO_voidSetPinValue+0x7c>
     f8c:	cf c0       	rjmp	.+414    	; 0x112c <MDIO_voidSetPinValue+0x21a>
			{
			case PIN_HIGH: SET_BIT(PORTA_REG,A_u8PinId);
     f8e:	ab e3       	ldi	r26, 0x3B	; 59
     f90:	b0 e0       	ldi	r27, 0x00	; 0
     f92:	eb e3       	ldi	r30, 0x3B	; 59
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	80 81       	ld	r24, Z
     f98:	48 2f       	mov	r20, r24
     f9a:	8a 81       	ldd	r24, Y+2	; 0x02
     f9c:	28 2f       	mov	r18, r24
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	02 2e       	mov	r0, r18
     fa6:	02 c0       	rjmp	.+4      	; 0xfac <MDIO_voidSetPinValue+0x9a>
     fa8:	88 0f       	add	r24, r24
     faa:	99 1f       	adc	r25, r25
     fac:	0a 94       	dec	r0
     fae:	e2 f7       	brpl	.-8      	; 0xfa8 <MDIO_voidSetPinValue+0x96>
     fb0:	84 2b       	or	r24, r20
     fb2:	8c 93       	st	X, r24
     fb4:	bb c0       	rjmp	.+374    	; 0x112c <MDIO_voidSetPinValue+0x21a>
						   break;
			case PIN_LOW : CLR_BIT(PORTA_REG,A_u8PinId);
     fb6:	ab e3       	ldi	r26, 0x3B	; 59
     fb8:	b0 e0       	ldi	r27, 0x00	; 0
     fba:	eb e3       	ldi	r30, 0x3B	; 59
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	80 81       	ld	r24, Z
     fc0:	48 2f       	mov	r20, r24
     fc2:	8a 81       	ldd	r24, Y+2	; 0x02
     fc4:	28 2f       	mov	r18, r24
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	02 2e       	mov	r0, r18
     fce:	02 c0       	rjmp	.+4      	; 0xfd4 <MDIO_voidSetPinValue+0xc2>
     fd0:	88 0f       	add	r24, r24
     fd2:	99 1f       	adc	r25, r25
     fd4:	0a 94       	dec	r0
     fd6:	e2 f7       	brpl	.-8      	; 0xfd0 <MDIO_voidSetPinValue+0xbe>
     fd8:	80 95       	com	r24
     fda:	84 23       	and	r24, r20
     fdc:	8c 93       	st	X, r24
     fde:	a6 c0       	rjmp	.+332    	; 0x112c <MDIO_voidSetPinValue+0x21a>
			default:
					 break;
			}
			break;
		case PORTB:
			switch(A_u8Value)
     fe0:	8b 81       	ldd	r24, Y+3	; 0x03
     fe2:	28 2f       	mov	r18, r24
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	39 87       	std	Y+9, r19	; 0x09
     fe8:	28 87       	std	Y+8, r18	; 0x08
     fea:	88 85       	ldd	r24, Y+8	; 0x08
     fec:	99 85       	ldd	r25, Y+9	; 0x09
     fee:	00 97       	sbiw	r24, 0x00	; 0
     ff0:	d1 f0       	breq	.+52     	; 0x1026 <MDIO_voidSetPinValue+0x114>
     ff2:	28 85       	ldd	r18, Y+8	; 0x08
     ff4:	39 85       	ldd	r19, Y+9	; 0x09
     ff6:	21 30       	cpi	r18, 0x01	; 1
     ff8:	31 05       	cpc	r19, r1
     ffa:	09 f0       	breq	.+2      	; 0xffe <MDIO_voidSetPinValue+0xec>
     ffc:	97 c0       	rjmp	.+302    	; 0x112c <MDIO_voidSetPinValue+0x21a>
			{
			case PIN_HIGH: SET_BIT(PORTB_REG,A_u8PinId);
     ffe:	a8 e3       	ldi	r26, 0x38	; 56
    1000:	b0 e0       	ldi	r27, 0x00	; 0
    1002:	e8 e3       	ldi	r30, 0x38	; 56
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	80 81       	ld	r24, Z
    1008:	48 2f       	mov	r20, r24
    100a:	8a 81       	ldd	r24, Y+2	; 0x02
    100c:	28 2f       	mov	r18, r24
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	02 2e       	mov	r0, r18
    1016:	02 c0       	rjmp	.+4      	; 0x101c <MDIO_voidSetPinValue+0x10a>
    1018:	88 0f       	add	r24, r24
    101a:	99 1f       	adc	r25, r25
    101c:	0a 94       	dec	r0
    101e:	e2 f7       	brpl	.-8      	; 0x1018 <MDIO_voidSetPinValue+0x106>
    1020:	84 2b       	or	r24, r20
    1022:	8c 93       	st	X, r24
    1024:	83 c0       	rjmp	.+262    	; 0x112c <MDIO_voidSetPinValue+0x21a>
					       break;
			case PIN_LOW : CLR_BIT(PORTB_REG,A_u8PinId);
    1026:	a8 e3       	ldi	r26, 0x38	; 56
    1028:	b0 e0       	ldi	r27, 0x00	; 0
    102a:	e8 e3       	ldi	r30, 0x38	; 56
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	80 81       	ld	r24, Z
    1030:	48 2f       	mov	r20, r24
    1032:	8a 81       	ldd	r24, Y+2	; 0x02
    1034:	28 2f       	mov	r18, r24
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	02 2e       	mov	r0, r18
    103e:	02 c0       	rjmp	.+4      	; 0x1044 <MDIO_voidSetPinValue+0x132>
    1040:	88 0f       	add	r24, r24
    1042:	99 1f       	adc	r25, r25
    1044:	0a 94       	dec	r0
    1046:	e2 f7       	brpl	.-8      	; 0x1040 <MDIO_voidSetPinValue+0x12e>
    1048:	80 95       	com	r24
    104a:	84 23       	and	r24, r20
    104c:	8c 93       	st	X, r24
    104e:	6e c0       	rjmp	.+220    	; 0x112c <MDIO_voidSetPinValue+0x21a>
			default:
					break;
			}
			break;
		case PORTC:
			switch(A_u8Value)
    1050:	8b 81       	ldd	r24, Y+3	; 0x03
    1052:	28 2f       	mov	r18, r24
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	3f 83       	std	Y+7, r19	; 0x07
    1058:	2e 83       	std	Y+6, r18	; 0x06
    105a:	8e 81       	ldd	r24, Y+6	; 0x06
    105c:	9f 81       	ldd	r25, Y+7	; 0x07
    105e:	00 97       	sbiw	r24, 0x00	; 0
    1060:	d1 f0       	breq	.+52     	; 0x1096 <MDIO_voidSetPinValue+0x184>
    1062:	2e 81       	ldd	r18, Y+6	; 0x06
    1064:	3f 81       	ldd	r19, Y+7	; 0x07
    1066:	21 30       	cpi	r18, 0x01	; 1
    1068:	31 05       	cpc	r19, r1
    106a:	09 f0       	breq	.+2      	; 0x106e <MDIO_voidSetPinValue+0x15c>
    106c:	5f c0       	rjmp	.+190    	; 0x112c <MDIO_voidSetPinValue+0x21a>
			{
			case PIN_HIGH: SET_BIT(PORTC_REG,A_u8PinId);
    106e:	a5 e3       	ldi	r26, 0x35	; 53
    1070:	b0 e0       	ldi	r27, 0x00	; 0
    1072:	e5 e3       	ldi	r30, 0x35	; 53
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	80 81       	ld	r24, Z
    1078:	48 2f       	mov	r20, r24
    107a:	8a 81       	ldd	r24, Y+2	; 0x02
    107c:	28 2f       	mov	r18, r24
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	02 2e       	mov	r0, r18
    1086:	02 c0       	rjmp	.+4      	; 0x108c <MDIO_voidSetPinValue+0x17a>
    1088:	88 0f       	add	r24, r24
    108a:	99 1f       	adc	r25, r25
    108c:	0a 94       	dec	r0
    108e:	e2 f7       	brpl	.-8      	; 0x1088 <MDIO_voidSetPinValue+0x176>
    1090:	84 2b       	or	r24, r20
    1092:	8c 93       	st	X, r24
    1094:	4b c0       	rjmp	.+150    	; 0x112c <MDIO_voidSetPinValue+0x21a>
						   break;
			case PIN_LOW : CLR_BIT(PORTC_REG,A_u8PinId);
    1096:	a5 e3       	ldi	r26, 0x35	; 53
    1098:	b0 e0       	ldi	r27, 0x00	; 0
    109a:	e5 e3       	ldi	r30, 0x35	; 53
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	80 81       	ld	r24, Z
    10a0:	48 2f       	mov	r20, r24
    10a2:	8a 81       	ldd	r24, Y+2	; 0x02
    10a4:	28 2f       	mov	r18, r24
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	02 2e       	mov	r0, r18
    10ae:	02 c0       	rjmp	.+4      	; 0x10b4 <MDIO_voidSetPinValue+0x1a2>
    10b0:	88 0f       	add	r24, r24
    10b2:	99 1f       	adc	r25, r25
    10b4:	0a 94       	dec	r0
    10b6:	e2 f7       	brpl	.-8      	; 0x10b0 <MDIO_voidSetPinValue+0x19e>
    10b8:	80 95       	com	r24
    10ba:	84 23       	and	r24, r20
    10bc:	8c 93       	st	X, r24
    10be:	36 c0       	rjmp	.+108    	; 0x112c <MDIO_voidSetPinValue+0x21a>
			default:
					break;
			}
			break;
		case PORTD:
			switch(A_u8Value)
    10c0:	8b 81       	ldd	r24, Y+3	; 0x03
    10c2:	28 2f       	mov	r18, r24
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	3d 83       	std	Y+5, r19	; 0x05
    10c8:	2c 83       	std	Y+4, r18	; 0x04
    10ca:	8c 81       	ldd	r24, Y+4	; 0x04
    10cc:	9d 81       	ldd	r25, Y+5	; 0x05
    10ce:	00 97       	sbiw	r24, 0x00	; 0
    10d0:	c9 f0       	breq	.+50     	; 0x1104 <MDIO_voidSetPinValue+0x1f2>
    10d2:	2c 81       	ldd	r18, Y+4	; 0x04
    10d4:	3d 81       	ldd	r19, Y+5	; 0x05
    10d6:	21 30       	cpi	r18, 0x01	; 1
    10d8:	31 05       	cpc	r19, r1
    10da:	41 f5       	brne	.+80     	; 0x112c <MDIO_voidSetPinValue+0x21a>
			{
			case PIN_HIGH: SET_BIT(PORTD_REG,A_u8PinId);
    10dc:	a2 e3       	ldi	r26, 0x32	; 50
    10de:	b0 e0       	ldi	r27, 0x00	; 0
    10e0:	e2 e3       	ldi	r30, 0x32	; 50
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	80 81       	ld	r24, Z
    10e6:	48 2f       	mov	r20, r24
    10e8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ea:	28 2f       	mov	r18, r24
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	02 2e       	mov	r0, r18
    10f4:	02 c0       	rjmp	.+4      	; 0x10fa <MDIO_voidSetPinValue+0x1e8>
    10f6:	88 0f       	add	r24, r24
    10f8:	99 1f       	adc	r25, r25
    10fa:	0a 94       	dec	r0
    10fc:	e2 f7       	brpl	.-8      	; 0x10f6 <MDIO_voidSetPinValue+0x1e4>
    10fe:	84 2b       	or	r24, r20
    1100:	8c 93       	st	X, r24
    1102:	14 c0       	rjmp	.+40     	; 0x112c <MDIO_voidSetPinValue+0x21a>
							 break;
			case PIN_LOW : CLR_BIT(PORTD_REG,A_u8PinId);
    1104:	a2 e3       	ldi	r26, 0x32	; 50
    1106:	b0 e0       	ldi	r27, 0x00	; 0
    1108:	e2 e3       	ldi	r30, 0x32	; 50
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	80 81       	ld	r24, Z
    110e:	48 2f       	mov	r20, r24
    1110:	8a 81       	ldd	r24, Y+2	; 0x02
    1112:	28 2f       	mov	r18, r24
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	02 2e       	mov	r0, r18
    111c:	02 c0       	rjmp	.+4      	; 0x1122 <MDIO_voidSetPinValue+0x210>
    111e:	88 0f       	add	r24, r24
    1120:	99 1f       	adc	r25, r25
    1122:	0a 94       	dec	r0
    1124:	e2 f7       	brpl	.-8      	; 0x111e <MDIO_voidSetPinValue+0x20c>
    1126:	80 95       	com	r24
    1128:	84 23       	and	r24, r20
    112a:	8c 93       	st	X, r24
		default:
			break;
		}


}
    112c:	2d 96       	adiw	r28, 0x0d	; 13
    112e:	0f b6       	in	r0, 0x3f	; 63
    1130:	f8 94       	cli
    1132:	de bf       	out	0x3e, r29	; 62
    1134:	0f be       	out	0x3f, r0	; 63
    1136:	cd bf       	out	0x3d, r28	; 61
    1138:	cf 91       	pop	r28
    113a:	df 91       	pop	r29
    113c:	08 95       	ret

0000113e <MDIO_u8GetPinValue>:

// PORT ID :- POTRTA - PORTB - PORTC - PORTD
// PIN ID :- PIN0 ... PIN7
u8 MDIO_u8GetPinValue(u8 A_u8PortId, u8 A_u8PinId)
{
    113e:	df 93       	push	r29
    1140:	cf 93       	push	r28
    1142:	00 d0       	rcall	.+0      	; 0x1144 <MDIO_u8GetPinValue+0x6>
    1144:	00 d0       	rcall	.+0      	; 0x1146 <MDIO_u8GetPinValue+0x8>
    1146:	0f 92       	push	r0
    1148:	cd b7       	in	r28, 0x3d	; 61
    114a:	de b7       	in	r29, 0x3e	; 62
    114c:	8a 83       	std	Y+2, r24	; 0x02
    114e:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_u8PinValue=0;
    1150:	19 82       	std	Y+1, r1	; 0x01
	switch(A_u8PortId)
    1152:	8a 81       	ldd	r24, Y+2	; 0x02
    1154:	28 2f       	mov	r18, r24
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	3d 83       	std	Y+5, r19	; 0x05
    115a:	2c 83       	std	Y+4, r18	; 0x04
    115c:	4c 81       	ldd	r20, Y+4	; 0x04
    115e:	5d 81       	ldd	r21, Y+5	; 0x05
    1160:	41 30       	cpi	r20, 0x01	; 1
    1162:	51 05       	cpc	r21, r1
    1164:	41 f1       	breq	.+80     	; 0x11b6 <MDIO_u8GetPinValue+0x78>
    1166:	8c 81       	ldd	r24, Y+4	; 0x04
    1168:	9d 81       	ldd	r25, Y+5	; 0x05
    116a:	82 30       	cpi	r24, 0x02	; 2
    116c:	91 05       	cpc	r25, r1
    116e:	34 f4       	brge	.+12     	; 0x117c <MDIO_u8GetPinValue+0x3e>
    1170:	2c 81       	ldd	r18, Y+4	; 0x04
    1172:	3d 81       	ldd	r19, Y+5	; 0x05
    1174:	21 15       	cp	r18, r1
    1176:	31 05       	cpc	r19, r1
    1178:	61 f0       	breq	.+24     	; 0x1192 <MDIO_u8GetPinValue+0x54>
    117a:	52 c0       	rjmp	.+164    	; 0x1220 <MDIO_u8GetPinValue+0xe2>
    117c:	4c 81       	ldd	r20, Y+4	; 0x04
    117e:	5d 81       	ldd	r21, Y+5	; 0x05
    1180:	42 30       	cpi	r20, 0x02	; 2
    1182:	51 05       	cpc	r21, r1
    1184:	51 f1       	breq	.+84     	; 0x11da <MDIO_u8GetPinValue+0x9c>
    1186:	8c 81       	ldd	r24, Y+4	; 0x04
    1188:	9d 81       	ldd	r25, Y+5	; 0x05
    118a:	83 30       	cpi	r24, 0x03	; 3
    118c:	91 05       	cpc	r25, r1
    118e:	b9 f1       	breq	.+110    	; 0x11fe <MDIO_u8GetPinValue+0xc0>
    1190:	47 c0       	rjmp	.+142    	; 0x1220 <MDIO_u8GetPinValue+0xe2>
	{
	case PORTA: local_u8PinValue = GET_BIT(PINA_REG,A_u8PinId);
    1192:	e9 e3       	ldi	r30, 0x39	; 57
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	28 2f       	mov	r18, r24
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	8b 81       	ldd	r24, Y+3	; 0x03
    119e:	88 2f       	mov	r24, r24
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	a9 01       	movw	r20, r18
    11a4:	02 c0       	rjmp	.+4      	; 0x11aa <MDIO_u8GetPinValue+0x6c>
    11a6:	55 95       	asr	r21
    11a8:	47 95       	ror	r20
    11aa:	8a 95       	dec	r24
    11ac:	e2 f7       	brpl	.-8      	; 0x11a6 <MDIO_u8GetPinValue+0x68>
    11ae:	ca 01       	movw	r24, r20
    11b0:	81 70       	andi	r24, 0x01	; 1
    11b2:	89 83       	std	Y+1, r24	; 0x01
    11b4:	35 c0       	rjmp	.+106    	; 0x1220 <MDIO_u8GetPinValue+0xe2>
				break;
	case PORTB: local_u8PinValue = GET_BIT(PINB_REG,A_u8PinId);
    11b6:	e6 e3       	ldi	r30, 0x36	; 54
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
    11bc:	28 2f       	mov	r18, r24
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	8b 81       	ldd	r24, Y+3	; 0x03
    11c2:	88 2f       	mov	r24, r24
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	a9 01       	movw	r20, r18
    11c8:	02 c0       	rjmp	.+4      	; 0x11ce <MDIO_u8GetPinValue+0x90>
    11ca:	55 95       	asr	r21
    11cc:	47 95       	ror	r20
    11ce:	8a 95       	dec	r24
    11d0:	e2 f7       	brpl	.-8      	; 0x11ca <MDIO_u8GetPinValue+0x8c>
    11d2:	ca 01       	movw	r24, r20
    11d4:	81 70       	andi	r24, 0x01	; 1
    11d6:	89 83       	std	Y+1, r24	; 0x01
    11d8:	23 c0       	rjmp	.+70     	; 0x1220 <MDIO_u8GetPinValue+0xe2>
				break;
	case PORTC: local_u8PinValue = GET_BIT(PINC_REG,A_u8PinId);
    11da:	e3 e3       	ldi	r30, 0x33	; 51
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	80 81       	ld	r24, Z
    11e0:	28 2f       	mov	r18, r24
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	8b 81       	ldd	r24, Y+3	; 0x03
    11e6:	88 2f       	mov	r24, r24
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	a9 01       	movw	r20, r18
    11ec:	02 c0       	rjmp	.+4      	; 0x11f2 <MDIO_u8GetPinValue+0xb4>
    11ee:	55 95       	asr	r21
    11f0:	47 95       	ror	r20
    11f2:	8a 95       	dec	r24
    11f4:	e2 f7       	brpl	.-8      	; 0x11ee <MDIO_u8GetPinValue+0xb0>
    11f6:	ca 01       	movw	r24, r20
    11f8:	81 70       	andi	r24, 0x01	; 1
    11fa:	89 83       	std	Y+1, r24	; 0x01
    11fc:	11 c0       	rjmp	.+34     	; 0x1220 <MDIO_u8GetPinValue+0xe2>
				break;
	case PORTD: local_u8PinValue = GET_BIT(PIND_REG,A_u8PinId);
    11fe:	e0 e3       	ldi	r30, 0x30	; 48
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	80 81       	ld	r24, Z
    1204:	28 2f       	mov	r18, r24
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	8b 81       	ldd	r24, Y+3	; 0x03
    120a:	88 2f       	mov	r24, r24
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	a9 01       	movw	r20, r18
    1210:	02 c0       	rjmp	.+4      	; 0x1216 <MDIO_u8GetPinValue+0xd8>
    1212:	55 95       	asr	r21
    1214:	47 95       	ror	r20
    1216:	8a 95       	dec	r24
    1218:	e2 f7       	brpl	.-8      	; 0x1212 <MDIO_u8GetPinValue+0xd4>
    121a:	ca 01       	movw	r24, r20
    121c:	81 70       	andi	r24, 0x01	; 1
    121e:	89 83       	std	Y+1, r24	; 0x01
				break;
	default:	break;
	}
	return local_u8PinValue;
    1220:	89 81       	ldd	r24, Y+1	; 0x01
}
    1222:	0f 90       	pop	r0
    1224:	0f 90       	pop	r0
    1226:	0f 90       	pop	r0
    1228:	0f 90       	pop	r0
    122a:	0f 90       	pop	r0
    122c:	cf 91       	pop	r28
    122e:	df 91       	pop	r29
    1230:	08 95       	ret

00001232 <MDIO_voidSetPortValue>:
// PORT ID :- POTRTA - PORTB - PORTC - PORTD
// PORT VALUE:- PIN_LOW - PIN_HIGH
void MDIO_voidSetPortValue(u8 A_u8PortId, u8 A_u8Value)
{
    1232:	df 93       	push	r29
    1234:	cf 93       	push	r28
    1236:	00 d0       	rcall	.+0      	; 0x1238 <MDIO_voidSetPortValue+0x6>
    1238:	00 d0       	rcall	.+0      	; 0x123a <MDIO_voidSetPortValue+0x8>
    123a:	cd b7       	in	r28, 0x3d	; 61
    123c:	de b7       	in	r29, 0x3e	; 62
    123e:	89 83       	std	Y+1, r24	; 0x01
    1240:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8PortId)
    1242:	89 81       	ldd	r24, Y+1	; 0x01
    1244:	28 2f       	mov	r18, r24
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	3c 83       	std	Y+4, r19	; 0x04
    124a:	2b 83       	std	Y+3, r18	; 0x03
    124c:	8b 81       	ldd	r24, Y+3	; 0x03
    124e:	9c 81       	ldd	r25, Y+4	; 0x04
    1250:	81 30       	cpi	r24, 0x01	; 1
    1252:	91 05       	cpc	r25, r1
    1254:	d1 f0       	breq	.+52     	; 0x128a <MDIO_voidSetPortValue+0x58>
    1256:	2b 81       	ldd	r18, Y+3	; 0x03
    1258:	3c 81       	ldd	r19, Y+4	; 0x04
    125a:	22 30       	cpi	r18, 0x02	; 2
    125c:	31 05       	cpc	r19, r1
    125e:	2c f4       	brge	.+10     	; 0x126a <MDIO_voidSetPortValue+0x38>
    1260:	8b 81       	ldd	r24, Y+3	; 0x03
    1262:	9c 81       	ldd	r25, Y+4	; 0x04
    1264:	00 97       	sbiw	r24, 0x00	; 0
    1266:	61 f0       	breq	.+24     	; 0x1280 <MDIO_voidSetPortValue+0x4e>
    1268:	1e c0       	rjmp	.+60     	; 0x12a6 <MDIO_voidSetPortValue+0x74>
    126a:	2b 81       	ldd	r18, Y+3	; 0x03
    126c:	3c 81       	ldd	r19, Y+4	; 0x04
    126e:	22 30       	cpi	r18, 0x02	; 2
    1270:	31 05       	cpc	r19, r1
    1272:	81 f0       	breq	.+32     	; 0x1294 <MDIO_voidSetPortValue+0x62>
    1274:	8b 81       	ldd	r24, Y+3	; 0x03
    1276:	9c 81       	ldd	r25, Y+4	; 0x04
    1278:	83 30       	cpi	r24, 0x03	; 3
    127a:	91 05       	cpc	r25, r1
    127c:	81 f0       	breq	.+32     	; 0x129e <MDIO_voidSetPortValue+0x6c>
    127e:	13 c0       	rjmp	.+38     	; 0x12a6 <MDIO_voidSetPortValue+0x74>
		{
		case PORTA: PORTA_REG =A_u8Value;
    1280:	eb e3       	ldi	r30, 0x3B	; 59
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	8a 81       	ldd	r24, Y+2	; 0x02
    1286:	80 83       	st	Z, r24
    1288:	0e c0       	rjmp	.+28     	; 0x12a6 <MDIO_voidSetPortValue+0x74>
					break;
		case PORTB: PORTB_REG =A_u8Value;
    128a:	e8 e3       	ldi	r30, 0x38	; 56
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	8a 81       	ldd	r24, Y+2	; 0x02
    1290:	80 83       	st	Z, r24
    1292:	09 c0       	rjmp	.+18     	; 0x12a6 <MDIO_voidSetPortValue+0x74>
					break;
		case PORTC: PORTC_REG =A_u8Value;
    1294:	e5 e3       	ldi	r30, 0x35	; 53
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	8a 81       	ldd	r24, Y+2	; 0x02
    129a:	80 83       	st	Z, r24
    129c:	04 c0       	rjmp	.+8      	; 0x12a6 <MDIO_voidSetPortValue+0x74>
					break;
		case PORTD: PORTD_REG =A_u8Value;
    129e:	e2 e3       	ldi	r30, 0x32	; 50
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	8a 81       	ldd	r24, Y+2	; 0x02
    12a4:	80 83       	st	Z, r24
					break;
		default:	break;
		}
}
    12a6:	0f 90       	pop	r0
    12a8:	0f 90       	pop	r0
    12aa:	0f 90       	pop	r0
    12ac:	0f 90       	pop	r0
    12ae:	cf 91       	pop	r28
    12b0:	df 91       	pop	r29
    12b2:	08 95       	ret

000012b4 <MDIO_voidSetPortDirection>:
// PORT ID :- POTRTA - PORTB - PORTC - PORTD
// PORT DIRECTION:- PIN_INPUT - PIN_OUTPUT
void MDIO_voidSetPortDirection(u8 A_u8PortId, u8 A_u8Direction)
{
    12b4:	df 93       	push	r29
    12b6:	cf 93       	push	r28
    12b8:	00 d0       	rcall	.+0      	; 0x12ba <MDIO_voidSetPortDirection+0x6>
    12ba:	00 d0       	rcall	.+0      	; 0x12bc <MDIO_voidSetPortDirection+0x8>
    12bc:	cd b7       	in	r28, 0x3d	; 61
    12be:	de b7       	in	r29, 0x3e	; 62
    12c0:	89 83       	std	Y+1, r24	; 0x01
    12c2:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8PortId)
    12c4:	89 81       	ldd	r24, Y+1	; 0x01
    12c6:	28 2f       	mov	r18, r24
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	3c 83       	std	Y+4, r19	; 0x04
    12cc:	2b 83       	std	Y+3, r18	; 0x03
    12ce:	8b 81       	ldd	r24, Y+3	; 0x03
    12d0:	9c 81       	ldd	r25, Y+4	; 0x04
    12d2:	81 30       	cpi	r24, 0x01	; 1
    12d4:	91 05       	cpc	r25, r1
    12d6:	d1 f0       	breq	.+52     	; 0x130c <MDIO_voidSetPortDirection+0x58>
    12d8:	2b 81       	ldd	r18, Y+3	; 0x03
    12da:	3c 81       	ldd	r19, Y+4	; 0x04
    12dc:	22 30       	cpi	r18, 0x02	; 2
    12de:	31 05       	cpc	r19, r1
    12e0:	2c f4       	brge	.+10     	; 0x12ec <MDIO_voidSetPortDirection+0x38>
    12e2:	8b 81       	ldd	r24, Y+3	; 0x03
    12e4:	9c 81       	ldd	r25, Y+4	; 0x04
    12e6:	00 97       	sbiw	r24, 0x00	; 0
    12e8:	61 f0       	breq	.+24     	; 0x1302 <MDIO_voidSetPortDirection+0x4e>
    12ea:	1e c0       	rjmp	.+60     	; 0x1328 <MDIO_voidSetPortDirection+0x74>
    12ec:	2b 81       	ldd	r18, Y+3	; 0x03
    12ee:	3c 81       	ldd	r19, Y+4	; 0x04
    12f0:	22 30       	cpi	r18, 0x02	; 2
    12f2:	31 05       	cpc	r19, r1
    12f4:	81 f0       	breq	.+32     	; 0x1316 <MDIO_voidSetPortDirection+0x62>
    12f6:	8b 81       	ldd	r24, Y+3	; 0x03
    12f8:	9c 81       	ldd	r25, Y+4	; 0x04
    12fa:	83 30       	cpi	r24, 0x03	; 3
    12fc:	91 05       	cpc	r25, r1
    12fe:	81 f0       	breq	.+32     	; 0x1320 <MDIO_voidSetPortDirection+0x6c>
    1300:	13 c0       	rjmp	.+38     	; 0x1328 <MDIO_voidSetPortDirection+0x74>
		{
		case PORTA: DDRA_REG = A_u8Direction;
    1302:	ea e3       	ldi	r30, 0x3A	; 58
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	8a 81       	ldd	r24, Y+2	; 0x02
    1308:	80 83       	st	Z, r24
    130a:	0e c0       	rjmp	.+28     	; 0x1328 <MDIO_voidSetPortDirection+0x74>
					break;
		case PORTB: DDRB_REG = A_u8Direction;
    130c:	e7 e3       	ldi	r30, 0x37	; 55
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	8a 81       	ldd	r24, Y+2	; 0x02
    1312:	80 83       	st	Z, r24
    1314:	09 c0       	rjmp	.+18     	; 0x1328 <MDIO_voidSetPortDirection+0x74>
					break;
		case PORTC: DDRC_REG = A_u8Direction;
    1316:	e4 e3       	ldi	r30, 0x34	; 52
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	8a 81       	ldd	r24, Y+2	; 0x02
    131c:	80 83       	st	Z, r24
    131e:	04 c0       	rjmp	.+8      	; 0x1328 <MDIO_voidSetPortDirection+0x74>
					break;
		case PORTD: DDRD_REG = A_u8Direction;
    1320:	e1 e3       	ldi	r30, 0x31	; 49
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	8a 81       	ldd	r24, Y+2	; 0x02
    1326:	80 83       	st	Z, r24
					break;
		default:	break;
		}
}
    1328:	0f 90       	pop	r0
    132a:	0f 90       	pop	r0
    132c:	0f 90       	pop	r0
    132e:	0f 90       	pop	r0
    1330:	cf 91       	pop	r28
    1332:	df 91       	pop	r29
    1334:	08 95       	ret

00001336 <MEXTI_voidConfig>:
#include "../include/MCAL/EXTI/EXTI_configuration.h"



void MEXTI_voidConfig(u8 A_u8EXTI, u8 A_u8SenseMode)
{
    1336:	df 93       	push	r29
    1338:	cf 93       	push	r28
    133a:	00 d0       	rcall	.+0      	; 0x133c <MEXTI_voidConfig+0x6>
    133c:	00 d0       	rcall	.+0      	; 0x133e <MEXTI_voidConfig+0x8>
    133e:	00 d0       	rcall	.+0      	; 0x1340 <MEXTI_voidConfig+0xa>
    1340:	cd b7       	in	r28, 0x3d	; 61
    1342:	de b7       	in	r29, 0x3e	; 62
    1344:	89 83       	std	Y+1, r24	; 0x01
    1346:	6a 83       	std	Y+2, r22	; 0x02
	if(A_u8SenseMode <4)
    1348:	8a 81       	ldd	r24, Y+2	; 0x02
    134a:	84 30       	cpi	r24, 0x04	; 4
    134c:	08 f0       	brcs	.+2      	; 0x1350 <MEXTI_voidConfig+0x1a>
    134e:	5a c0       	rjmp	.+180    	; 0x1404 <MEXTI_voidConfig+0xce>
	{
		switch (A_u8EXTI)
    1350:	89 81       	ldd	r24, Y+1	; 0x01
    1352:	28 2f       	mov	r18, r24
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	3e 83       	std	Y+6, r19	; 0x06
    1358:	2d 83       	std	Y+5, r18	; 0x05
    135a:	8d 81       	ldd	r24, Y+5	; 0x05
    135c:	9e 81       	ldd	r25, Y+6	; 0x06
    135e:	81 30       	cpi	r24, 0x01	; 1
    1360:	91 05       	cpc	r25, r1
    1362:	d1 f0       	breq	.+52     	; 0x1398 <MEXTI_voidConfig+0x62>
    1364:	2d 81       	ldd	r18, Y+5	; 0x05
    1366:	3e 81       	ldd	r19, Y+6	; 0x06
    1368:	22 30       	cpi	r18, 0x02	; 2
    136a:	31 05       	cpc	r19, r1
    136c:	61 f1       	breq	.+88     	; 0x13c6 <MEXTI_voidConfig+0x90>
    136e:	8d 81       	ldd	r24, Y+5	; 0x05
    1370:	9e 81       	ldd	r25, Y+6	; 0x06
    1372:	00 97       	sbiw	r24, 0x00	; 0
    1374:	09 f0       	breq	.+2      	; 0x1378 <MEXTI_voidConfig+0x42>
    1376:	46 c0       	rjmp	.+140    	; 0x1404 <MEXTI_voidConfig+0xce>
		{
			case EXTI0: /* WRITE THE SENSE MODE ON MCUCR BIT0 & BIT1 */
						MCUCR &= ~(SENSE_MODE_MASK << EXTI0_SENSE_BIT);
    1378:	a5 e5       	ldi	r26, 0x55	; 85
    137a:	b0 e0       	ldi	r27, 0x00	; 0
    137c:	e5 e5       	ldi	r30, 0x55	; 85
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	80 81       	ld	r24, Z
    1382:	8d 7f       	andi	r24, 0xFD	; 253
    1384:	8c 93       	st	X, r24
						MCUCR |= (A_u8SenseMode << EXTI0_SENSE_BIT);
    1386:	a5 e5       	ldi	r26, 0x55	; 85
    1388:	b0 e0       	ldi	r27, 0x00	; 0
    138a:	e5 e5       	ldi	r30, 0x55	; 85
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	90 81       	ld	r25, Z
    1390:	8a 81       	ldd	r24, Y+2	; 0x02
    1392:	89 2b       	or	r24, r25
    1394:	8c 93       	st	X, r24
    1396:	36 c0       	rjmp	.+108    	; 0x1404 <MEXTI_voidConfig+0xce>
						break;
			case EXTI1: /* WRITE THE SENSE MODE ON MCUCR BIT2 & BIT3 */
						MCUCR &= ~(SENSE_MODE_MASK << EXTI1_SENSE_BIT);
    1398:	a5 e5       	ldi	r26, 0x55	; 85
    139a:	b0 e0       	ldi	r27, 0x00	; 0
    139c:	e5 e5       	ldi	r30, 0x55	; 85
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	80 81       	ld	r24, Z
    13a2:	87 7f       	andi	r24, 0xF7	; 247
    13a4:	8c 93       	st	X, r24
						MCUCR |= (A_u8SenseMode << EXTI1_SENSE_BIT);
    13a6:	a5 e5       	ldi	r26, 0x55	; 85
    13a8:	b0 e0       	ldi	r27, 0x00	; 0
    13aa:	e5 e5       	ldi	r30, 0x55	; 85
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	80 81       	ld	r24, Z
    13b0:	28 2f       	mov	r18, r24
    13b2:	8a 81       	ldd	r24, Y+2	; 0x02
    13b4:	88 2f       	mov	r24, r24
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	88 0f       	add	r24, r24
    13ba:	99 1f       	adc	r25, r25
    13bc:	88 0f       	add	r24, r24
    13be:	99 1f       	adc	r25, r25
    13c0:	82 2b       	or	r24, r18
    13c2:	8c 93       	st	X, r24
    13c4:	1f c0       	rjmp	.+62     	; 0x1404 <MEXTI_voidConfig+0xce>
						break;
			case EXTI2:/*SWITCH ON SENSE MODE AND WRITE ON MCUSCR BIT 6 */
						switch(A_u8SenseMode)
    13c6:	8a 81       	ldd	r24, Y+2	; 0x02
    13c8:	28 2f       	mov	r18, r24
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	3c 83       	std	Y+4, r19	; 0x04
    13ce:	2b 83       	std	Y+3, r18	; 0x03
    13d0:	8b 81       	ldd	r24, Y+3	; 0x03
    13d2:	9c 81       	ldd	r25, Y+4	; 0x04
    13d4:	82 30       	cpi	r24, 0x02	; 2
    13d6:	91 05       	cpc	r25, r1
    13d8:	31 f0       	breq	.+12     	; 0x13e6 <MEXTI_voidConfig+0xb0>
    13da:	2b 81       	ldd	r18, Y+3	; 0x03
    13dc:	3c 81       	ldd	r19, Y+4	; 0x04
    13de:	23 30       	cpi	r18, 0x03	; 3
    13e0:	31 05       	cpc	r19, r1
    13e2:	49 f0       	breq	.+18     	; 0x13f6 <MEXTI_voidConfig+0xc0>
    13e4:	0f c0       	rjmp	.+30     	; 0x1404 <MEXTI_voidConfig+0xce>
						{
							case FALLING_EDGE: /*MCUCSR BIT6 = 0 */
												CLR_BIT(MCUCSR,6);break;
    13e6:	a4 e5       	ldi	r26, 0x54	; 84
    13e8:	b0 e0       	ldi	r27, 0x00	; 0
    13ea:	e4 e5       	ldi	r30, 0x54	; 84
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	80 81       	ld	r24, Z
    13f0:	8f 7b       	andi	r24, 0xBF	; 191
    13f2:	8c 93       	st	X, r24
    13f4:	07 c0       	rjmp	.+14     	; 0x1404 <MEXTI_voidConfig+0xce>
							case RISING_EDGE: /* MCUCSR BIT6 = 1 */
												SET_BIT(MCUCSR,6);break;
    13f6:	a4 e5       	ldi	r26, 0x54	; 84
    13f8:	b0 e0       	ldi	r27, 0x00	; 0
    13fa:	e4 e5       	ldi	r30, 0x54	; 84
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	80 81       	ld	r24, Z
    1400:	80 64       	ori	r24, 0x40	; 64
    1402:	8c 93       	st	X, r24
						break;
			default:
					break;
		}
	}
}
    1404:	26 96       	adiw	r28, 0x06	; 6
    1406:	0f b6       	in	r0, 0x3f	; 63
    1408:	f8 94       	cli
    140a:	de bf       	out	0x3e, r29	; 62
    140c:	0f be       	out	0x3f, r0	; 63
    140e:	cd bf       	out	0x3d, r28	; 61
    1410:	cf 91       	pop	r28
    1412:	df 91       	pop	r29
    1414:	08 95       	ret

00001416 <MEXTI_voidEnable>:



void MEXTI_voidEnable(u8 A_u8EXTI)
{
    1416:	df 93       	push	r29
    1418:	cf 93       	push	r28
    141a:	00 d0       	rcall	.+0      	; 0x141c <MEXTI_voidEnable+0x6>
    141c:	0f 92       	push	r0
    141e:	cd b7       	in	r28, 0x3d	; 61
    1420:	de b7       	in	r29, 0x3e	; 62
    1422:	89 83       	std	Y+1, r24	; 0x01
	switch (A_u8EXTI)
    1424:	89 81       	ldd	r24, Y+1	; 0x01
    1426:	28 2f       	mov	r18, r24
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	3b 83       	std	Y+3, r19	; 0x03
    142c:	2a 83       	std	Y+2, r18	; 0x02
    142e:	8a 81       	ldd	r24, Y+2	; 0x02
    1430:	9b 81       	ldd	r25, Y+3	; 0x03
    1432:	81 30       	cpi	r24, 0x01	; 1
    1434:	91 05       	cpc	r25, r1
    1436:	89 f0       	breq	.+34     	; 0x145a <MEXTI_voidEnable+0x44>
    1438:	2a 81       	ldd	r18, Y+2	; 0x02
    143a:	3b 81       	ldd	r19, Y+3	; 0x03
    143c:	22 30       	cpi	r18, 0x02	; 2
    143e:	31 05       	cpc	r19, r1
    1440:	a1 f0       	breq	.+40     	; 0x146a <MEXTI_voidEnable+0x54>
    1442:	8a 81       	ldd	r24, Y+2	; 0x02
    1444:	9b 81       	ldd	r25, Y+3	; 0x03
    1446:	00 97       	sbiw	r24, 0x00	; 0
    1448:	b9 f4       	brne	.+46     	; 0x1478 <MEXTI_voidEnable+0x62>
	{
		case EXTI0: /* WRITE ONE ON GICR BIT 6 */
					SET_BIT(GICR,EXTI0_EN_BIT);
    144a:	ab e5       	ldi	r26, 0x5B	; 91
    144c:	b0 e0       	ldi	r27, 0x00	; 0
    144e:	eb e5       	ldi	r30, 0x5B	; 91
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	80 81       	ld	r24, Z
    1454:	80 64       	ori	r24, 0x40	; 64
    1456:	8c 93       	st	X, r24
    1458:	0f c0       	rjmp	.+30     	; 0x1478 <MEXTI_voidEnable+0x62>
					break;
		case EXTI1: /* WRITE ONE ON GICR BIT 7 */
					SET_BIT(GICR,EXTI1_EN_BIT);
    145a:	ab e5       	ldi	r26, 0x5B	; 91
    145c:	b0 e0       	ldi	r27, 0x00	; 0
    145e:	eb e5       	ldi	r30, 0x5B	; 91
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	80 68       	ori	r24, 0x80	; 128
    1466:	8c 93       	st	X, r24
    1468:	07 c0       	rjmp	.+14     	; 0x1478 <MEXTI_voidEnable+0x62>
					break;
		case EXTI2: /* WRITE ONE ON GICR BIT 5 */
					SET_BIT(GICR,EXTI2_EN_BIT);
    146a:	ab e5       	ldi	r26, 0x5B	; 91
    146c:	b0 e0       	ldi	r27, 0x00	; 0
    146e:	eb e5       	ldi	r30, 0x5B	; 91
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	80 81       	ld	r24, Z
    1474:	80 62       	ori	r24, 0x20	; 32
    1476:	8c 93       	st	X, r24
					break;
		default:
				break;
	}
}
    1478:	0f 90       	pop	r0
    147a:	0f 90       	pop	r0
    147c:	0f 90       	pop	r0
    147e:	cf 91       	pop	r28
    1480:	df 91       	pop	r29
    1482:	08 95       	ret

00001484 <MEXTI_voidDisable>:
void MEXTI_voidDisable(u8 A_u8EXTI)
{
    1484:	df 93       	push	r29
    1486:	cf 93       	push	r28
    1488:	00 d0       	rcall	.+0      	; 0x148a <MEXTI_voidDisable+0x6>
    148a:	0f 92       	push	r0
    148c:	cd b7       	in	r28, 0x3d	; 61
    148e:	de b7       	in	r29, 0x3e	; 62
    1490:	89 83       	std	Y+1, r24	; 0x01
	switch (A_u8EXTI)
    1492:	89 81       	ldd	r24, Y+1	; 0x01
    1494:	28 2f       	mov	r18, r24
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	3b 83       	std	Y+3, r19	; 0x03
    149a:	2a 83       	std	Y+2, r18	; 0x02
    149c:	8a 81       	ldd	r24, Y+2	; 0x02
    149e:	9b 81       	ldd	r25, Y+3	; 0x03
    14a0:	81 30       	cpi	r24, 0x01	; 1
    14a2:	91 05       	cpc	r25, r1
    14a4:	89 f0       	breq	.+34     	; 0x14c8 <MEXTI_voidDisable+0x44>
    14a6:	2a 81       	ldd	r18, Y+2	; 0x02
    14a8:	3b 81       	ldd	r19, Y+3	; 0x03
    14aa:	22 30       	cpi	r18, 0x02	; 2
    14ac:	31 05       	cpc	r19, r1
    14ae:	a1 f0       	breq	.+40     	; 0x14d8 <MEXTI_voidDisable+0x54>
    14b0:	8a 81       	ldd	r24, Y+2	; 0x02
    14b2:	9b 81       	ldd	r25, Y+3	; 0x03
    14b4:	00 97       	sbiw	r24, 0x00	; 0
    14b6:	b9 f4       	brne	.+46     	; 0x14e6 <MEXTI_voidDisable+0x62>
	{
		case EXTI0: /* WRITE ZERO ON GICR BIT 6 */
					CLR_BIT(GICR,EXTI0_EN_BIT);
    14b8:	ab e5       	ldi	r26, 0x5B	; 91
    14ba:	b0 e0       	ldi	r27, 0x00	; 0
    14bc:	eb e5       	ldi	r30, 0x5B	; 91
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	80 81       	ld	r24, Z
    14c2:	8f 7b       	andi	r24, 0xBF	; 191
    14c4:	8c 93       	st	X, r24
    14c6:	0f c0       	rjmp	.+30     	; 0x14e6 <MEXTI_voidDisable+0x62>
					break;
		case EXTI1: /* WRITE ZERO ON GICR BIT 7 */
					CLR_BIT(GICR,EXTI1_EN_BIT);
    14c8:	ab e5       	ldi	r26, 0x5B	; 91
    14ca:	b0 e0       	ldi	r27, 0x00	; 0
    14cc:	eb e5       	ldi	r30, 0x5B	; 91
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	80 81       	ld	r24, Z
    14d2:	8f 77       	andi	r24, 0x7F	; 127
    14d4:	8c 93       	st	X, r24
    14d6:	07 c0       	rjmp	.+14     	; 0x14e6 <MEXTI_voidDisable+0x62>
					break;
		case EXTI2: /* WRITE ZERO ON GICR BIT 5 */
					CLR_BIT(GICR,EXTI2_EN_BIT);
    14d8:	ab e5       	ldi	r26, 0x5B	; 91
    14da:	b0 e0       	ldi	r27, 0x00	; 0
    14dc:	eb e5       	ldi	r30, 0x5B	; 91
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	8f 7d       	andi	r24, 0xDF	; 223
    14e4:	8c 93       	st	X, r24
					break;
		default:
				 break;
	}
}
    14e6:	0f 90       	pop	r0
    14e8:	0f 90       	pop	r0
    14ea:	0f 90       	pop	r0
    14ec:	cf 91       	pop	r28
    14ee:	df 91       	pop	r29
    14f0:	08 95       	ret

000014f2 <MEXTI_voidClearFlag>:

void MEXTI_voidClearFlag(u8 A_u8EXTI)
{
    14f2:	df 93       	push	r29
    14f4:	cf 93       	push	r28
    14f6:	00 d0       	rcall	.+0      	; 0x14f8 <MEXTI_voidClearFlag+0x6>
    14f8:	0f 92       	push	r0
    14fa:	cd b7       	in	r28, 0x3d	; 61
    14fc:	de b7       	in	r29, 0x3e	; 62
    14fe:	89 83       	std	Y+1, r24	; 0x01
	switch (A_u8EXTI)
    1500:	89 81       	ldd	r24, Y+1	; 0x01
    1502:	28 2f       	mov	r18, r24
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	3b 83       	std	Y+3, r19	; 0x03
    1508:	2a 83       	std	Y+2, r18	; 0x02
    150a:	8a 81       	ldd	r24, Y+2	; 0x02
    150c:	9b 81       	ldd	r25, Y+3	; 0x03
    150e:	81 30       	cpi	r24, 0x01	; 1
    1510:	91 05       	cpc	r25, r1
    1512:	89 f0       	breq	.+34     	; 0x1536 <MEXTI_voidClearFlag+0x44>
    1514:	2a 81       	ldd	r18, Y+2	; 0x02
    1516:	3b 81       	ldd	r19, Y+3	; 0x03
    1518:	22 30       	cpi	r18, 0x02	; 2
    151a:	31 05       	cpc	r19, r1
    151c:	a1 f0       	breq	.+40     	; 0x1546 <MEXTI_voidClearFlag+0x54>
    151e:	8a 81       	ldd	r24, Y+2	; 0x02
    1520:	9b 81       	ldd	r25, Y+3	; 0x03
    1522:	00 97       	sbiw	r24, 0x00	; 0
    1524:	b9 f4       	brne	.+46     	; 0x1554 <MEXTI_voidClearFlag+0x62>
		{
			case EXTI0: /* WRITE ONE ON GIFR BIT 6 */
						SET_BIT(GIFR,EXTI0_FLAG_BIT);
    1526:	aa e5       	ldi	r26, 0x5A	; 90
    1528:	b0 e0       	ldi	r27, 0x00	; 0
    152a:	ea e5       	ldi	r30, 0x5A	; 90
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	80 81       	ld	r24, Z
    1530:	80 64       	ori	r24, 0x40	; 64
    1532:	8c 93       	st	X, r24
    1534:	0f c0       	rjmp	.+30     	; 0x1554 <MEXTI_voidClearFlag+0x62>
						break;
			case EXTI1: /* WRITE ONE ON GIFR BIT 7 */
						SET_BIT(GIFR,EXTI1_FLAG_BIT);
    1536:	aa e5       	ldi	r26, 0x5A	; 90
    1538:	b0 e0       	ldi	r27, 0x00	; 0
    153a:	ea e5       	ldi	r30, 0x5A	; 90
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	80 68       	ori	r24, 0x80	; 128
    1542:	8c 93       	st	X, r24
    1544:	07 c0       	rjmp	.+14     	; 0x1554 <MEXTI_voidClearFlag+0x62>
						break;
			case EXTI2: /* WRITE ONE ON GIFR BIT 5 */
						SET_BIT(GIFR,EXTI2_FLAG_BIT);
    1546:	aa e5       	ldi	r26, 0x5A	; 90
    1548:	b0 e0       	ldi	r27, 0x00	; 0
    154a:	ea e5       	ldi	r30, 0x5A	; 90
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	80 81       	ld	r24, Z
    1550:	80 62       	ori	r24, 0x20	; 32
    1552:	8c 93       	st	X, r24
						break;
			default:
					break;
		}
}
    1554:	0f 90       	pop	r0
    1556:	0f 90       	pop	r0
    1558:	0f 90       	pop	r0
    155a:	cf 91       	pop	r28
    155c:	df 91       	pop	r29
    155e:	08 95       	ret

00001560 <MEXTI_voidSetCallBack>:
void (*EXTI0_CallBack) (void) =NULL;
void (*EXTI1_CallBack) (void) =NULL;
void (*EXTI2_CallBack) (void) =NULL;

void MEXTI_voidSetCallBack(void (*PtrToFunction)(void),u8 A_u8EXTI)
{
    1560:	df 93       	push	r29
    1562:	cf 93       	push	r28
    1564:	00 d0       	rcall	.+0      	; 0x1566 <MEXTI_voidSetCallBack+0x6>
    1566:	00 d0       	rcall	.+0      	; 0x1568 <MEXTI_voidSetCallBack+0x8>
    1568:	0f 92       	push	r0
    156a:	cd b7       	in	r28, 0x3d	; 61
    156c:	de b7       	in	r29, 0x3e	; 62
    156e:	9a 83       	std	Y+2, r25	; 0x02
    1570:	89 83       	std	Y+1, r24	; 0x01
    1572:	6b 83       	std	Y+3, r22	; 0x03
	if(PtrToFunction != NULL)
    1574:	89 81       	ldd	r24, Y+1	; 0x01
    1576:	9a 81       	ldd	r25, Y+2	; 0x02
    1578:	00 97       	sbiw	r24, 0x00	; 0
    157a:	39 f1       	breq	.+78     	; 0x15ca <MEXTI_voidSetCallBack+0x6a>
	{
		switch(A_u8EXTI)
    157c:	8b 81       	ldd	r24, Y+3	; 0x03
    157e:	28 2f       	mov	r18, r24
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	3d 83       	std	Y+5, r19	; 0x05
    1584:	2c 83       	std	Y+4, r18	; 0x04
    1586:	8c 81       	ldd	r24, Y+4	; 0x04
    1588:	9d 81       	ldd	r25, Y+5	; 0x05
    158a:	81 30       	cpi	r24, 0x01	; 1
    158c:	91 05       	cpc	r25, r1
    158e:	81 f0       	breq	.+32     	; 0x15b0 <MEXTI_voidSetCallBack+0x50>
    1590:	2c 81       	ldd	r18, Y+4	; 0x04
    1592:	3d 81       	ldd	r19, Y+5	; 0x05
    1594:	22 30       	cpi	r18, 0x02	; 2
    1596:	31 05       	cpc	r19, r1
    1598:	91 f0       	breq	.+36     	; 0x15be <MEXTI_voidSetCallBack+0x5e>
    159a:	8c 81       	ldd	r24, Y+4	; 0x04
    159c:	9d 81       	ldd	r25, Y+5	; 0x05
    159e:	00 97       	sbiw	r24, 0x00	; 0
    15a0:	a1 f4       	brne	.+40     	; 0x15ca <MEXTI_voidSetCallBack+0x6a>
		{
		case EXTI0: EXTI0_CallBack = PtrToFunction; break;
    15a2:	89 81       	ldd	r24, Y+1	; 0x01
    15a4:	9a 81       	ldd	r25, Y+2	; 0x02
    15a6:	90 93 69 00 	sts	0x0069, r25
    15aa:	80 93 68 00 	sts	0x0068, r24
    15ae:	0d c0       	rjmp	.+26     	; 0x15ca <MEXTI_voidSetCallBack+0x6a>
		case EXTI1: EXTI1_CallBack = PtrToFunction; break;
    15b0:	89 81       	ldd	r24, Y+1	; 0x01
    15b2:	9a 81       	ldd	r25, Y+2	; 0x02
    15b4:	90 93 6b 00 	sts	0x006B, r25
    15b8:	80 93 6a 00 	sts	0x006A, r24
    15bc:	06 c0       	rjmp	.+12     	; 0x15ca <MEXTI_voidSetCallBack+0x6a>
		case EXTI2: EXTI2_CallBack = PtrToFunction; break;
    15be:	89 81       	ldd	r24, Y+1	; 0x01
    15c0:	9a 81       	ldd	r25, Y+2	; 0x02
    15c2:	90 93 6d 00 	sts	0x006D, r25
    15c6:	80 93 6c 00 	sts	0x006C, r24
		default: break;
		}
	}
}
    15ca:	0f 90       	pop	r0
    15cc:	0f 90       	pop	r0
    15ce:	0f 90       	pop	r0
    15d0:	0f 90       	pop	r0
    15d2:	0f 90       	pop	r0
    15d4:	cf 91       	pop	r28
    15d6:	df 91       	pop	r29
    15d8:	08 95       	ret

000015da <__vector_1>:
/* VECTORS */
void __vector_1(void)  __attribute__((signal));
void __vector_1(void)
{
    15da:	1f 92       	push	r1
    15dc:	0f 92       	push	r0
    15de:	0f b6       	in	r0, 0x3f	; 63
    15e0:	0f 92       	push	r0
    15e2:	11 24       	eor	r1, r1
    15e4:	2f 93       	push	r18
    15e6:	3f 93       	push	r19
    15e8:	4f 93       	push	r20
    15ea:	5f 93       	push	r21
    15ec:	6f 93       	push	r22
    15ee:	7f 93       	push	r23
    15f0:	8f 93       	push	r24
    15f2:	9f 93       	push	r25
    15f4:	af 93       	push	r26
    15f6:	bf 93       	push	r27
    15f8:	ef 93       	push	r30
    15fa:	ff 93       	push	r31
    15fc:	df 93       	push	r29
    15fe:	cf 93       	push	r28
    1600:	cd b7       	in	r28, 0x3d	; 61
    1602:	de b7       	in	r29, 0x3e	; 62
	if(EXTI0_CallBack != NULL)
    1604:	80 91 68 00 	lds	r24, 0x0068
    1608:	90 91 69 00 	lds	r25, 0x0069
    160c:	00 97       	sbiw	r24, 0x00	; 0
    160e:	29 f0       	breq	.+10     	; 0x161a <__vector_1+0x40>
	{
		EXTI0_CallBack();
    1610:	e0 91 68 00 	lds	r30, 0x0068
    1614:	f0 91 69 00 	lds	r31, 0x0069
    1618:	09 95       	icall
	}
}
    161a:	cf 91       	pop	r28
    161c:	df 91       	pop	r29
    161e:	ff 91       	pop	r31
    1620:	ef 91       	pop	r30
    1622:	bf 91       	pop	r27
    1624:	af 91       	pop	r26
    1626:	9f 91       	pop	r25
    1628:	8f 91       	pop	r24
    162a:	7f 91       	pop	r23
    162c:	6f 91       	pop	r22
    162e:	5f 91       	pop	r21
    1630:	4f 91       	pop	r20
    1632:	3f 91       	pop	r19
    1634:	2f 91       	pop	r18
    1636:	0f 90       	pop	r0
    1638:	0f be       	out	0x3f, r0	; 63
    163a:	0f 90       	pop	r0
    163c:	1f 90       	pop	r1
    163e:	18 95       	reti

00001640 <__vector_2>:

void __vector_2(void)  __attribute__((signal));
void __vector_2(void)
{
    1640:	1f 92       	push	r1
    1642:	0f 92       	push	r0
    1644:	0f b6       	in	r0, 0x3f	; 63
    1646:	0f 92       	push	r0
    1648:	11 24       	eor	r1, r1
    164a:	2f 93       	push	r18
    164c:	3f 93       	push	r19
    164e:	4f 93       	push	r20
    1650:	5f 93       	push	r21
    1652:	6f 93       	push	r22
    1654:	7f 93       	push	r23
    1656:	8f 93       	push	r24
    1658:	9f 93       	push	r25
    165a:	af 93       	push	r26
    165c:	bf 93       	push	r27
    165e:	ef 93       	push	r30
    1660:	ff 93       	push	r31
    1662:	df 93       	push	r29
    1664:	cf 93       	push	r28
    1666:	cd b7       	in	r28, 0x3d	; 61
    1668:	de b7       	in	r29, 0x3e	; 62
	if(EXTI1_CallBack != NULL)
    166a:	80 91 6a 00 	lds	r24, 0x006A
    166e:	90 91 6b 00 	lds	r25, 0x006B
    1672:	00 97       	sbiw	r24, 0x00	; 0
    1674:	29 f0       	breq	.+10     	; 0x1680 <__vector_2+0x40>
	{
		EXTI1_CallBack();
    1676:	e0 91 6a 00 	lds	r30, 0x006A
    167a:	f0 91 6b 00 	lds	r31, 0x006B
    167e:	09 95       	icall
	}
}
    1680:	cf 91       	pop	r28
    1682:	df 91       	pop	r29
    1684:	ff 91       	pop	r31
    1686:	ef 91       	pop	r30
    1688:	bf 91       	pop	r27
    168a:	af 91       	pop	r26
    168c:	9f 91       	pop	r25
    168e:	8f 91       	pop	r24
    1690:	7f 91       	pop	r23
    1692:	6f 91       	pop	r22
    1694:	5f 91       	pop	r21
    1696:	4f 91       	pop	r20
    1698:	3f 91       	pop	r19
    169a:	2f 91       	pop	r18
    169c:	0f 90       	pop	r0
    169e:	0f be       	out	0x3f, r0	; 63
    16a0:	0f 90       	pop	r0
    16a2:	1f 90       	pop	r1
    16a4:	18 95       	reti

000016a6 <__vector_3>:

void __vector_3(void)  __attribute__((signal));
void __vector_3(void)
{
    16a6:	1f 92       	push	r1
    16a8:	0f 92       	push	r0
    16aa:	0f b6       	in	r0, 0x3f	; 63
    16ac:	0f 92       	push	r0
    16ae:	11 24       	eor	r1, r1
    16b0:	2f 93       	push	r18
    16b2:	3f 93       	push	r19
    16b4:	4f 93       	push	r20
    16b6:	5f 93       	push	r21
    16b8:	6f 93       	push	r22
    16ba:	7f 93       	push	r23
    16bc:	8f 93       	push	r24
    16be:	9f 93       	push	r25
    16c0:	af 93       	push	r26
    16c2:	bf 93       	push	r27
    16c4:	ef 93       	push	r30
    16c6:	ff 93       	push	r31
    16c8:	df 93       	push	r29
    16ca:	cf 93       	push	r28
    16cc:	cd b7       	in	r28, 0x3d	; 61
    16ce:	de b7       	in	r29, 0x3e	; 62
	if(EXTI2_CallBack != NULL)
    16d0:	80 91 6c 00 	lds	r24, 0x006C
    16d4:	90 91 6d 00 	lds	r25, 0x006D
    16d8:	00 97       	sbiw	r24, 0x00	; 0
    16da:	29 f0       	breq	.+10     	; 0x16e6 <__vector_3+0x40>
	{
		EXTI2_CallBack();
    16dc:	e0 91 6c 00 	lds	r30, 0x006C
    16e0:	f0 91 6d 00 	lds	r31, 0x006D
    16e4:	09 95       	icall
	}
}
    16e6:	cf 91       	pop	r28
    16e8:	df 91       	pop	r29
    16ea:	ff 91       	pop	r31
    16ec:	ef 91       	pop	r30
    16ee:	bf 91       	pop	r27
    16f0:	af 91       	pop	r26
    16f2:	9f 91       	pop	r25
    16f4:	8f 91       	pop	r24
    16f6:	7f 91       	pop	r23
    16f8:	6f 91       	pop	r22
    16fa:	5f 91       	pop	r21
    16fc:	4f 91       	pop	r20
    16fe:	3f 91       	pop	r19
    1700:	2f 91       	pop	r18
    1702:	0f 90       	pop	r0
    1704:	0f be       	out	0x3f, r0	; 63
    1706:	0f 90       	pop	r0
    1708:	1f 90       	pop	r1
    170a:	18 95       	reti

0000170c <MGI_voidEnable>:
#include "../include/MCAL/GI/GI_configuration.h"



void MGI_voidEnable(void)
{
    170c:	df 93       	push	r29
    170e:	cf 93       	push	r28
    1710:	cd b7       	in	r28, 0x3d	; 61
    1712:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,GLOBAL_INTERRUPT_ENABLE_BIT);
    1714:	af e5       	ldi	r26, 0x5F	; 95
    1716:	b0 e0       	ldi	r27, 0x00	; 0
    1718:	ef e5       	ldi	r30, 0x5F	; 95
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	80 81       	ld	r24, Z
    171e:	80 68       	ori	r24, 0x80	; 128
    1720:	8c 93       	st	X, r24
}
    1722:	cf 91       	pop	r28
    1724:	df 91       	pop	r29
    1726:	08 95       	ret

00001728 <MGI_voidDisable>:
void MGI_voidDisable(void)
{
    1728:	df 93       	push	r29
    172a:	cf 93       	push	r28
    172c:	cd b7       	in	r28, 0x3d	; 61
    172e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,GLOBAL_INTERRUPT_ENABLE_BIT);
    1730:	af e5       	ldi	r26, 0x5F	; 95
    1732:	b0 e0       	ldi	r27, 0x00	; 0
    1734:	ef e5       	ldi	r30, 0x5F	; 95
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	80 81       	ld	r24, Z
    173a:	8f 77       	andi	r24, 0x7F	; 127
    173c:	8c 93       	st	X, r24
}
    173e:	cf 91       	pop	r28
    1740:	df 91       	pop	r29
    1742:	08 95       	ret

00001744 <HSERVO_voidCCW>:
#include"../include/HAL/SERVO/SERVO_configuration.h"

#include <util/delay.h>
#define F_CPU 8000000UL
void HSERVO_voidCCW(u8 A_u8ServoNum)
{
    1744:	df 93       	push	r29
    1746:	cf 93       	push	r28
    1748:	cd b7       	in	r28, 0x3d	; 61
    174a:	de b7       	in	r29, 0x3e	; 62
    174c:	63 97       	sbiw	r28, 0x13	; 19
    174e:	0f b6       	in	r0, 0x3f	; 63
    1750:	f8 94       	cli
    1752:	de bf       	out	0x3e, r29	; 62
    1754:	0f be       	out	0x3f, r0	; 63
    1756:	cd bf       	out	0x3d, r28	; 61
    1758:	89 8b       	std	Y+17, r24	; 0x11
	u16 local_u16Position;
	switch (A_u8ServoNum)
    175a:	89 89       	ldd	r24, Y+17	; 0x11
    175c:	28 2f       	mov	r18, r24
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	3b 8b       	std	Y+19, r19	; 0x13
    1762:	2a 8b       	std	Y+18, r18	; 0x12
    1764:	8a 89       	ldd	r24, Y+18	; 0x12
    1766:	9b 89       	ldd	r25, Y+19	; 0x13
    1768:	00 97       	sbiw	r24, 0x00	; 0
    176a:	31 f0       	breq	.+12     	; 0x1778 <HSERVO_voidCCW+0x34>
    176c:	2a 89       	ldd	r18, Y+18	; 0x12
    176e:	3b 89       	ldd	r19, Y+19	; 0x13
    1770:	21 30       	cpi	r18, 0x01	; 1
    1772:	31 05       	cpc	r19, r1
    1774:	b1 f0       	breq	.+44     	; 0x17a2 <HSERVO_voidCCW+0x5e>
    1776:	9c c0       	rjmp	.+312    	; 0x18b0 <HSERVO_voidCCW+0x16c>
	{
		case OCR1A_PIN:	for(local_u16Position=START_ANGLE_1A ;local_u16Position<=END_ANGLE_1A;local_u16Position++)
    1778:	8c eb       	ldi	r24, 0xBC	; 188
    177a:	92 e0       	ldi	r25, 0x02	; 2
    177c:	98 8b       	std	Y+16, r25	; 0x10
    177e:	8f 87       	std	Y+15, r24	; 0x0f
    1780:	09 c0       	rjmp	.+18     	; 0x1794 <HSERVO_voidCCW+0x50>
				{
					MTIMER1_voidSetOCR1AValue(local_u16Position);
    1782:	8f 85       	ldd	r24, Y+15	; 0x0f
    1784:	98 89       	ldd	r25, Y+16	; 0x10
    1786:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <MTIMER1_voidSetOCR1AValue>
void HSERVO_voidCCW(u8 A_u8ServoNum)
{
	u16 local_u16Position;
	switch (A_u8ServoNum)
	{
		case OCR1A_PIN:	for(local_u16Position=START_ANGLE_1A ;local_u16Position<=END_ANGLE_1A;local_u16Position++)
    178a:	8f 85       	ldd	r24, Y+15	; 0x0f
    178c:	98 89       	ldd	r25, Y+16	; 0x10
    178e:	01 96       	adiw	r24, 0x01	; 1
    1790:	98 8b       	std	Y+16, r25	; 0x10
    1792:	8f 87       	std	Y+15, r24	; 0x0f
    1794:	8f 85       	ldd	r24, Y+15	; 0x0f
    1796:	98 89       	ldd	r25, Y+16	; 0x10
    1798:	3a e0       	ldi	r19, 0x0A	; 10
    179a:	8d 38       	cpi	r24, 0x8D	; 141
    179c:	93 07       	cpc	r25, r19
    179e:	88 f3       	brcs	.-30     	; 0x1782 <HSERVO_voidCCW+0x3e>
    17a0:	87 c0       	rjmp	.+270    	; 0x18b0 <HSERVO_voidCCW+0x16c>
				{
					MTIMER1_voidSetOCR1AValue(local_u16Position);
				}
				break;
		case OCR1B_PIN:	for(local_u16Position=START_ANGLE_1B ;local_u16Position<=END_ANGLE_1B;local_u16Position++)
    17a2:	80 eb       	ldi	r24, 0xB0	; 176
    17a4:	94 e0       	ldi	r25, 0x04	; 4
    17a6:	98 8b       	std	Y+16, r25	; 0x10
    17a8:	8f 87       	std	Y+15, r24	; 0x0f
    17aa:	7b c0       	rjmp	.+246    	; 0x18a2 <HSERVO_voidCCW+0x15e>
				{
					MTIMER1_voidSetOCR1BValue(local_u16Position);
    17ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    17ae:	98 89       	ldd	r25, Y+16	; 0x10
    17b0:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <MTIMER1_voidSetOCR1BValue>
    17b4:	80 e0       	ldi	r24, 0x00	; 0
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	a0 e0       	ldi	r26, 0x00	; 0
    17ba:	b0 e4       	ldi	r27, 0x40	; 64
    17bc:	8b 87       	std	Y+11, r24	; 0x0b
    17be:	9c 87       	std	Y+12, r25	; 0x0c
    17c0:	ad 87       	std	Y+13, r26	; 0x0d
    17c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    17c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    17c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    17ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    17cc:	20 e0       	ldi	r18, 0x00	; 0
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	4a ef       	ldi	r20, 0xFA	; 250
    17d2:	54 e4       	ldi	r21, 0x44	; 68
    17d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17d8:	dc 01       	movw	r26, r24
    17da:	cb 01       	movw	r24, r22
    17dc:	8f 83       	std	Y+7, r24	; 0x07
    17de:	98 87       	std	Y+8, r25	; 0x08
    17e0:	a9 87       	std	Y+9, r26	; 0x09
    17e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17e4:	6f 81       	ldd	r22, Y+7	; 0x07
    17e6:	78 85       	ldd	r23, Y+8	; 0x08
    17e8:	89 85       	ldd	r24, Y+9	; 0x09
    17ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    17ec:	20 e0       	ldi	r18, 0x00	; 0
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	40 e8       	ldi	r20, 0x80	; 128
    17f2:	5f e3       	ldi	r21, 0x3F	; 63
    17f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17f8:	88 23       	and	r24, r24
    17fa:	2c f4       	brge	.+10     	; 0x1806 <HSERVO_voidCCW+0xc2>
		__ticks = 1;
    17fc:	81 e0       	ldi	r24, 0x01	; 1
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	9e 83       	std	Y+6, r25	; 0x06
    1802:	8d 83       	std	Y+5, r24	; 0x05
    1804:	3f c0       	rjmp	.+126    	; 0x1884 <HSERVO_voidCCW+0x140>
	else if (__tmp > 65535)
    1806:	6f 81       	ldd	r22, Y+7	; 0x07
    1808:	78 85       	ldd	r23, Y+8	; 0x08
    180a:	89 85       	ldd	r24, Y+9	; 0x09
    180c:	9a 85       	ldd	r25, Y+10	; 0x0a
    180e:	20 e0       	ldi	r18, 0x00	; 0
    1810:	3f ef       	ldi	r19, 0xFF	; 255
    1812:	4f e7       	ldi	r20, 0x7F	; 127
    1814:	57 e4       	ldi	r21, 0x47	; 71
    1816:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    181a:	18 16       	cp	r1, r24
    181c:	4c f5       	brge	.+82     	; 0x1870 <HSERVO_voidCCW+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    181e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1820:	7c 85       	ldd	r23, Y+12	; 0x0c
    1822:	8d 85       	ldd	r24, Y+13	; 0x0d
    1824:	9e 85       	ldd	r25, Y+14	; 0x0e
    1826:	20 e0       	ldi	r18, 0x00	; 0
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	40 e2       	ldi	r20, 0x20	; 32
    182c:	51 e4       	ldi	r21, 0x41	; 65
    182e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1832:	dc 01       	movw	r26, r24
    1834:	cb 01       	movw	r24, r22
    1836:	bc 01       	movw	r22, r24
    1838:	cd 01       	movw	r24, r26
    183a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    183e:	dc 01       	movw	r26, r24
    1840:	cb 01       	movw	r24, r22
    1842:	9e 83       	std	Y+6, r25	; 0x06
    1844:	8d 83       	std	Y+5, r24	; 0x05
    1846:	0f c0       	rjmp	.+30     	; 0x1866 <HSERVO_voidCCW+0x122>
    1848:	88 ec       	ldi	r24, 0xC8	; 200
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	9c 83       	std	Y+4, r25	; 0x04
    184e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1850:	8b 81       	ldd	r24, Y+3	; 0x03
    1852:	9c 81       	ldd	r25, Y+4	; 0x04
    1854:	01 97       	sbiw	r24, 0x01	; 1
    1856:	f1 f7       	brne	.-4      	; 0x1854 <HSERVO_voidCCW+0x110>
    1858:	9c 83       	std	Y+4, r25	; 0x04
    185a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    185c:	8d 81       	ldd	r24, Y+5	; 0x05
    185e:	9e 81       	ldd	r25, Y+6	; 0x06
    1860:	01 97       	sbiw	r24, 0x01	; 1
    1862:	9e 83       	std	Y+6, r25	; 0x06
    1864:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1866:	8d 81       	ldd	r24, Y+5	; 0x05
    1868:	9e 81       	ldd	r25, Y+6	; 0x06
    186a:	00 97       	sbiw	r24, 0x00	; 0
    186c:	69 f7       	brne	.-38     	; 0x1848 <HSERVO_voidCCW+0x104>
    186e:	14 c0       	rjmp	.+40     	; 0x1898 <HSERVO_voidCCW+0x154>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1870:	6f 81       	ldd	r22, Y+7	; 0x07
    1872:	78 85       	ldd	r23, Y+8	; 0x08
    1874:	89 85       	ldd	r24, Y+9	; 0x09
    1876:	9a 85       	ldd	r25, Y+10	; 0x0a
    1878:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    187c:	dc 01       	movw	r26, r24
    187e:	cb 01       	movw	r24, r22
    1880:	9e 83       	std	Y+6, r25	; 0x06
    1882:	8d 83       	std	Y+5, r24	; 0x05
    1884:	8d 81       	ldd	r24, Y+5	; 0x05
    1886:	9e 81       	ldd	r25, Y+6	; 0x06
    1888:	9a 83       	std	Y+2, r25	; 0x02
    188a:	89 83       	std	Y+1, r24	; 0x01
    188c:	89 81       	ldd	r24, Y+1	; 0x01
    188e:	9a 81       	ldd	r25, Y+2	; 0x02
    1890:	01 97       	sbiw	r24, 0x01	; 1
    1892:	f1 f7       	brne	.-4      	; 0x1890 <HSERVO_voidCCW+0x14c>
    1894:	9a 83       	std	Y+2, r25	; 0x02
    1896:	89 83       	std	Y+1, r24	; 0x01
		case OCR1A_PIN:	for(local_u16Position=START_ANGLE_1A ;local_u16Position<=END_ANGLE_1A;local_u16Position++)
				{
					MTIMER1_voidSetOCR1AValue(local_u16Position);
				}
				break;
		case OCR1B_PIN:	for(local_u16Position=START_ANGLE_1B ;local_u16Position<=END_ANGLE_1B;local_u16Position++)
    1898:	8f 85       	ldd	r24, Y+15	; 0x0f
    189a:	98 89       	ldd	r25, Y+16	; 0x10
    189c:	01 96       	adiw	r24, 0x01	; 1
    189e:	98 8b       	std	Y+16, r25	; 0x10
    18a0:	8f 87       	std	Y+15, r24	; 0x0f
    18a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    18a4:	98 89       	ldd	r25, Y+16	; 0x10
    18a6:	28 e0       	ldi	r18, 0x08	; 8
    18a8:	89 39       	cpi	r24, 0x99	; 153
    18aa:	92 07       	cpc	r25, r18
    18ac:	08 f4       	brcc	.+2      	; 0x18b0 <HSERVO_voidCCW+0x16c>
    18ae:	7e cf       	rjmp	.-260    	; 0x17ac <HSERVO_voidCCW+0x68>
				}
				break;
		default:
				break;
	}
}
    18b0:	63 96       	adiw	r28, 0x13	; 19
    18b2:	0f b6       	in	r0, 0x3f	; 63
    18b4:	f8 94       	cli
    18b6:	de bf       	out	0x3e, r29	; 62
    18b8:	0f be       	out	0x3f, r0	; 63
    18ba:	cd bf       	out	0x3d, r28	; 61
    18bc:	cf 91       	pop	r28
    18be:	df 91       	pop	r29
    18c0:	08 95       	ret

000018c2 <HSERVO_voidCW>:


void HSERVO_voidCW(u8 A_u8ServoNum)
{
    18c2:	df 93       	push	r29
    18c4:	cf 93       	push	r28
    18c6:	cd b7       	in	r28, 0x3d	; 61
    18c8:	de b7       	in	r29, 0x3e	; 62
    18ca:	63 97       	sbiw	r28, 0x13	; 19
    18cc:	0f b6       	in	r0, 0x3f	; 63
    18ce:	f8 94       	cli
    18d0:	de bf       	out	0x3e, r29	; 62
    18d2:	0f be       	out	0x3f, r0	; 63
    18d4:	cd bf       	out	0x3d, r28	; 61
    18d6:	89 8b       	std	Y+17, r24	; 0x11
	u16 local_u16Position;
	switch (A_u8ServoNum)
    18d8:	89 89       	ldd	r24, Y+17	; 0x11
    18da:	28 2f       	mov	r18, r24
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	3b 8b       	std	Y+19, r19	; 0x13
    18e0:	2a 8b       	std	Y+18, r18	; 0x12
    18e2:	8a 89       	ldd	r24, Y+18	; 0x12
    18e4:	9b 89       	ldd	r25, Y+19	; 0x13
    18e6:	00 97       	sbiw	r24, 0x00	; 0
    18e8:	31 f0       	breq	.+12     	; 0x18f6 <HSERVO_voidCW+0x34>
    18ea:	2a 89       	ldd	r18, Y+18	; 0x12
    18ec:	3b 89       	ldd	r19, Y+19	; 0x13
    18ee:	21 30       	cpi	r18, 0x01	; 1
    18f0:	31 05       	cpc	r19, r1
    18f2:	b1 f0       	breq	.+44     	; 0x1920 <HSERVO_voidCW+0x5e>
    18f4:	9c c0       	rjmp	.+312    	; 0x1a2e <HSERVO_voidCW+0x16c>
	{
		case OCR1A_PIN:	for(local_u16Position=END_ANGLE_1A;local_u16Position>=START_ANGLE_1A ;local_u16Position--)
    18f6:	8c e8       	ldi	r24, 0x8C	; 140
    18f8:	9a e0       	ldi	r25, 0x0A	; 10
    18fa:	98 8b       	std	Y+16, r25	; 0x10
    18fc:	8f 87       	std	Y+15, r24	; 0x0f
    18fe:	09 c0       	rjmp	.+18     	; 0x1912 <HSERVO_voidCW+0x50>
				{
					MTIMER1_voidSetOCR1AValue(local_u16Position);
    1900:	8f 85       	ldd	r24, Y+15	; 0x0f
    1902:	98 89       	ldd	r25, Y+16	; 0x10
    1904:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <MTIMER1_voidSetOCR1AValue>
void HSERVO_voidCW(u8 A_u8ServoNum)
{
	u16 local_u16Position;
	switch (A_u8ServoNum)
	{
		case OCR1A_PIN:	for(local_u16Position=END_ANGLE_1A;local_u16Position>=START_ANGLE_1A ;local_u16Position--)
    1908:	8f 85       	ldd	r24, Y+15	; 0x0f
    190a:	98 89       	ldd	r25, Y+16	; 0x10
    190c:	01 97       	sbiw	r24, 0x01	; 1
    190e:	98 8b       	std	Y+16, r25	; 0x10
    1910:	8f 87       	std	Y+15, r24	; 0x0f
    1912:	8f 85       	ldd	r24, Y+15	; 0x0f
    1914:	98 89       	ldd	r25, Y+16	; 0x10
    1916:	32 e0       	ldi	r19, 0x02	; 2
    1918:	8c 3b       	cpi	r24, 0xBC	; 188
    191a:	93 07       	cpc	r25, r19
    191c:	88 f7       	brcc	.-30     	; 0x1900 <HSERVO_voidCW+0x3e>
    191e:	87 c0       	rjmp	.+270    	; 0x1a2e <HSERVO_voidCW+0x16c>
				{
					MTIMER1_voidSetOCR1AValue(local_u16Position);
				}
				break;
		case OCR1B_PIN:	for(local_u16Position=END_ANGLE_1B;local_u16Position>=START_ANGLE_1B ;local_u16Position--)
    1920:	88 e9       	ldi	r24, 0x98	; 152
    1922:	98 e0       	ldi	r25, 0x08	; 8
    1924:	98 8b       	std	Y+16, r25	; 0x10
    1926:	8f 87       	std	Y+15, r24	; 0x0f
    1928:	7b c0       	rjmp	.+246    	; 0x1a20 <HSERVO_voidCW+0x15e>
				{
					MTIMER1_voidSetOCR1BValue(local_u16Position);
    192a:	8f 85       	ldd	r24, Y+15	; 0x0f
    192c:	98 89       	ldd	r25, Y+16	; 0x10
    192e:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <MTIMER1_voidSetOCR1BValue>
    1932:	80 e0       	ldi	r24, 0x00	; 0
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	a0 e0       	ldi	r26, 0x00	; 0
    1938:	b0 e4       	ldi	r27, 0x40	; 64
    193a:	8b 87       	std	Y+11, r24	; 0x0b
    193c:	9c 87       	std	Y+12, r25	; 0x0c
    193e:	ad 87       	std	Y+13, r26	; 0x0d
    1940:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1942:	6b 85       	ldd	r22, Y+11	; 0x0b
    1944:	7c 85       	ldd	r23, Y+12	; 0x0c
    1946:	8d 85       	ldd	r24, Y+13	; 0x0d
    1948:	9e 85       	ldd	r25, Y+14	; 0x0e
    194a:	20 e0       	ldi	r18, 0x00	; 0
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	4a ef       	ldi	r20, 0xFA	; 250
    1950:	54 e4       	ldi	r21, 0x44	; 68
    1952:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1956:	dc 01       	movw	r26, r24
    1958:	cb 01       	movw	r24, r22
    195a:	8f 83       	std	Y+7, r24	; 0x07
    195c:	98 87       	std	Y+8, r25	; 0x08
    195e:	a9 87       	std	Y+9, r26	; 0x09
    1960:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1962:	6f 81       	ldd	r22, Y+7	; 0x07
    1964:	78 85       	ldd	r23, Y+8	; 0x08
    1966:	89 85       	ldd	r24, Y+9	; 0x09
    1968:	9a 85       	ldd	r25, Y+10	; 0x0a
    196a:	20 e0       	ldi	r18, 0x00	; 0
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	40 e8       	ldi	r20, 0x80	; 128
    1970:	5f e3       	ldi	r21, 0x3F	; 63
    1972:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1976:	88 23       	and	r24, r24
    1978:	2c f4       	brge	.+10     	; 0x1984 <HSERVO_voidCW+0xc2>
		__ticks = 1;
    197a:	81 e0       	ldi	r24, 0x01	; 1
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	9e 83       	std	Y+6, r25	; 0x06
    1980:	8d 83       	std	Y+5, r24	; 0x05
    1982:	3f c0       	rjmp	.+126    	; 0x1a02 <HSERVO_voidCW+0x140>
	else if (__tmp > 65535)
    1984:	6f 81       	ldd	r22, Y+7	; 0x07
    1986:	78 85       	ldd	r23, Y+8	; 0x08
    1988:	89 85       	ldd	r24, Y+9	; 0x09
    198a:	9a 85       	ldd	r25, Y+10	; 0x0a
    198c:	20 e0       	ldi	r18, 0x00	; 0
    198e:	3f ef       	ldi	r19, 0xFF	; 255
    1990:	4f e7       	ldi	r20, 0x7F	; 127
    1992:	57 e4       	ldi	r21, 0x47	; 71
    1994:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1998:	18 16       	cp	r1, r24
    199a:	4c f5       	brge	.+82     	; 0x19ee <HSERVO_voidCW+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    199c:	6b 85       	ldd	r22, Y+11	; 0x0b
    199e:	7c 85       	ldd	r23, Y+12	; 0x0c
    19a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    19a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    19a4:	20 e0       	ldi	r18, 0x00	; 0
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	40 e2       	ldi	r20, 0x20	; 32
    19aa:	51 e4       	ldi	r21, 0x41	; 65
    19ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19b0:	dc 01       	movw	r26, r24
    19b2:	cb 01       	movw	r24, r22
    19b4:	bc 01       	movw	r22, r24
    19b6:	cd 01       	movw	r24, r26
    19b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19bc:	dc 01       	movw	r26, r24
    19be:	cb 01       	movw	r24, r22
    19c0:	9e 83       	std	Y+6, r25	; 0x06
    19c2:	8d 83       	std	Y+5, r24	; 0x05
    19c4:	0f c0       	rjmp	.+30     	; 0x19e4 <HSERVO_voidCW+0x122>
    19c6:	88 ec       	ldi	r24, 0xC8	; 200
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	9c 83       	std	Y+4, r25	; 0x04
    19cc:	8b 83       	std	Y+3, r24	; 0x03
    19ce:	8b 81       	ldd	r24, Y+3	; 0x03
    19d0:	9c 81       	ldd	r25, Y+4	; 0x04
    19d2:	01 97       	sbiw	r24, 0x01	; 1
    19d4:	f1 f7       	brne	.-4      	; 0x19d2 <HSERVO_voidCW+0x110>
    19d6:	9c 83       	std	Y+4, r25	; 0x04
    19d8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19da:	8d 81       	ldd	r24, Y+5	; 0x05
    19dc:	9e 81       	ldd	r25, Y+6	; 0x06
    19de:	01 97       	sbiw	r24, 0x01	; 1
    19e0:	9e 83       	std	Y+6, r25	; 0x06
    19e2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19e4:	8d 81       	ldd	r24, Y+5	; 0x05
    19e6:	9e 81       	ldd	r25, Y+6	; 0x06
    19e8:	00 97       	sbiw	r24, 0x00	; 0
    19ea:	69 f7       	brne	.-38     	; 0x19c6 <HSERVO_voidCW+0x104>
    19ec:	14 c0       	rjmp	.+40     	; 0x1a16 <HSERVO_voidCW+0x154>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19ee:	6f 81       	ldd	r22, Y+7	; 0x07
    19f0:	78 85       	ldd	r23, Y+8	; 0x08
    19f2:	89 85       	ldd	r24, Y+9	; 0x09
    19f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    19f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19fa:	dc 01       	movw	r26, r24
    19fc:	cb 01       	movw	r24, r22
    19fe:	9e 83       	std	Y+6, r25	; 0x06
    1a00:	8d 83       	std	Y+5, r24	; 0x05
    1a02:	8d 81       	ldd	r24, Y+5	; 0x05
    1a04:	9e 81       	ldd	r25, Y+6	; 0x06
    1a06:	9a 83       	std	Y+2, r25	; 0x02
    1a08:	89 83       	std	Y+1, r24	; 0x01
    1a0a:	89 81       	ldd	r24, Y+1	; 0x01
    1a0c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a0e:	01 97       	sbiw	r24, 0x01	; 1
    1a10:	f1 f7       	brne	.-4      	; 0x1a0e <HSERVO_voidCW+0x14c>
    1a12:	9a 83       	std	Y+2, r25	; 0x02
    1a14:	89 83       	std	Y+1, r24	; 0x01
		case OCR1A_PIN:	for(local_u16Position=END_ANGLE_1A;local_u16Position>=START_ANGLE_1A ;local_u16Position--)
				{
					MTIMER1_voidSetOCR1AValue(local_u16Position);
				}
				break;
		case OCR1B_PIN:	for(local_u16Position=END_ANGLE_1B;local_u16Position>=START_ANGLE_1B ;local_u16Position--)
    1a16:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a18:	98 89       	ldd	r25, Y+16	; 0x10
    1a1a:	01 97       	sbiw	r24, 0x01	; 1
    1a1c:	98 8b       	std	Y+16, r25	; 0x10
    1a1e:	8f 87       	std	Y+15, r24	; 0x0f
    1a20:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a22:	98 89       	ldd	r25, Y+16	; 0x10
    1a24:	24 e0       	ldi	r18, 0x04	; 4
    1a26:	80 3b       	cpi	r24, 0xB0	; 176
    1a28:	92 07       	cpc	r25, r18
    1a2a:	08 f0       	brcs	.+2      	; 0x1a2e <HSERVO_voidCW+0x16c>
    1a2c:	7e cf       	rjmp	.-260    	; 0x192a <HSERVO_voidCW+0x68>
				break;
		default:
				break;
		}

}
    1a2e:	63 96       	adiw	r28, 0x13	; 19
    1a30:	0f b6       	in	r0, 0x3f	; 63
    1a32:	f8 94       	cli
    1a34:	de bf       	out	0x3e, r29	; 62
    1a36:	0f be       	out	0x3f, r0	; 63
    1a38:	cd bf       	out	0x3d, r28	; 61
    1a3a:	cf 91       	pop	r28
    1a3c:	df 91       	pop	r29
    1a3e:	08 95       	ret

00001a40 <HSERVO_voidSetServo90>:

void HSERVO_voidSetServo90(u8 A_u8ServoNum)
{
    1a40:	df 93       	push	r29
    1a42:	cf 93       	push	r28
    1a44:	cd b7       	in	r28, 0x3d	; 61
    1a46:	de b7       	in	r29, 0x3e	; 62
    1a48:	6f 97       	sbiw	r28, 0x1f	; 31
    1a4a:	0f b6       	in	r0, 0x3f	; 63
    1a4c:	f8 94       	cli
    1a4e:	de bf       	out	0x3e, r29	; 62
    1a50:	0f be       	out	0x3f, r0	; 63
    1a52:	cd bf       	out	0x3d, r28	; 61
    1a54:	8d 8f       	std	Y+29, r24	; 0x1d

	switch (A_u8ServoNum)
    1a56:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a58:	28 2f       	mov	r18, r24
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	3f 8f       	std	Y+31, r19	; 0x1f
    1a5e:	2e 8f       	std	Y+30, r18	; 0x1e
    1a60:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a62:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1a64:	00 97       	sbiw	r24, 0x00	; 0
    1a66:	39 f0       	breq	.+14     	; 0x1a76 <HSERVO_voidSetServo90+0x36>
    1a68:	2e 8d       	ldd	r18, Y+30	; 0x1e
    1a6a:	3f 8d       	ldd	r19, Y+31	; 0x1f
    1a6c:	21 30       	cpi	r18, 0x01	; 1
    1a6e:	31 05       	cpc	r19, r1
    1a70:	09 f4       	brne	.+2      	; 0x1a74 <HSERVO_voidSetServo90+0x34>
    1a72:	78 c0       	rjmp	.+240    	; 0x1b64 <HSERVO_voidSetServo90+0x124>
    1a74:	ed c0       	rjmp	.+474    	; 0x1c50 <HSERVO_voidSetServo90+0x210>
	{
		case OCR1A_PIN: MTIMER1_voidSetOCR1AValue(1700);_delay_ms(15);
    1a76:	84 ea       	ldi	r24, 0xA4	; 164
    1a78:	96 e0       	ldi	r25, 0x06	; 6
    1a7a:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <MTIMER1_voidSetOCR1AValue>
    1a7e:	80 e0       	ldi	r24, 0x00	; 0
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	a0 e7       	ldi	r26, 0x70	; 112
    1a84:	b1 e4       	ldi	r27, 0x41	; 65
    1a86:	89 8f       	std	Y+25, r24	; 0x19
    1a88:	9a 8f       	std	Y+26, r25	; 0x1a
    1a8a:	ab 8f       	std	Y+27, r26	; 0x1b
    1a8c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a8e:	69 8d       	ldd	r22, Y+25	; 0x19
    1a90:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a92:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a94:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a96:	20 e0       	ldi	r18, 0x00	; 0
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	4a ef       	ldi	r20, 0xFA	; 250
    1a9c:	54 e4       	ldi	r21, 0x44	; 68
    1a9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aa2:	dc 01       	movw	r26, r24
    1aa4:	cb 01       	movw	r24, r22
    1aa6:	8d 8b       	std	Y+21, r24	; 0x15
    1aa8:	9e 8b       	std	Y+22, r25	; 0x16
    1aaa:	af 8b       	std	Y+23, r26	; 0x17
    1aac:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1aae:	6d 89       	ldd	r22, Y+21	; 0x15
    1ab0:	7e 89       	ldd	r23, Y+22	; 0x16
    1ab2:	8f 89       	ldd	r24, Y+23	; 0x17
    1ab4:	98 8d       	ldd	r25, Y+24	; 0x18
    1ab6:	20 e0       	ldi	r18, 0x00	; 0
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	40 e8       	ldi	r20, 0x80	; 128
    1abc:	5f e3       	ldi	r21, 0x3F	; 63
    1abe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ac2:	88 23       	and	r24, r24
    1ac4:	2c f4       	brge	.+10     	; 0x1ad0 <HSERVO_voidSetServo90+0x90>
		__ticks = 1;
    1ac6:	81 e0       	ldi	r24, 0x01	; 1
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	9c 8b       	std	Y+20, r25	; 0x14
    1acc:	8b 8b       	std	Y+19, r24	; 0x13
    1ace:	3f c0       	rjmp	.+126    	; 0x1b4e <HSERVO_voidSetServo90+0x10e>
	else if (__tmp > 65535)
    1ad0:	6d 89       	ldd	r22, Y+21	; 0x15
    1ad2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ad4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ad6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ad8:	20 e0       	ldi	r18, 0x00	; 0
    1ada:	3f ef       	ldi	r19, 0xFF	; 255
    1adc:	4f e7       	ldi	r20, 0x7F	; 127
    1ade:	57 e4       	ldi	r21, 0x47	; 71
    1ae0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ae4:	18 16       	cp	r1, r24
    1ae6:	4c f5       	brge	.+82     	; 0x1b3a <HSERVO_voidSetServo90+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ae8:	69 8d       	ldd	r22, Y+25	; 0x19
    1aea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1aec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1aee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1af0:	20 e0       	ldi	r18, 0x00	; 0
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	40 e2       	ldi	r20, 0x20	; 32
    1af6:	51 e4       	ldi	r21, 0x41	; 65
    1af8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1afc:	dc 01       	movw	r26, r24
    1afe:	cb 01       	movw	r24, r22
    1b00:	bc 01       	movw	r22, r24
    1b02:	cd 01       	movw	r24, r26
    1b04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b08:	dc 01       	movw	r26, r24
    1b0a:	cb 01       	movw	r24, r22
    1b0c:	9c 8b       	std	Y+20, r25	; 0x14
    1b0e:	8b 8b       	std	Y+19, r24	; 0x13
    1b10:	0f c0       	rjmp	.+30     	; 0x1b30 <HSERVO_voidSetServo90+0xf0>
    1b12:	88 ec       	ldi	r24, 0xC8	; 200
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	9a 8b       	std	Y+18, r25	; 0x12
    1b18:	89 8b       	std	Y+17, r24	; 0x11
    1b1a:	89 89       	ldd	r24, Y+17	; 0x11
    1b1c:	9a 89       	ldd	r25, Y+18	; 0x12
    1b1e:	01 97       	sbiw	r24, 0x01	; 1
    1b20:	f1 f7       	brne	.-4      	; 0x1b1e <HSERVO_voidSetServo90+0xde>
    1b22:	9a 8b       	std	Y+18, r25	; 0x12
    1b24:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b26:	8b 89       	ldd	r24, Y+19	; 0x13
    1b28:	9c 89       	ldd	r25, Y+20	; 0x14
    1b2a:	01 97       	sbiw	r24, 0x01	; 1
    1b2c:	9c 8b       	std	Y+20, r25	; 0x14
    1b2e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b30:	8b 89       	ldd	r24, Y+19	; 0x13
    1b32:	9c 89       	ldd	r25, Y+20	; 0x14
    1b34:	00 97       	sbiw	r24, 0x00	; 0
    1b36:	69 f7       	brne	.-38     	; 0x1b12 <HSERVO_voidSetServo90+0xd2>
    1b38:	8b c0       	rjmp	.+278    	; 0x1c50 <HSERVO_voidSetServo90+0x210>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b3a:	6d 89       	ldd	r22, Y+21	; 0x15
    1b3c:	7e 89       	ldd	r23, Y+22	; 0x16
    1b3e:	8f 89       	ldd	r24, Y+23	; 0x17
    1b40:	98 8d       	ldd	r25, Y+24	; 0x18
    1b42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b46:	dc 01       	movw	r26, r24
    1b48:	cb 01       	movw	r24, r22
    1b4a:	9c 8b       	std	Y+20, r25	; 0x14
    1b4c:	8b 8b       	std	Y+19, r24	; 0x13
    1b4e:	8b 89       	ldd	r24, Y+19	; 0x13
    1b50:	9c 89       	ldd	r25, Y+20	; 0x14
    1b52:	98 8b       	std	Y+16, r25	; 0x10
    1b54:	8f 87       	std	Y+15, r24	; 0x0f
    1b56:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b58:	98 89       	ldd	r25, Y+16	; 0x10
    1b5a:	01 97       	sbiw	r24, 0x01	; 1
    1b5c:	f1 f7       	brne	.-4      	; 0x1b5a <HSERVO_voidSetServo90+0x11a>
    1b5e:	98 8b       	std	Y+16, r25	; 0x10
    1b60:	8f 87       	std	Y+15, r24	; 0x0f
    1b62:	76 c0       	rjmp	.+236    	; 0x1c50 <HSERVO_voidSetServo90+0x210>
				break;
		case OCR1B_PIN: MTIMER1_voidSetOCR1BValue(1700);_delay_ms(10);
    1b64:	84 ea       	ldi	r24, 0xA4	; 164
    1b66:	96 e0       	ldi	r25, 0x06	; 6
    1b68:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <MTIMER1_voidSetOCR1BValue>
    1b6c:	80 e0       	ldi	r24, 0x00	; 0
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	a0 e2       	ldi	r26, 0x20	; 32
    1b72:	b1 e4       	ldi	r27, 0x41	; 65
    1b74:	8b 87       	std	Y+11, r24	; 0x0b
    1b76:	9c 87       	std	Y+12, r25	; 0x0c
    1b78:	ad 87       	std	Y+13, r26	; 0x0d
    1b7a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b7c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b7e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b80:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b82:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b84:	20 e0       	ldi	r18, 0x00	; 0
    1b86:	30 e0       	ldi	r19, 0x00	; 0
    1b88:	4a ef       	ldi	r20, 0xFA	; 250
    1b8a:	54 e4       	ldi	r21, 0x44	; 68
    1b8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b90:	dc 01       	movw	r26, r24
    1b92:	cb 01       	movw	r24, r22
    1b94:	8f 83       	std	Y+7, r24	; 0x07
    1b96:	98 87       	std	Y+8, r25	; 0x08
    1b98:	a9 87       	std	Y+9, r26	; 0x09
    1b9a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b9c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b9e:	78 85       	ldd	r23, Y+8	; 0x08
    1ba0:	89 85       	ldd	r24, Y+9	; 0x09
    1ba2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ba4:	20 e0       	ldi	r18, 0x00	; 0
    1ba6:	30 e0       	ldi	r19, 0x00	; 0
    1ba8:	40 e8       	ldi	r20, 0x80	; 128
    1baa:	5f e3       	ldi	r21, 0x3F	; 63
    1bac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bb0:	88 23       	and	r24, r24
    1bb2:	2c f4       	brge	.+10     	; 0x1bbe <HSERVO_voidSetServo90+0x17e>
		__ticks = 1;
    1bb4:	81 e0       	ldi	r24, 0x01	; 1
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	9e 83       	std	Y+6, r25	; 0x06
    1bba:	8d 83       	std	Y+5, r24	; 0x05
    1bbc:	3f c0       	rjmp	.+126    	; 0x1c3c <HSERVO_voidSetServo90+0x1fc>
	else if (__tmp > 65535)
    1bbe:	6f 81       	ldd	r22, Y+7	; 0x07
    1bc0:	78 85       	ldd	r23, Y+8	; 0x08
    1bc2:	89 85       	ldd	r24, Y+9	; 0x09
    1bc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bc6:	20 e0       	ldi	r18, 0x00	; 0
    1bc8:	3f ef       	ldi	r19, 0xFF	; 255
    1bca:	4f e7       	ldi	r20, 0x7F	; 127
    1bcc:	57 e4       	ldi	r21, 0x47	; 71
    1bce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bd2:	18 16       	cp	r1, r24
    1bd4:	4c f5       	brge	.+82     	; 0x1c28 <HSERVO_voidSetServo90+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bd6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bd8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bda:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bdc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bde:	20 e0       	ldi	r18, 0x00	; 0
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	40 e2       	ldi	r20, 0x20	; 32
    1be4:	51 e4       	ldi	r21, 0x41	; 65
    1be6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bea:	dc 01       	movw	r26, r24
    1bec:	cb 01       	movw	r24, r22
    1bee:	bc 01       	movw	r22, r24
    1bf0:	cd 01       	movw	r24, r26
    1bf2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bf6:	dc 01       	movw	r26, r24
    1bf8:	cb 01       	movw	r24, r22
    1bfa:	9e 83       	std	Y+6, r25	; 0x06
    1bfc:	8d 83       	std	Y+5, r24	; 0x05
    1bfe:	0f c0       	rjmp	.+30     	; 0x1c1e <HSERVO_voidSetServo90+0x1de>
    1c00:	88 ec       	ldi	r24, 0xC8	; 200
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	9c 83       	std	Y+4, r25	; 0x04
    1c06:	8b 83       	std	Y+3, r24	; 0x03
    1c08:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c0c:	01 97       	sbiw	r24, 0x01	; 1
    1c0e:	f1 f7       	brne	.-4      	; 0x1c0c <HSERVO_voidSetServo90+0x1cc>
    1c10:	9c 83       	std	Y+4, r25	; 0x04
    1c12:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c14:	8d 81       	ldd	r24, Y+5	; 0x05
    1c16:	9e 81       	ldd	r25, Y+6	; 0x06
    1c18:	01 97       	sbiw	r24, 0x01	; 1
    1c1a:	9e 83       	std	Y+6, r25	; 0x06
    1c1c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c20:	9e 81       	ldd	r25, Y+6	; 0x06
    1c22:	00 97       	sbiw	r24, 0x00	; 0
    1c24:	69 f7       	brne	.-38     	; 0x1c00 <HSERVO_voidSetServo90+0x1c0>
    1c26:	14 c0       	rjmp	.+40     	; 0x1c50 <HSERVO_voidSetServo90+0x210>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c28:	6f 81       	ldd	r22, Y+7	; 0x07
    1c2a:	78 85       	ldd	r23, Y+8	; 0x08
    1c2c:	89 85       	ldd	r24, Y+9	; 0x09
    1c2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c34:	dc 01       	movw	r26, r24
    1c36:	cb 01       	movw	r24, r22
    1c38:	9e 83       	std	Y+6, r25	; 0x06
    1c3a:	8d 83       	std	Y+5, r24	; 0x05
    1c3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c3e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c40:	9a 83       	std	Y+2, r25	; 0x02
    1c42:	89 83       	std	Y+1, r24	; 0x01
    1c44:	89 81       	ldd	r24, Y+1	; 0x01
    1c46:	9a 81       	ldd	r25, Y+2	; 0x02
    1c48:	01 97       	sbiw	r24, 0x01	; 1
    1c4a:	f1 f7       	brne	.-4      	; 0x1c48 <HSERVO_voidSetServo90+0x208>
    1c4c:	9a 83       	std	Y+2, r25	; 0x02
    1c4e:	89 83       	std	Y+1, r24	; 0x01
				break;
		default:
				break;
	}
}
    1c50:	6f 96       	adiw	r28, 0x1f	; 31
    1c52:	0f b6       	in	r0, 0x3f	; 63
    1c54:	f8 94       	cli
    1c56:	de bf       	out	0x3e, r29	; 62
    1c58:	0f be       	out	0x3f, r0	; 63
    1c5a:	cd bf       	out	0x3d, r28	; 61
    1c5c:	cf 91       	pop	r28
    1c5e:	df 91       	pop	r29
    1c60:	08 95       	ret

00001c62 <MTIMER0_voidInit>:

/****************************************************/
/* 						TIMER0						*/
/****************************************************/
void MTIMER0_voidInit(void)
{
    1c62:	df 93       	push	r29
    1c64:	cf 93       	push	r28
    1c66:	cd b7       	in	r28, 0x3d	; 61
    1c68:	de b7       	in	r29, 0x3e	; 62

	#elif TIMER_MODE == PHASE_CORRECT_MODE

	#elif TIMER0_MODE == CTC_MODE
		/* SET WAVE GENERATION MODE TO CTC_MODE */
		CLR_BIT(TCCR0,3);
    1c6a:	a3 e5       	ldi	r26, 0x53	; 83
    1c6c:	b0 e0       	ldi	r27, 0x00	; 0
    1c6e:	e3 e5       	ldi	r30, 0x53	; 83
    1c70:	f0 e0       	ldi	r31, 0x00	; 0
    1c72:	80 81       	ld	r24, Z
    1c74:	87 7f       	andi	r24, 0xF7	; 247
    1c76:	8c 93       	st	X, r24
		SET_BIT(TCCR0,6);
    1c78:	a3 e5       	ldi	r26, 0x53	; 83
    1c7a:	b0 e0       	ldi	r27, 0x00	; 0
    1c7c:	e3 e5       	ldi	r30, 0x53	; 83
    1c7e:	f0 e0       	ldi	r31, 0x00	; 0
    1c80:	80 81       	ld	r24, Z
    1c82:	80 64       	ori	r24, 0x40	; 64
    1c84:	8c 93       	st	X, r24
		/* TURN ON OVER-FLOW INTERRUPT */
		SET_BIT(TIMSK,1);
    1c86:	a9 e5       	ldi	r26, 0x59	; 89
    1c88:	b0 e0       	ldi	r27, 0x00	; 0
    1c8a:	e9 e5       	ldi	r30, 0x59	; 89
    1c8c:	f0 e0       	ldi	r31, 0x00	; 0
    1c8e:	80 81       	ld	r24, Z
    1c90:	82 60       	ori	r24, 0x02	; 2
    1c92:	8c 93       	st	X, r24
		/*SET ON COMPARE MATCH VALUE*/
		OCR0 = OCR0_VALUE;
    1c94:	ec e5       	ldi	r30, 0x5C	; 92
    1c96:	f0 e0       	ldi	r31, 0x00	; 0
    1c98:	83 e6       	ldi	r24, 0x63	; 99
    1c9a:	80 83       	st	Z, r24
		/* SET CLK (PRESCALER) & OC0 PIN ACTION */
		TCCR0 &= 0b11001000;
    1c9c:	a3 e5       	ldi	r26, 0x53	; 83
    1c9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ca0:	e3 e5       	ldi	r30, 0x53	; 83
    1ca2:	f0 e0       	ldi	r31, 0x00	; 0
    1ca4:	80 81       	ld	r24, Z
    1ca6:	88 7c       	andi	r24, 0xC8	; 200
    1ca8:	8c 93       	st	X, r24
		TCCR0 |= CLK_CONFIGURATION | (CTC_OC0_PIN_ACTION << 4);
    1caa:	a3 e5       	ldi	r26, 0x53	; 83
    1cac:	b0 e0       	ldi	r27, 0x00	; 0
    1cae:	e3 e5       	ldi	r30, 0x53	; 83
    1cb0:	f0 e0       	ldi	r31, 0x00	; 0
    1cb2:	80 81       	ld	r24, Z
    1cb4:	82 60       	ori	r24, 0x02	; 2
    1cb6:	8c 93       	st	X, r24
		TCCR0 |= CLK_CONFIGURATION | (FAST_PWM_OC0_PIN_ACTION << 4);

	#else
			#error WRONG TIMER MODE CONFIGURATION
	#endif
}
    1cb8:	cf 91       	pop	r28
    1cba:	df 91       	pop	r29
    1cbc:	08 95       	ret

00001cbe <MTIMER0_voidStopTimer>:
void MTIMER0_voidStopTimer(void)
{
    1cbe:	df 93       	push	r29
    1cc0:	cf 93       	push	r28
    1cc2:	cd b7       	in	r28, 0x3d	; 61
    1cc4:	de b7       	in	r29, 0x3e	; 62
	/* STOP CLK */
	/*PRESCALER CLK*/
	TCCR0 &= 0b11111000;
    1cc6:	a3 e5       	ldi	r26, 0x53	; 83
    1cc8:	b0 e0       	ldi	r27, 0x00	; 0
    1cca:	e3 e5       	ldi	r30, 0x53	; 83
    1ccc:	f0 e0       	ldi	r31, 0x00	; 0
    1cce:	80 81       	ld	r24, Z
    1cd0:	88 7f       	andi	r24, 0xF8	; 248
    1cd2:	8c 93       	st	X, r24
	TCCR0 |= 0b000;
    1cd4:	a3 e5       	ldi	r26, 0x53	; 83
    1cd6:	b0 e0       	ldi	r27, 0x00	; 0
    1cd8:	e3 e5       	ldi	r30, 0x53	; 83
    1cda:	f0 e0       	ldi	r31, 0x00	; 0
    1cdc:	80 81       	ld	r24, Z
    1cde:	8c 93       	st	X, r24
}
    1ce0:	cf 91       	pop	r28
    1ce2:	df 91       	pop	r29
    1ce4:	08 95       	ret

00001ce6 <MTIMER0_voidSetPreloadValue>:

void MTIMER0_voidSetPreloadValue(u8 A_u8PreloadValue)
{
    1ce6:	df 93       	push	r29
    1ce8:	cf 93       	push	r28
    1cea:	0f 92       	push	r0
    1cec:	cd b7       	in	r28, 0x3d	; 61
    1cee:	de b7       	in	r29, 0x3e	; 62
    1cf0:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = A_u8PreloadValue;
    1cf2:	e2 e5       	ldi	r30, 0x52	; 82
    1cf4:	f0 e0       	ldi	r31, 0x00	; 0
    1cf6:	89 81       	ldd	r24, Y+1	; 0x01
    1cf8:	80 83       	st	Z, r24
}
    1cfa:	0f 90       	pop	r0
    1cfc:	cf 91       	pop	r28
    1cfe:	df 91       	pop	r29
    1d00:	08 95       	ret

00001d02 <MTIMER0_voidSetOCR0Value>:
/*SET OCR0 VALUE ON REAL-TIME*/
void MTIMER0_voidSetOCR0Value(u8 A_u8OCR0Value)
{
    1d02:	df 93       	push	r29
    1d04:	cf 93       	push	r28
    1d06:	0f 92       	push	r0
    1d08:	cd b7       	in	r28, 0x3d	; 61
    1d0a:	de b7       	in	r29, 0x3e	; 62
    1d0c:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = A_u8OCR0Value;
    1d0e:	ec e5       	ldi	r30, 0x5C	; 92
    1d10:	f0 e0       	ldi	r31, 0x00	; 0
    1d12:	89 81       	ldd	r24, Y+1	; 0x01
    1d14:	80 83       	st	Z, r24
}
    1d16:	0f 90       	pop	r0
    1d18:	cf 91       	pop	r28
    1d1a:	df 91       	pop	r29
    1d1c:	08 95       	ret

00001d1e <MTIMER0_voidSetCallBackOVF>:

/* INTERRUPT NORMAL MODE */
void (*TIMER0_OVF_CallBack)(void) = NULL;

void MTIMER0_voidSetCallBackOVF(void (*PtrToFunction)(void))
{
    1d1e:	df 93       	push	r29
    1d20:	cf 93       	push	r28
    1d22:	00 d0       	rcall	.+0      	; 0x1d24 <MTIMER0_voidSetCallBackOVF+0x6>
    1d24:	cd b7       	in	r28, 0x3d	; 61
    1d26:	de b7       	in	r29, 0x3e	; 62
    1d28:	9a 83       	std	Y+2, r25	; 0x02
    1d2a:	89 83       	std	Y+1, r24	; 0x01
	if(PtrToFunction != NULL)
    1d2c:	89 81       	ldd	r24, Y+1	; 0x01
    1d2e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d30:	00 97       	sbiw	r24, 0x00	; 0
    1d32:	31 f0       	breq	.+12     	; 0x1d40 <MTIMER0_voidSetCallBackOVF+0x22>
	{
	 TIMER0_OVF_CallBack = PtrToFunction;
    1d34:	89 81       	ldd	r24, Y+1	; 0x01
    1d36:	9a 81       	ldd	r25, Y+2	; 0x02
    1d38:	90 93 6f 00 	sts	0x006F, r25
    1d3c:	80 93 6e 00 	sts	0x006E, r24
	}
}
    1d40:	0f 90       	pop	r0
    1d42:	0f 90       	pop	r0
    1d44:	cf 91       	pop	r28
    1d46:	df 91       	pop	r29
    1d48:	08 95       	ret

00001d4a <__vector_11>:
void __vector_11(void)  __attribute__((signal));
void __vector_11(void)
{
    1d4a:	1f 92       	push	r1
    1d4c:	0f 92       	push	r0
    1d4e:	0f b6       	in	r0, 0x3f	; 63
    1d50:	0f 92       	push	r0
    1d52:	11 24       	eor	r1, r1
    1d54:	2f 93       	push	r18
    1d56:	3f 93       	push	r19
    1d58:	4f 93       	push	r20
    1d5a:	5f 93       	push	r21
    1d5c:	6f 93       	push	r22
    1d5e:	7f 93       	push	r23
    1d60:	8f 93       	push	r24
    1d62:	9f 93       	push	r25
    1d64:	af 93       	push	r26
    1d66:	bf 93       	push	r27
    1d68:	ef 93       	push	r30
    1d6a:	ff 93       	push	r31
    1d6c:	df 93       	push	r29
    1d6e:	cf 93       	push	r28
    1d70:	cd b7       	in	r28, 0x3d	; 61
    1d72:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_OVF_CallBack != NULL)
    1d74:	80 91 6e 00 	lds	r24, 0x006E
    1d78:	90 91 6f 00 	lds	r25, 0x006F
    1d7c:	00 97       	sbiw	r24, 0x00	; 0
    1d7e:	29 f0       	breq	.+10     	; 0x1d8a <__vector_11+0x40>
	{
		TIMER0_OVF_CallBack();
    1d80:	e0 91 6e 00 	lds	r30, 0x006E
    1d84:	f0 91 6f 00 	lds	r31, 0x006F
    1d88:	09 95       	icall
	}
}
    1d8a:	cf 91       	pop	r28
    1d8c:	df 91       	pop	r29
    1d8e:	ff 91       	pop	r31
    1d90:	ef 91       	pop	r30
    1d92:	bf 91       	pop	r27
    1d94:	af 91       	pop	r26
    1d96:	9f 91       	pop	r25
    1d98:	8f 91       	pop	r24
    1d9a:	7f 91       	pop	r23
    1d9c:	6f 91       	pop	r22
    1d9e:	5f 91       	pop	r21
    1da0:	4f 91       	pop	r20
    1da2:	3f 91       	pop	r19
    1da4:	2f 91       	pop	r18
    1da6:	0f 90       	pop	r0
    1da8:	0f be       	out	0x3f, r0	; 63
    1daa:	0f 90       	pop	r0
    1dac:	1f 90       	pop	r1
    1dae:	18 95       	reti

00001db0 <MTIMER0_voidSetCallBackCTC>:

/* INTERRUPT CTC MODE */
void (*TIMER0_CTC_CallBack)(void) = NULL;

void MTIMER0_voidSetCallBackCTC(void (*PtrToFunction)(void))
{
    1db0:	df 93       	push	r29
    1db2:	cf 93       	push	r28
    1db4:	00 d0       	rcall	.+0      	; 0x1db6 <MTIMER0_voidSetCallBackCTC+0x6>
    1db6:	cd b7       	in	r28, 0x3d	; 61
    1db8:	de b7       	in	r29, 0x3e	; 62
    1dba:	9a 83       	std	Y+2, r25	; 0x02
    1dbc:	89 83       	std	Y+1, r24	; 0x01
	if(PtrToFunction != NULL)
    1dbe:	89 81       	ldd	r24, Y+1	; 0x01
    1dc0:	9a 81       	ldd	r25, Y+2	; 0x02
    1dc2:	00 97       	sbiw	r24, 0x00	; 0
    1dc4:	31 f0       	breq	.+12     	; 0x1dd2 <MTIMER0_voidSetCallBackCTC+0x22>
	{
	 TIMER0_CTC_CallBack = PtrToFunction;
    1dc6:	89 81       	ldd	r24, Y+1	; 0x01
    1dc8:	9a 81       	ldd	r25, Y+2	; 0x02
    1dca:	90 93 71 00 	sts	0x0071, r25
    1dce:	80 93 70 00 	sts	0x0070, r24
	}
}
    1dd2:	0f 90       	pop	r0
    1dd4:	0f 90       	pop	r0
    1dd6:	cf 91       	pop	r28
    1dd8:	df 91       	pop	r29
    1dda:	08 95       	ret

00001ddc <__vector_10>:
void __vector_10(void)  __attribute__ ((signal));
void __vector_10(void)
{
    1ddc:	1f 92       	push	r1
    1dde:	0f 92       	push	r0
    1de0:	0f b6       	in	r0, 0x3f	; 63
    1de2:	0f 92       	push	r0
    1de4:	11 24       	eor	r1, r1
    1de6:	2f 93       	push	r18
    1de8:	3f 93       	push	r19
    1dea:	4f 93       	push	r20
    1dec:	5f 93       	push	r21
    1dee:	6f 93       	push	r22
    1df0:	7f 93       	push	r23
    1df2:	8f 93       	push	r24
    1df4:	9f 93       	push	r25
    1df6:	af 93       	push	r26
    1df8:	bf 93       	push	r27
    1dfa:	ef 93       	push	r30
    1dfc:	ff 93       	push	r31
    1dfe:	df 93       	push	r29
    1e00:	cf 93       	push	r28
    1e02:	cd b7       	in	r28, 0x3d	; 61
    1e04:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_CTC_CallBack != NULL)
    1e06:	80 91 70 00 	lds	r24, 0x0070
    1e0a:	90 91 71 00 	lds	r25, 0x0071
    1e0e:	00 97       	sbiw	r24, 0x00	; 0
    1e10:	29 f0       	breq	.+10     	; 0x1e1c <__vector_10+0x40>
	{
		TIMER0_CTC_CallBack();
    1e12:	e0 91 70 00 	lds	r30, 0x0070
    1e16:	f0 91 71 00 	lds	r31, 0x0071
    1e1a:	09 95       	icall
	}
}
    1e1c:	cf 91       	pop	r28
    1e1e:	df 91       	pop	r29
    1e20:	ff 91       	pop	r31
    1e22:	ef 91       	pop	r30
    1e24:	bf 91       	pop	r27
    1e26:	af 91       	pop	r26
    1e28:	9f 91       	pop	r25
    1e2a:	8f 91       	pop	r24
    1e2c:	7f 91       	pop	r23
    1e2e:	6f 91       	pop	r22
    1e30:	5f 91       	pop	r21
    1e32:	4f 91       	pop	r20
    1e34:	3f 91       	pop	r19
    1e36:	2f 91       	pop	r18
    1e38:	0f 90       	pop	r0
    1e3a:	0f be       	out	0x3f, r0	; 63
    1e3c:	0f 90       	pop	r0
    1e3e:	1f 90       	pop	r1
    1e40:	18 95       	reti

00001e42 <MTIMER1_voidInit>:
/****************************************************/
/* 						TIMER1						*/
/****************************************************/
void MTIMER1_voidInit(void)
{
    1e42:	df 93       	push	r29
    1e44:	cf 93       	push	r28
    1e46:	cd b7       	in	r28, 0x3d	; 61
    1e48:	de b7       	in	r29, 0x3e	; 62
		/* SET CLK (PRESCALER)  */
		TCCR1B &= 0b10011000;
		TCCR1B |= CLK_CONFIGURATION ;
	#elif TIMER1_MODE == FAST_PWM_ICR1
		/* SET WAVE GENERATION MODE TO NORMAL MODE */
		CLR_BIT(TCCR1A,0);
    1e4a:	af e4       	ldi	r26, 0x4F	; 79
    1e4c:	b0 e0       	ldi	r27, 0x00	; 0
    1e4e:	ef e4       	ldi	r30, 0x4F	; 79
    1e50:	f0 e0       	ldi	r31, 0x00	; 0
    1e52:	80 81       	ld	r24, Z
    1e54:	8e 7f       	andi	r24, 0xFE	; 254
    1e56:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,1);
    1e58:	af e4       	ldi	r26, 0x4F	; 79
    1e5a:	b0 e0       	ldi	r27, 0x00	; 0
    1e5c:	ef e4       	ldi	r30, 0x4F	; 79
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	80 81       	ld	r24, Z
    1e62:	82 60       	ori	r24, 0x02	; 2
    1e64:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,3);
    1e66:	ae e4       	ldi	r26, 0x4E	; 78
    1e68:	b0 e0       	ldi	r27, 0x00	; 0
    1e6a:	ee e4       	ldi	r30, 0x4E	; 78
    1e6c:	f0 e0       	ldi	r31, 0x00	; 0
    1e6e:	80 81       	ld	r24, Z
    1e70:	88 60       	ori	r24, 0x08	; 8
    1e72:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,4);
    1e74:	ae e4       	ldi	r26, 0x4E	; 78
    1e76:	b0 e0       	ldi	r27, 0x00	; 0
    1e78:	ee e4       	ldi	r30, 0x4E	; 78
    1e7a:	f0 e0       	ldi	r31, 0x00	; 0
    1e7c:	80 81       	ld	r24, Z
    1e7e:	80 61       	ori	r24, 0x10	; 16
    1e80:	8c 93       	st	X, r24
		/* SET OC1A PIN ACTION */
		TCCR1A &= 0b10000011;
    1e82:	af e4       	ldi	r26, 0x4F	; 79
    1e84:	b0 e0       	ldi	r27, 0x00	; 0
    1e86:	ef e4       	ldi	r30, 0x4F	; 79
    1e88:	f0 e0       	ldi	r31, 0x00	; 0
    1e8a:	80 81       	ld	r24, Z
    1e8c:	83 78       	andi	r24, 0x83	; 131
    1e8e:	8c 93       	st	X, r24
		TCCR1A |= (FAST_PWM_OC1A_PIN_ACTION << 6);
    1e90:	af e4       	ldi	r26, 0x4F	; 79
    1e92:	b0 e0       	ldi	r27, 0x00	; 0
    1e94:	ef e4       	ldi	r30, 0x4F	; 79
    1e96:	f0 e0       	ldi	r31, 0x00	; 0
    1e98:	80 81       	ld	r24, Z
    1e9a:	80 68       	ori	r24, 0x80	; 128
    1e9c:	8c 93       	st	X, r24
		/*SET OC1B PIN ACTION*/
		TCCR1A |= (FAST_PWM_OC1B_PIN_ACTION << 4);
    1e9e:	af e4       	ldi	r26, 0x4F	; 79
    1ea0:	b0 e0       	ldi	r27, 0x00	; 0
    1ea2:	ef e4       	ldi	r30, 0x4F	; 79
    1ea4:	f0 e0       	ldi	r31, 0x00	; 0
    1ea6:	80 81       	ld	r24, Z
    1ea8:	80 62       	ori	r24, 0x20	; 32
    1eaa:	8c 93       	st	X, r24
		/*ICR1 VALUE*/
		ICR1 = ICR1_VALUE;
    1eac:	e6 e4       	ldi	r30, 0x46	; 70
    1eae:	f0 e0       	ldi	r31, 0x00	; 0
    1eb0:	8f e1       	ldi	r24, 0x1F	; 31
    1eb2:	9e e4       	ldi	r25, 0x4E	; 78
    1eb4:	91 83       	std	Z+1, r25	; 0x01
    1eb6:	80 83       	st	Z, r24
		/* SET CLK (PRESCALER)  */
		TCCR1B &= 0b10011000;
    1eb8:	ae e4       	ldi	r26, 0x4E	; 78
    1eba:	b0 e0       	ldi	r27, 0x00	; 0
    1ebc:	ee e4       	ldi	r30, 0x4E	; 78
    1ebe:	f0 e0       	ldi	r31, 0x00	; 0
    1ec0:	80 81       	ld	r24, Z
    1ec2:	88 79       	andi	r24, 0x98	; 152
    1ec4:	8c 93       	st	X, r24
		TCCR1B |= CLK_CONFIGURATION ;
    1ec6:	ae e4       	ldi	r26, 0x4E	; 78
    1ec8:	b0 e0       	ldi	r27, 0x00	; 0
    1eca:	ee e4       	ldi	r30, 0x4E	; 78
    1ecc:	f0 e0       	ldi	r31, 0x00	; 0
    1ece:	80 81       	ld	r24, Z
    1ed0:	82 60       	ori	r24, 0x02	; 2
    1ed2:	8c 93       	st	X, r24
	#endif
}
    1ed4:	cf 91       	pop	r28
    1ed6:	df 91       	pop	r29
    1ed8:	08 95       	ret

00001eda <MTIMER1_voidSetOCR1AValue>:
/*SET OCR0 VALUE ON REAL-TIME*/
void MTIMER1_voidSetOCR1AValue(u16 A_u16OCR1AValue)
{
    1eda:	df 93       	push	r29
    1edc:	cf 93       	push	r28
    1ede:	00 d0       	rcall	.+0      	; 0x1ee0 <MTIMER1_voidSetOCR1AValue+0x6>
    1ee0:	cd b7       	in	r28, 0x3d	; 61
    1ee2:	de b7       	in	r29, 0x3e	; 62
    1ee4:	9a 83       	std	Y+2, r25	; 0x02
    1ee6:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = A_u16OCR1AValue;
    1ee8:	ea e4       	ldi	r30, 0x4A	; 74
    1eea:	f0 e0       	ldi	r31, 0x00	; 0
    1eec:	89 81       	ldd	r24, Y+1	; 0x01
    1eee:	9a 81       	ldd	r25, Y+2	; 0x02
    1ef0:	91 83       	std	Z+1, r25	; 0x01
    1ef2:	80 83       	st	Z, r24
}
    1ef4:	0f 90       	pop	r0
    1ef6:	0f 90       	pop	r0
    1ef8:	cf 91       	pop	r28
    1efa:	df 91       	pop	r29
    1efc:	08 95       	ret

00001efe <MTIMER1_voidSetOCR1BValue>:
void MTIMER1_voidSetOCR1BValue(u16 A_u16OCR1BValue)
{
    1efe:	df 93       	push	r29
    1f00:	cf 93       	push	r28
    1f02:	00 d0       	rcall	.+0      	; 0x1f04 <MTIMER1_voidSetOCR1BValue+0x6>
    1f04:	cd b7       	in	r28, 0x3d	; 61
    1f06:	de b7       	in	r29, 0x3e	; 62
    1f08:	9a 83       	std	Y+2, r25	; 0x02
    1f0a:	89 83       	std	Y+1, r24	; 0x01
	OCR1B = A_u16OCR1BValue;
    1f0c:	e8 e4       	ldi	r30, 0x48	; 72
    1f0e:	f0 e0       	ldi	r31, 0x00	; 0
    1f10:	89 81       	ldd	r24, Y+1	; 0x01
    1f12:	9a 81       	ldd	r25, Y+2	; 0x02
    1f14:	91 83       	std	Z+1, r25	; 0x01
    1f16:	80 83       	st	Z, r24
}
    1f18:	0f 90       	pop	r0
    1f1a:	0f 90       	pop	r0
    1f1c:	cf 91       	pop	r28
    1f1e:	df 91       	pop	r29
    1f20:	08 95       	ret

00001f22 <MTIMER1_voidStopTimer>:
void MTIMER1_voidStopTimer(void)
{
    1f22:	df 93       	push	r29
    1f24:	cf 93       	push	r28
    1f26:	cd b7       	in	r28, 0x3d	; 61
    1f28:	de b7       	in	r29, 0x3e	; 62
	/* STOP CLK */
	/*PRESCALER CLK*/
	TCCR1A &= 0b11111000;
    1f2a:	af e4       	ldi	r26, 0x4F	; 79
    1f2c:	b0 e0       	ldi	r27, 0x00	; 0
    1f2e:	ef e4       	ldi	r30, 0x4F	; 79
    1f30:	f0 e0       	ldi	r31, 0x00	; 0
    1f32:	80 81       	ld	r24, Z
    1f34:	88 7f       	andi	r24, 0xF8	; 248
    1f36:	8c 93       	st	X, r24
	TCCR1B &= 0b11111000;
    1f38:	ae e4       	ldi	r26, 0x4E	; 78
    1f3a:	b0 e0       	ldi	r27, 0x00	; 0
    1f3c:	ee e4       	ldi	r30, 0x4E	; 78
    1f3e:	f0 e0       	ldi	r31, 0x00	; 0
    1f40:	80 81       	ld	r24, Z
    1f42:	88 7f       	andi	r24, 0xF8	; 248
    1f44:	8c 93       	st	X, r24

}
    1f46:	cf 91       	pop	r28
    1f48:	df 91       	pop	r29
    1f4a:	08 95       	ret

00001f4c <MTIMER2_voidInit>:
/****************************************************/
/* 						TIMER2						*/
/****************************************************/
void MTIMER2_voidInit(void)
{
    1f4c:	df 93       	push	r29
    1f4e:	cf 93       	push	r28
    1f50:	cd b7       	in	r28, 0x3d	; 61
    1f52:	de b7       	in	r29, 0x3e	; 62
		/* SET CLK (PRESCALER) & OC0 PIN ACTION */
		TCCR2 &= 0b11001000;
		TCCR2 |= TIMER2_CLK_CONFIGURATION | (CTC_OC2_PIN_ACTION << 4);
	#elif TIMER2_MODE == FAST_PWM_MODE
		/* SET WAVE GENERATION MODE TO FASR_PWM_MODE */
		SET_BIT(TCCR2,3);
    1f54:	a5 e4       	ldi	r26, 0x45	; 69
    1f56:	b0 e0       	ldi	r27, 0x00	; 0
    1f58:	e5 e4       	ldi	r30, 0x45	; 69
    1f5a:	f0 e0       	ldi	r31, 0x00	; 0
    1f5c:	80 81       	ld	r24, Z
    1f5e:	88 60       	ori	r24, 0x08	; 8
    1f60:	8c 93       	st	X, r24
		SET_BIT(TCCR2,6);
    1f62:	a5 e4       	ldi	r26, 0x45	; 69
    1f64:	b0 e0       	ldi	r27, 0x00	; 0
    1f66:	e5 e4       	ldi	r30, 0x45	; 69
    1f68:	f0 e0       	ldi	r31, 0x00	; 0
    1f6a:	80 81       	ld	r24, Z
    1f6c:	80 64       	ori	r24, 0x40	; 64
    1f6e:	8c 93       	st	X, r24
//		/*SET ON COMPARE MATCH VALUE*/
//		OCR0 = OCR0_VALUE;
		/* SET CLK (PRESCALER) & OC0 PIN ACTION */
		TCCR2 &= 0b11001000;
    1f70:	a5 e4       	ldi	r26, 0x45	; 69
    1f72:	b0 e0       	ldi	r27, 0x00	; 0
    1f74:	e5 e4       	ldi	r30, 0x45	; 69
    1f76:	f0 e0       	ldi	r31, 0x00	; 0
    1f78:	80 81       	ld	r24, Z
    1f7a:	88 7c       	andi	r24, 0xC8	; 200
    1f7c:	8c 93       	st	X, r24
		TCCR2 |= TIMER2_CLK_CONFIGURATION | (FAST_PWM_OC2_PIN_ACTION << 4);
    1f7e:	a5 e4       	ldi	r26, 0x45	; 69
    1f80:	b0 e0       	ldi	r27, 0x00	; 0
    1f82:	e5 e4       	ldi	r30, 0x45	; 69
    1f84:	f0 e0       	ldi	r31, 0x00	; 0
    1f86:	80 81       	ld	r24, Z
    1f88:	83 62       	ori	r24, 0x23	; 35
    1f8a:	8c 93       	st	X, r24

	#else
			#error WRONG TIMER MODE CONFIGURATION
	#endif
}
    1f8c:	cf 91       	pop	r28
    1f8e:	df 91       	pop	r29
    1f90:	08 95       	ret

00001f92 <MTIMER2_voidStopTimer>:
void MTIMER2_voidStopTimer(void)
{
    1f92:	df 93       	push	r29
    1f94:	cf 93       	push	r28
    1f96:	cd b7       	in	r28, 0x3d	; 61
    1f98:	de b7       	in	r29, 0x3e	; 62
	/* STOP CLK */
	/*PRESCALER CLK*/
	TCCR2 &= 0b11111000;
    1f9a:	a5 e4       	ldi	r26, 0x45	; 69
    1f9c:	b0 e0       	ldi	r27, 0x00	; 0
    1f9e:	e5 e4       	ldi	r30, 0x45	; 69
    1fa0:	f0 e0       	ldi	r31, 0x00	; 0
    1fa2:	80 81       	ld	r24, Z
    1fa4:	88 7f       	andi	r24, 0xF8	; 248
    1fa6:	8c 93       	st	X, r24
	TCCR2 |= 0b000;
    1fa8:	a5 e4       	ldi	r26, 0x45	; 69
    1faa:	b0 e0       	ldi	r27, 0x00	; 0
    1fac:	e5 e4       	ldi	r30, 0x45	; 69
    1fae:	f0 e0       	ldi	r31, 0x00	; 0
    1fb0:	80 81       	ld	r24, Z
    1fb2:	8c 93       	st	X, r24
}
    1fb4:	cf 91       	pop	r28
    1fb6:	df 91       	pop	r29
    1fb8:	08 95       	ret

00001fba <MTIMER2_voidSetPreloadValue>:
void MTIMER2_voidSetPreloadValue(u8 A_u8PreloadValue)
{
    1fba:	df 93       	push	r29
    1fbc:	cf 93       	push	r28
    1fbe:	0f 92       	push	r0
    1fc0:	cd b7       	in	r28, 0x3d	; 61
    1fc2:	de b7       	in	r29, 0x3e	; 62
    1fc4:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = A_u8PreloadValue;
    1fc6:	e2 e5       	ldi	r30, 0x52	; 82
    1fc8:	f0 e0       	ldi	r31, 0x00	; 0
    1fca:	89 81       	ldd	r24, Y+1	; 0x01
    1fcc:	80 83       	st	Z, r24
}
    1fce:	0f 90       	pop	r0
    1fd0:	cf 91       	pop	r28
    1fd2:	df 91       	pop	r29
    1fd4:	08 95       	ret

00001fd6 <MTIMER2_voidSetOCR2Value>:
/*SET OCR2 VALUE ON REAL-TIME*/
void MTIMER2_voidSetOCR2Value(u8 A_u8OCR0Value)
{
    1fd6:	df 93       	push	r29
    1fd8:	cf 93       	push	r28
    1fda:	0f 92       	push	r0
    1fdc:	cd b7       	in	r28, 0x3d	; 61
    1fde:	de b7       	in	r29, 0x3e	; 62
    1fe0:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = A_u8OCR0Value;
    1fe2:	e3 e4       	ldi	r30, 0x43	; 67
    1fe4:	f0 e0       	ldi	r31, 0x00	; 0
    1fe6:	89 81       	ldd	r24, Y+1	; 0x01
    1fe8:	80 83       	st	Z, r24
}
    1fea:	0f 90       	pop	r0
    1fec:	cf 91       	pop	r28
    1fee:	df 91       	pop	r29
    1ff0:	08 95       	ret

00001ff2 <MTIMER2_voidSetCallBackOVF>:

/* INTERRUPT NORMAL MODE */
void (*TIMER2_OVF_CallBack)(void) = NULL;

void MTIMER2_voidSetCallBackOVF(void (*PtrToFunction)(void))
{
    1ff2:	df 93       	push	r29
    1ff4:	cf 93       	push	r28
    1ff6:	00 d0       	rcall	.+0      	; 0x1ff8 <MTIMER2_voidSetCallBackOVF+0x6>
    1ff8:	cd b7       	in	r28, 0x3d	; 61
    1ffa:	de b7       	in	r29, 0x3e	; 62
    1ffc:	9a 83       	std	Y+2, r25	; 0x02
    1ffe:	89 83       	std	Y+1, r24	; 0x01
	if(PtrToFunction != NULL)
    2000:	89 81       	ldd	r24, Y+1	; 0x01
    2002:	9a 81       	ldd	r25, Y+2	; 0x02
    2004:	00 97       	sbiw	r24, 0x00	; 0
    2006:	31 f0       	breq	.+12     	; 0x2014 <MTIMER2_voidSetCallBackOVF+0x22>
	{
	 TIMER2_OVF_CallBack = PtrToFunction;
    2008:	89 81       	ldd	r24, Y+1	; 0x01
    200a:	9a 81       	ldd	r25, Y+2	; 0x02
    200c:	90 93 73 00 	sts	0x0073, r25
    2010:	80 93 72 00 	sts	0x0072, r24
	}
}
    2014:	0f 90       	pop	r0
    2016:	0f 90       	pop	r0
    2018:	cf 91       	pop	r28
    201a:	df 91       	pop	r29
    201c:	08 95       	ret

0000201e <__vector_5>:
void __vector_5(void)  __attribute__((signal));
void __vector_5(void)
{
    201e:	1f 92       	push	r1
    2020:	0f 92       	push	r0
    2022:	0f b6       	in	r0, 0x3f	; 63
    2024:	0f 92       	push	r0
    2026:	11 24       	eor	r1, r1
    2028:	2f 93       	push	r18
    202a:	3f 93       	push	r19
    202c:	4f 93       	push	r20
    202e:	5f 93       	push	r21
    2030:	6f 93       	push	r22
    2032:	7f 93       	push	r23
    2034:	8f 93       	push	r24
    2036:	9f 93       	push	r25
    2038:	af 93       	push	r26
    203a:	bf 93       	push	r27
    203c:	ef 93       	push	r30
    203e:	ff 93       	push	r31
    2040:	df 93       	push	r29
    2042:	cf 93       	push	r28
    2044:	cd b7       	in	r28, 0x3d	; 61
    2046:	de b7       	in	r29, 0x3e	; 62
	if(TIMER2_OVF_CallBack != NULL)
    2048:	80 91 72 00 	lds	r24, 0x0072
    204c:	90 91 73 00 	lds	r25, 0x0073
    2050:	00 97       	sbiw	r24, 0x00	; 0
    2052:	29 f0       	breq	.+10     	; 0x205e <__vector_5+0x40>
	{
		TIMER2_OVF_CallBack();
    2054:	e0 91 72 00 	lds	r30, 0x0072
    2058:	f0 91 73 00 	lds	r31, 0x0073
    205c:	09 95       	icall
	}
}
    205e:	cf 91       	pop	r28
    2060:	df 91       	pop	r29
    2062:	ff 91       	pop	r31
    2064:	ef 91       	pop	r30
    2066:	bf 91       	pop	r27
    2068:	af 91       	pop	r26
    206a:	9f 91       	pop	r25
    206c:	8f 91       	pop	r24
    206e:	7f 91       	pop	r23
    2070:	6f 91       	pop	r22
    2072:	5f 91       	pop	r21
    2074:	4f 91       	pop	r20
    2076:	3f 91       	pop	r19
    2078:	2f 91       	pop	r18
    207a:	0f 90       	pop	r0
    207c:	0f be       	out	0x3f, r0	; 63
    207e:	0f 90       	pop	r0
    2080:	1f 90       	pop	r1
    2082:	18 95       	reti

00002084 <MTIMER2_voidSetCallBackCTC>:

/* INTERRUPT CTC MODE */
void (*TIMER2_CTC_CallBack)(void) = NULL;

void MTIMER2_voidSetCallBackCTC(void (*PtrToFunction)(void))
{
    2084:	df 93       	push	r29
    2086:	cf 93       	push	r28
    2088:	00 d0       	rcall	.+0      	; 0x208a <MTIMER2_voidSetCallBackCTC+0x6>
    208a:	cd b7       	in	r28, 0x3d	; 61
    208c:	de b7       	in	r29, 0x3e	; 62
    208e:	9a 83       	std	Y+2, r25	; 0x02
    2090:	89 83       	std	Y+1, r24	; 0x01
	if(PtrToFunction != NULL)
    2092:	89 81       	ldd	r24, Y+1	; 0x01
    2094:	9a 81       	ldd	r25, Y+2	; 0x02
    2096:	00 97       	sbiw	r24, 0x00	; 0
    2098:	31 f0       	breq	.+12     	; 0x20a6 <MTIMER2_voidSetCallBackCTC+0x22>
	{
	 TIMER2_CTC_CallBack = PtrToFunction;
    209a:	89 81       	ldd	r24, Y+1	; 0x01
    209c:	9a 81       	ldd	r25, Y+2	; 0x02
    209e:	90 93 75 00 	sts	0x0075, r25
    20a2:	80 93 74 00 	sts	0x0074, r24
	}
}
    20a6:	0f 90       	pop	r0
    20a8:	0f 90       	pop	r0
    20aa:	cf 91       	pop	r28
    20ac:	df 91       	pop	r29
    20ae:	08 95       	ret

000020b0 <__vector_4>:
void __vector_4(void)  __attribute__ ((signal));
void __vector_4(void)
{
    20b0:	1f 92       	push	r1
    20b2:	0f 92       	push	r0
    20b4:	0f b6       	in	r0, 0x3f	; 63
    20b6:	0f 92       	push	r0
    20b8:	11 24       	eor	r1, r1
    20ba:	2f 93       	push	r18
    20bc:	3f 93       	push	r19
    20be:	4f 93       	push	r20
    20c0:	5f 93       	push	r21
    20c2:	6f 93       	push	r22
    20c4:	7f 93       	push	r23
    20c6:	8f 93       	push	r24
    20c8:	9f 93       	push	r25
    20ca:	af 93       	push	r26
    20cc:	bf 93       	push	r27
    20ce:	ef 93       	push	r30
    20d0:	ff 93       	push	r31
    20d2:	df 93       	push	r29
    20d4:	cf 93       	push	r28
    20d6:	cd b7       	in	r28, 0x3d	; 61
    20d8:	de b7       	in	r29, 0x3e	; 62
	if(TIMER2_CTC_CallBack != NULL)
    20da:	80 91 74 00 	lds	r24, 0x0074
    20de:	90 91 75 00 	lds	r25, 0x0075
    20e2:	00 97       	sbiw	r24, 0x00	; 0
    20e4:	29 f0       	breq	.+10     	; 0x20f0 <__vector_4+0x40>
	{
		TIMER2_CTC_CallBack();
    20e6:	e0 91 74 00 	lds	r30, 0x0074
    20ea:	f0 91 75 00 	lds	r31, 0x0075
    20ee:	09 95       	icall
	}
}
    20f0:	cf 91       	pop	r28
    20f2:	df 91       	pop	r29
    20f4:	ff 91       	pop	r31
    20f6:	ef 91       	pop	r30
    20f8:	bf 91       	pop	r27
    20fa:	af 91       	pop	r26
    20fc:	9f 91       	pop	r25
    20fe:	8f 91       	pop	r24
    2100:	7f 91       	pop	r23
    2102:	6f 91       	pop	r22
    2104:	5f 91       	pop	r21
    2106:	4f 91       	pop	r20
    2108:	3f 91       	pop	r19
    210a:	2f 91       	pop	r18
    210c:	0f 90       	pop	r0
    210e:	0f be       	out	0x3f, r0	; 63
    2110:	0f 90       	pop	r0
    2112:	1f 90       	pop	r1
    2114:	18 95       	reti

00002116 <HUS_voidInit>:
static u16 global_u16Distance=0;
static u8 global_u8StartUsFlag=0;
static u32 global_u32Ovf;
static u32 global_u32TotalTime;
void HUS_voidInit()
{
    2116:	df 93       	push	r29
    2118:	cf 93       	push	r28
    211a:	cd b7       	in	r28, 0x3d	; 61
    211c:	de b7       	in	r29, 0x3e	; 62
    211e:	2e 97       	sbiw	r28, 0x0e	; 14
    2120:	0f b6       	in	r0, 0x3f	; 63
    2122:	f8 94       	cli
    2124:	de bf       	out	0x3e, r29	; 62
    2126:	0f be       	out	0x3f, r0	; 63
    2128:	cd bf       	out	0x3d, r28	; 61
	MGI_voidEnable();
    212a:	0e 94 86 0b 	call	0x170c	; 0x170c <MGI_voidEnable>
	MTIMER0_voidInit();
    212e:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <MTIMER0_voidInit>
	MTIMER0_voidSetCallBackCTC(TIME_INTERRUPT);
    2132:	87 e0       	ldi	r24, 0x07	; 7
    2134:	93 e1       	ldi	r25, 0x13	; 19
    2136:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <MTIMER0_voidSetCallBackCTC>
	MEXTI_voidSetCallBack(ECHO_INTERRUPT,EXTI1);
    213a:	8d e2       	ldi	r24, 0x2D	; 45
    213c:	93 e1       	ldi	r25, 0x13	; 19
    213e:	61 e0       	ldi	r22, 0x01	; 1
    2140:	0e 94 b0 0a 	call	0x1560	; 0x1560 <MEXTI_voidSetCallBack>
	MEXTI_voidConfig(EXTI1,ON_CHANGE);
    2144:	81 e0       	ldi	r24, 0x01	; 1
    2146:	61 e0       	ldi	r22, 0x01	; 1
    2148:	0e 94 9b 09 	call	0x1336	; 0x1336 <MEXTI_voidConfig>
	MEXTI_voidEnable(EXTI1);
    214c:	81 e0       	ldi	r24, 0x01	; 1
    214e:	0e 94 0b 0a 	call	0x1416	; 0x1416 <MEXTI_voidEnable>
    2152:	80 e0       	ldi	r24, 0x00	; 0
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	a0 e2       	ldi	r26, 0x20	; 32
    2158:	b1 e4       	ldi	r27, 0x41	; 65
    215a:	8b 87       	std	Y+11, r24	; 0x0b
    215c:	9c 87       	std	Y+12, r25	; 0x0c
    215e:	ad 87       	std	Y+13, r26	; 0x0d
    2160:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2162:	6b 85       	ldd	r22, Y+11	; 0x0b
    2164:	7c 85       	ldd	r23, Y+12	; 0x0c
    2166:	8d 85       	ldd	r24, Y+13	; 0x0d
    2168:	9e 85       	ldd	r25, Y+14	; 0x0e
    216a:	20 e0       	ldi	r18, 0x00	; 0
    216c:	30 e0       	ldi	r19, 0x00	; 0
    216e:	4a ef       	ldi	r20, 0xFA	; 250
    2170:	54 e4       	ldi	r21, 0x44	; 68
    2172:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2176:	dc 01       	movw	r26, r24
    2178:	cb 01       	movw	r24, r22
    217a:	8f 83       	std	Y+7, r24	; 0x07
    217c:	98 87       	std	Y+8, r25	; 0x08
    217e:	a9 87       	std	Y+9, r26	; 0x09
    2180:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2182:	6f 81       	ldd	r22, Y+7	; 0x07
    2184:	78 85       	ldd	r23, Y+8	; 0x08
    2186:	89 85       	ldd	r24, Y+9	; 0x09
    2188:	9a 85       	ldd	r25, Y+10	; 0x0a
    218a:	20 e0       	ldi	r18, 0x00	; 0
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	40 e8       	ldi	r20, 0x80	; 128
    2190:	5f e3       	ldi	r21, 0x3F	; 63
    2192:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2196:	88 23       	and	r24, r24
    2198:	2c f4       	brge	.+10     	; 0x21a4 <HUS_voidInit+0x8e>
		__ticks = 1;
    219a:	81 e0       	ldi	r24, 0x01	; 1
    219c:	90 e0       	ldi	r25, 0x00	; 0
    219e:	9e 83       	std	Y+6, r25	; 0x06
    21a0:	8d 83       	std	Y+5, r24	; 0x05
    21a2:	3f c0       	rjmp	.+126    	; 0x2222 <HUS_voidInit+0x10c>
	else if (__tmp > 65535)
    21a4:	6f 81       	ldd	r22, Y+7	; 0x07
    21a6:	78 85       	ldd	r23, Y+8	; 0x08
    21a8:	89 85       	ldd	r24, Y+9	; 0x09
    21aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ac:	20 e0       	ldi	r18, 0x00	; 0
    21ae:	3f ef       	ldi	r19, 0xFF	; 255
    21b0:	4f e7       	ldi	r20, 0x7F	; 127
    21b2:	57 e4       	ldi	r21, 0x47	; 71
    21b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21b8:	18 16       	cp	r1, r24
    21ba:	4c f5       	brge	.+82     	; 0x220e <HUS_voidInit+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    21be:	7c 85       	ldd	r23, Y+12	; 0x0c
    21c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    21c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    21c4:	20 e0       	ldi	r18, 0x00	; 0
    21c6:	30 e0       	ldi	r19, 0x00	; 0
    21c8:	40 e2       	ldi	r20, 0x20	; 32
    21ca:	51 e4       	ldi	r21, 0x41	; 65
    21cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21d0:	dc 01       	movw	r26, r24
    21d2:	cb 01       	movw	r24, r22
    21d4:	bc 01       	movw	r22, r24
    21d6:	cd 01       	movw	r24, r26
    21d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21dc:	dc 01       	movw	r26, r24
    21de:	cb 01       	movw	r24, r22
    21e0:	9e 83       	std	Y+6, r25	; 0x06
    21e2:	8d 83       	std	Y+5, r24	; 0x05
    21e4:	0f c0       	rjmp	.+30     	; 0x2204 <HUS_voidInit+0xee>
    21e6:	88 ec       	ldi	r24, 0xC8	; 200
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	9c 83       	std	Y+4, r25	; 0x04
    21ec:	8b 83       	std	Y+3, r24	; 0x03
    21ee:	8b 81       	ldd	r24, Y+3	; 0x03
    21f0:	9c 81       	ldd	r25, Y+4	; 0x04
    21f2:	01 97       	sbiw	r24, 0x01	; 1
    21f4:	f1 f7       	brne	.-4      	; 0x21f2 <HUS_voidInit+0xdc>
    21f6:	9c 83       	std	Y+4, r25	; 0x04
    21f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21fa:	8d 81       	ldd	r24, Y+5	; 0x05
    21fc:	9e 81       	ldd	r25, Y+6	; 0x06
    21fe:	01 97       	sbiw	r24, 0x01	; 1
    2200:	9e 83       	std	Y+6, r25	; 0x06
    2202:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2204:	8d 81       	ldd	r24, Y+5	; 0x05
    2206:	9e 81       	ldd	r25, Y+6	; 0x06
    2208:	00 97       	sbiw	r24, 0x00	; 0
    220a:	69 f7       	brne	.-38     	; 0x21e6 <HUS_voidInit+0xd0>
    220c:	14 c0       	rjmp	.+40     	; 0x2236 <HUS_voidInit+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    220e:	6f 81       	ldd	r22, Y+7	; 0x07
    2210:	78 85       	ldd	r23, Y+8	; 0x08
    2212:	89 85       	ldd	r24, Y+9	; 0x09
    2214:	9a 85       	ldd	r25, Y+10	; 0x0a
    2216:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    221a:	dc 01       	movw	r26, r24
    221c:	cb 01       	movw	r24, r22
    221e:	9e 83       	std	Y+6, r25	; 0x06
    2220:	8d 83       	std	Y+5, r24	; 0x05
    2222:	8d 81       	ldd	r24, Y+5	; 0x05
    2224:	9e 81       	ldd	r25, Y+6	; 0x06
    2226:	9a 83       	std	Y+2, r25	; 0x02
    2228:	89 83       	std	Y+1, r24	; 0x01
    222a:	89 81       	ldd	r24, Y+1	; 0x01
    222c:	9a 81       	ldd	r25, Y+2	; 0x02
    222e:	01 97       	sbiw	r24, 0x01	; 1
    2230:	f1 f7       	brne	.-4      	; 0x222e <HUS_voidInit+0x118>
    2232:	9a 83       	std	Y+2, r25	; 0x02
    2234:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    2236:	2e 96       	adiw	r28, 0x0e	; 14
    2238:	0f b6       	in	r0, 0x3f	; 63
    223a:	f8 94       	cli
    223c:	de bf       	out	0x3e, r29	; 62
    223e:	0f be       	out	0x3f, r0	; 63
    2240:	cd bf       	out	0x3d, r28	; 61
    2242:	cf 91       	pop	r28
    2244:	df 91       	pop	r29
    2246:	08 95       	ret

00002248 <HUS_u16Distance>:

u16 HUS_u16Distance()
{
    2248:	df 93       	push	r29
    224a:	cf 93       	push	r28
    224c:	cd b7       	in	r28, 0x3d	; 61
    224e:	de b7       	in	r29, 0x3e	; 62
    2250:	68 97       	sbiw	r28, 0x18	; 24
    2252:	0f b6       	in	r0, 0x3f	; 63
    2254:	f8 94       	cli
    2256:	de bf       	out	0x3e, r29	; 62
    2258:	0f be       	out	0x3f, r0	; 63
    225a:	cd bf       	out	0x3d, r28	; 61
	/*SET A PULUS ON TRIG PIN*/
	MDIO_voidSetPinValue(US_PORT,TRIG_PIN,PIN_HIGH);
    225c:	82 e0       	ldi	r24, 0x02	; 2
    225e:	60 e0       	ldi	r22, 0x00	; 0
    2260:	41 e0       	ldi	r20, 0x01	; 1
    2262:	0e 94 89 07 	call	0xf12	; 0xf12 <MDIO_voidSetPinValue>
    2266:	80 e0       	ldi	r24, 0x00	; 0
    2268:	90 e0       	ldi	r25, 0x00	; 0
    226a:	a0 e2       	ldi	r26, 0x20	; 32
    226c:	b1 e4       	ldi	r27, 0x41	; 65
    226e:	8d 8b       	std	Y+21, r24	; 0x15
    2270:	9e 8b       	std	Y+22, r25	; 0x16
    2272:	af 8b       	std	Y+23, r26	; 0x17
    2274:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2276:	6d 89       	ldd	r22, Y+21	; 0x15
    2278:	7e 89       	ldd	r23, Y+22	; 0x16
    227a:	8f 89       	ldd	r24, Y+23	; 0x17
    227c:	98 8d       	ldd	r25, Y+24	; 0x18
    227e:	2b ea       	ldi	r18, 0xAB	; 171
    2280:	3a ea       	ldi	r19, 0xAA	; 170
    2282:	4a e2       	ldi	r20, 0x2A	; 42
    2284:	50 e4       	ldi	r21, 0x40	; 64
    2286:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    228a:	dc 01       	movw	r26, r24
    228c:	cb 01       	movw	r24, r22
    228e:	89 8b       	std	Y+17, r24	; 0x11
    2290:	9a 8b       	std	Y+18, r25	; 0x12
    2292:	ab 8b       	std	Y+19, r26	; 0x13
    2294:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2296:	69 89       	ldd	r22, Y+17	; 0x11
    2298:	7a 89       	ldd	r23, Y+18	; 0x12
    229a:	8b 89       	ldd	r24, Y+19	; 0x13
    229c:	9c 89       	ldd	r25, Y+20	; 0x14
    229e:	20 e0       	ldi	r18, 0x00	; 0
    22a0:	30 e0       	ldi	r19, 0x00	; 0
    22a2:	40 e8       	ldi	r20, 0x80	; 128
    22a4:	5f e3       	ldi	r21, 0x3F	; 63
    22a6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22aa:	88 23       	and	r24, r24
    22ac:	1c f4       	brge	.+6      	; 0x22b4 <HUS_u16Distance+0x6c>
		__ticks = 1;
    22ae:	81 e0       	ldi	r24, 0x01	; 1
    22b0:	88 8b       	std	Y+16, r24	; 0x10
    22b2:	91 c0       	rjmp	.+290    	; 0x23d6 <HUS_u16Distance+0x18e>
	else if (__tmp > 255)
    22b4:	69 89       	ldd	r22, Y+17	; 0x11
    22b6:	7a 89       	ldd	r23, Y+18	; 0x12
    22b8:	8b 89       	ldd	r24, Y+19	; 0x13
    22ba:	9c 89       	ldd	r25, Y+20	; 0x14
    22bc:	20 e0       	ldi	r18, 0x00	; 0
    22be:	30 e0       	ldi	r19, 0x00	; 0
    22c0:	4f e7       	ldi	r20, 0x7F	; 127
    22c2:	53 e4       	ldi	r21, 0x43	; 67
    22c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22c8:	18 16       	cp	r1, r24
    22ca:	0c f0       	brlt	.+2      	; 0x22ce <HUS_u16Distance+0x86>
    22cc:	7b c0       	rjmp	.+246    	; 0x23c4 <HUS_u16Distance+0x17c>
	{
		_delay_ms(__us / 1000.0);
    22ce:	6d 89       	ldd	r22, Y+21	; 0x15
    22d0:	7e 89       	ldd	r23, Y+22	; 0x16
    22d2:	8f 89       	ldd	r24, Y+23	; 0x17
    22d4:	98 8d       	ldd	r25, Y+24	; 0x18
    22d6:	20 e0       	ldi	r18, 0x00	; 0
    22d8:	30 e0       	ldi	r19, 0x00	; 0
    22da:	4a e7       	ldi	r20, 0x7A	; 122
    22dc:	54 e4       	ldi	r21, 0x44	; 68
    22de:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    22e2:	dc 01       	movw	r26, r24
    22e4:	cb 01       	movw	r24, r22
    22e6:	8c 87       	std	Y+12, r24	; 0x0c
    22e8:	9d 87       	std	Y+13, r25	; 0x0d
    22ea:	ae 87       	std	Y+14, r26	; 0x0e
    22ec:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22ee:	6c 85       	ldd	r22, Y+12	; 0x0c
    22f0:	7d 85       	ldd	r23, Y+13	; 0x0d
    22f2:	8e 85       	ldd	r24, Y+14	; 0x0e
    22f4:	9f 85       	ldd	r25, Y+15	; 0x0f
    22f6:	20 e0       	ldi	r18, 0x00	; 0
    22f8:	30 e0       	ldi	r19, 0x00	; 0
    22fa:	4a ef       	ldi	r20, 0xFA	; 250
    22fc:	54 e4       	ldi	r21, 0x44	; 68
    22fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2302:	dc 01       	movw	r26, r24
    2304:	cb 01       	movw	r24, r22
    2306:	88 87       	std	Y+8, r24	; 0x08
    2308:	99 87       	std	Y+9, r25	; 0x09
    230a:	aa 87       	std	Y+10, r26	; 0x0a
    230c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    230e:	68 85       	ldd	r22, Y+8	; 0x08
    2310:	79 85       	ldd	r23, Y+9	; 0x09
    2312:	8a 85       	ldd	r24, Y+10	; 0x0a
    2314:	9b 85       	ldd	r25, Y+11	; 0x0b
    2316:	20 e0       	ldi	r18, 0x00	; 0
    2318:	30 e0       	ldi	r19, 0x00	; 0
    231a:	40 e8       	ldi	r20, 0x80	; 128
    231c:	5f e3       	ldi	r21, 0x3F	; 63
    231e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2322:	88 23       	and	r24, r24
    2324:	2c f4       	brge	.+10     	; 0x2330 <HUS_u16Distance+0xe8>
		__ticks = 1;
    2326:	81 e0       	ldi	r24, 0x01	; 1
    2328:	90 e0       	ldi	r25, 0x00	; 0
    232a:	9f 83       	std	Y+7, r25	; 0x07
    232c:	8e 83       	std	Y+6, r24	; 0x06
    232e:	3f c0       	rjmp	.+126    	; 0x23ae <HUS_u16Distance+0x166>
	else if (__tmp > 65535)
    2330:	68 85       	ldd	r22, Y+8	; 0x08
    2332:	79 85       	ldd	r23, Y+9	; 0x09
    2334:	8a 85       	ldd	r24, Y+10	; 0x0a
    2336:	9b 85       	ldd	r25, Y+11	; 0x0b
    2338:	20 e0       	ldi	r18, 0x00	; 0
    233a:	3f ef       	ldi	r19, 0xFF	; 255
    233c:	4f e7       	ldi	r20, 0x7F	; 127
    233e:	57 e4       	ldi	r21, 0x47	; 71
    2340:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2344:	18 16       	cp	r1, r24
    2346:	4c f5       	brge	.+82     	; 0x239a <HUS_u16Distance+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2348:	6c 85       	ldd	r22, Y+12	; 0x0c
    234a:	7d 85       	ldd	r23, Y+13	; 0x0d
    234c:	8e 85       	ldd	r24, Y+14	; 0x0e
    234e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2350:	20 e0       	ldi	r18, 0x00	; 0
    2352:	30 e0       	ldi	r19, 0x00	; 0
    2354:	40 e2       	ldi	r20, 0x20	; 32
    2356:	51 e4       	ldi	r21, 0x41	; 65
    2358:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    235c:	dc 01       	movw	r26, r24
    235e:	cb 01       	movw	r24, r22
    2360:	bc 01       	movw	r22, r24
    2362:	cd 01       	movw	r24, r26
    2364:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2368:	dc 01       	movw	r26, r24
    236a:	cb 01       	movw	r24, r22
    236c:	9f 83       	std	Y+7, r25	; 0x07
    236e:	8e 83       	std	Y+6, r24	; 0x06
    2370:	0f c0       	rjmp	.+30     	; 0x2390 <HUS_u16Distance+0x148>
    2372:	88 ec       	ldi	r24, 0xC8	; 200
    2374:	90 e0       	ldi	r25, 0x00	; 0
    2376:	9d 83       	std	Y+5, r25	; 0x05
    2378:	8c 83       	std	Y+4, r24	; 0x04
    237a:	8c 81       	ldd	r24, Y+4	; 0x04
    237c:	9d 81       	ldd	r25, Y+5	; 0x05
    237e:	01 97       	sbiw	r24, 0x01	; 1
    2380:	f1 f7       	brne	.-4      	; 0x237e <HUS_u16Distance+0x136>
    2382:	9d 83       	std	Y+5, r25	; 0x05
    2384:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2386:	8e 81       	ldd	r24, Y+6	; 0x06
    2388:	9f 81       	ldd	r25, Y+7	; 0x07
    238a:	01 97       	sbiw	r24, 0x01	; 1
    238c:	9f 83       	std	Y+7, r25	; 0x07
    238e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2390:	8e 81       	ldd	r24, Y+6	; 0x06
    2392:	9f 81       	ldd	r25, Y+7	; 0x07
    2394:	00 97       	sbiw	r24, 0x00	; 0
    2396:	69 f7       	brne	.-38     	; 0x2372 <HUS_u16Distance+0x12a>
    2398:	24 c0       	rjmp	.+72     	; 0x23e2 <HUS_u16Distance+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    239a:	68 85       	ldd	r22, Y+8	; 0x08
    239c:	79 85       	ldd	r23, Y+9	; 0x09
    239e:	8a 85       	ldd	r24, Y+10	; 0x0a
    23a0:	9b 85       	ldd	r25, Y+11	; 0x0b
    23a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23a6:	dc 01       	movw	r26, r24
    23a8:	cb 01       	movw	r24, r22
    23aa:	9f 83       	std	Y+7, r25	; 0x07
    23ac:	8e 83       	std	Y+6, r24	; 0x06
    23ae:	8e 81       	ldd	r24, Y+6	; 0x06
    23b0:	9f 81       	ldd	r25, Y+7	; 0x07
    23b2:	9b 83       	std	Y+3, r25	; 0x03
    23b4:	8a 83       	std	Y+2, r24	; 0x02
    23b6:	8a 81       	ldd	r24, Y+2	; 0x02
    23b8:	9b 81       	ldd	r25, Y+3	; 0x03
    23ba:	01 97       	sbiw	r24, 0x01	; 1
    23bc:	f1 f7       	brne	.-4      	; 0x23ba <HUS_u16Distance+0x172>
    23be:	9b 83       	std	Y+3, r25	; 0x03
    23c0:	8a 83       	std	Y+2, r24	; 0x02
    23c2:	0f c0       	rjmp	.+30     	; 0x23e2 <HUS_u16Distance+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    23c4:	69 89       	ldd	r22, Y+17	; 0x11
    23c6:	7a 89       	ldd	r23, Y+18	; 0x12
    23c8:	8b 89       	ldd	r24, Y+19	; 0x13
    23ca:	9c 89       	ldd	r25, Y+20	; 0x14
    23cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23d0:	dc 01       	movw	r26, r24
    23d2:	cb 01       	movw	r24, r22
    23d4:	88 8b       	std	Y+16, r24	; 0x10
    23d6:	88 89       	ldd	r24, Y+16	; 0x10
    23d8:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    23da:	89 81       	ldd	r24, Y+1	; 0x01
    23dc:	8a 95       	dec	r24
    23de:	f1 f7       	brne	.-4      	; 0x23dc <HUS_u16Distance+0x194>
    23e0:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(TIRG_DELAY_US);
	MDIO_voidSetPinValue(US_PORT,TRIG_PIN,PIN_LOW);
    23e2:	82 e0       	ldi	r24, 0x02	; 2
    23e4:	60 e0       	ldi	r22, 0x00	; 0
    23e6:	40 e0       	ldi	r20, 0x00	; 0
    23e8:	0e 94 89 07 	call	0xf12	; 0xf12 <MDIO_voidSetPinValue>
	/*GET THE TOTAL DISTANCE */
	global_u16Distance =(global_u32TotalTime)/SPEED_FACTOR ;
    23ec:	80 91 7e 00 	lds	r24, 0x007E
    23f0:	90 91 7f 00 	lds	r25, 0x007F
    23f4:	a0 91 80 00 	lds	r26, 0x0080
    23f8:	b0 91 81 00 	lds	r27, 0x0081
    23fc:	2d e1       	ldi	r18, 0x1D	; 29
    23fe:	30 e0       	ldi	r19, 0x00	; 0
    2400:	40 e0       	ldi	r20, 0x00	; 0
    2402:	50 e0       	ldi	r21, 0x00	; 0
    2404:	bc 01       	movw	r22, r24
    2406:	cd 01       	movw	r24, r26
    2408:	0e 94 35 18 	call	0x306a	; 0x306a <__udivmodsi4>
    240c:	da 01       	movw	r26, r20
    240e:	c9 01       	movw	r24, r18
    2410:	90 93 77 00 	sts	0x0077, r25
    2414:	80 93 76 00 	sts	0x0076, r24
	return global_u16Distance;
    2418:	80 91 76 00 	lds	r24, 0x0076
    241c:	90 91 77 00 	lds	r25, 0x0077
}
    2420:	68 96       	adiw	r28, 0x18	; 24
    2422:	0f b6       	in	r0, 0x3f	; 63
    2424:	f8 94       	cli
    2426:	de bf       	out	0x3e, r29	; 62
    2428:	0f be       	out	0x3f, r0	; 63
    242a:	cd bf       	out	0x3d, r28	; 61
    242c:	cf 91       	pop	r28
    242e:	df 91       	pop	r29
    2430:	08 95       	ret

00002432 <HUS_u16Read>:

u16 HUS_u16Read()
{
    2432:	df 93       	push	r29
    2434:	cf 93       	push	r28
    2436:	cd b7       	in	r28, 0x3d	; 61
    2438:	de b7       	in	r29, 0x3e	; 62
    243a:	6b 97       	sbiw	r28, 0x1b	; 27
    243c:	0f b6       	in	r0, 0x3f	; 63
    243e:	f8 94       	cli
    2440:	de bf       	out	0x3e, r29	; 62
    2442:	0f be       	out	0x3f, r0	; 63
    2444:	cd bf       	out	0x3d, r28	; 61
	u8 local_u8Counter=0;
    2446:	1b 8e       	std	Y+27, r1	; 0x1b
	u16 local_u16Sum=0;
    2448:	1a 8e       	std	Y+26, r1	; 0x1a
    244a:	19 8e       	std	Y+25, r1	; 0x19
	for(local_u8Counter=0;local_u8Counter<READING_NO;local_u8Counter++)
    244c:	1b 8e       	std	Y+27, r1	; 0x1b
    244e:	ca c0       	rjmp	.+404    	; 0x25e4 <HUS_u16Read+0x1b2>
	{
		local_u16Sum += HUS_u16Distance();
    2450:	0e 94 24 11 	call	0x2248	; 0x2248 <HUS_u16Distance>
    2454:	9c 01       	movw	r18, r24
    2456:	89 8d       	ldd	r24, Y+25	; 0x19
    2458:	9a 8d       	ldd	r25, Y+26	; 0x1a
    245a:	82 0f       	add	r24, r18
    245c:	93 1f       	adc	r25, r19
    245e:	9a 8f       	std	Y+26, r25	; 0x1a
    2460:	89 8f       	std	Y+25, r24	; 0x19
    2462:	80 e0       	ldi	r24, 0x00	; 0
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	a8 e4       	ldi	r26, 0x48	; 72
    2468:	b2 e4       	ldi	r27, 0x42	; 66
    246a:	8d 8b       	std	Y+21, r24	; 0x15
    246c:	9e 8b       	std	Y+22, r25	; 0x16
    246e:	af 8b       	std	Y+23, r26	; 0x17
    2470:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2472:	6d 89       	ldd	r22, Y+21	; 0x15
    2474:	7e 89       	ldd	r23, Y+22	; 0x16
    2476:	8f 89       	ldd	r24, Y+23	; 0x17
    2478:	98 8d       	ldd	r25, Y+24	; 0x18
    247a:	2b ea       	ldi	r18, 0xAB	; 171
    247c:	3a ea       	ldi	r19, 0xAA	; 170
    247e:	4a e2       	ldi	r20, 0x2A	; 42
    2480:	50 e4       	ldi	r21, 0x40	; 64
    2482:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2486:	dc 01       	movw	r26, r24
    2488:	cb 01       	movw	r24, r22
    248a:	89 8b       	std	Y+17, r24	; 0x11
    248c:	9a 8b       	std	Y+18, r25	; 0x12
    248e:	ab 8b       	std	Y+19, r26	; 0x13
    2490:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2492:	69 89       	ldd	r22, Y+17	; 0x11
    2494:	7a 89       	ldd	r23, Y+18	; 0x12
    2496:	8b 89       	ldd	r24, Y+19	; 0x13
    2498:	9c 89       	ldd	r25, Y+20	; 0x14
    249a:	20 e0       	ldi	r18, 0x00	; 0
    249c:	30 e0       	ldi	r19, 0x00	; 0
    249e:	40 e8       	ldi	r20, 0x80	; 128
    24a0:	5f e3       	ldi	r21, 0x3F	; 63
    24a2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24a6:	88 23       	and	r24, r24
    24a8:	1c f4       	brge	.+6      	; 0x24b0 <HUS_u16Read+0x7e>
		__ticks = 1;
    24aa:	81 e0       	ldi	r24, 0x01	; 1
    24ac:	88 8b       	std	Y+16, r24	; 0x10
    24ae:	91 c0       	rjmp	.+290    	; 0x25d2 <HUS_u16Read+0x1a0>
	else if (__tmp > 255)
    24b0:	69 89       	ldd	r22, Y+17	; 0x11
    24b2:	7a 89       	ldd	r23, Y+18	; 0x12
    24b4:	8b 89       	ldd	r24, Y+19	; 0x13
    24b6:	9c 89       	ldd	r25, Y+20	; 0x14
    24b8:	20 e0       	ldi	r18, 0x00	; 0
    24ba:	30 e0       	ldi	r19, 0x00	; 0
    24bc:	4f e7       	ldi	r20, 0x7F	; 127
    24be:	53 e4       	ldi	r21, 0x43	; 67
    24c0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24c4:	18 16       	cp	r1, r24
    24c6:	0c f0       	brlt	.+2      	; 0x24ca <HUS_u16Read+0x98>
    24c8:	7b c0       	rjmp	.+246    	; 0x25c0 <HUS_u16Read+0x18e>
	{
		_delay_ms(__us / 1000.0);
    24ca:	6d 89       	ldd	r22, Y+21	; 0x15
    24cc:	7e 89       	ldd	r23, Y+22	; 0x16
    24ce:	8f 89       	ldd	r24, Y+23	; 0x17
    24d0:	98 8d       	ldd	r25, Y+24	; 0x18
    24d2:	20 e0       	ldi	r18, 0x00	; 0
    24d4:	30 e0       	ldi	r19, 0x00	; 0
    24d6:	4a e7       	ldi	r20, 0x7A	; 122
    24d8:	54 e4       	ldi	r21, 0x44	; 68
    24da:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    24de:	dc 01       	movw	r26, r24
    24e0:	cb 01       	movw	r24, r22
    24e2:	8c 87       	std	Y+12, r24	; 0x0c
    24e4:	9d 87       	std	Y+13, r25	; 0x0d
    24e6:	ae 87       	std	Y+14, r26	; 0x0e
    24e8:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24ea:	6c 85       	ldd	r22, Y+12	; 0x0c
    24ec:	7d 85       	ldd	r23, Y+13	; 0x0d
    24ee:	8e 85       	ldd	r24, Y+14	; 0x0e
    24f0:	9f 85       	ldd	r25, Y+15	; 0x0f
    24f2:	20 e0       	ldi	r18, 0x00	; 0
    24f4:	30 e0       	ldi	r19, 0x00	; 0
    24f6:	4a ef       	ldi	r20, 0xFA	; 250
    24f8:	54 e4       	ldi	r21, 0x44	; 68
    24fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24fe:	dc 01       	movw	r26, r24
    2500:	cb 01       	movw	r24, r22
    2502:	88 87       	std	Y+8, r24	; 0x08
    2504:	99 87       	std	Y+9, r25	; 0x09
    2506:	aa 87       	std	Y+10, r26	; 0x0a
    2508:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    250a:	68 85       	ldd	r22, Y+8	; 0x08
    250c:	79 85       	ldd	r23, Y+9	; 0x09
    250e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2510:	9b 85       	ldd	r25, Y+11	; 0x0b
    2512:	20 e0       	ldi	r18, 0x00	; 0
    2514:	30 e0       	ldi	r19, 0x00	; 0
    2516:	40 e8       	ldi	r20, 0x80	; 128
    2518:	5f e3       	ldi	r21, 0x3F	; 63
    251a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    251e:	88 23       	and	r24, r24
    2520:	2c f4       	brge	.+10     	; 0x252c <HUS_u16Read+0xfa>
		__ticks = 1;
    2522:	81 e0       	ldi	r24, 0x01	; 1
    2524:	90 e0       	ldi	r25, 0x00	; 0
    2526:	9f 83       	std	Y+7, r25	; 0x07
    2528:	8e 83       	std	Y+6, r24	; 0x06
    252a:	3f c0       	rjmp	.+126    	; 0x25aa <HUS_u16Read+0x178>
	else if (__tmp > 65535)
    252c:	68 85       	ldd	r22, Y+8	; 0x08
    252e:	79 85       	ldd	r23, Y+9	; 0x09
    2530:	8a 85       	ldd	r24, Y+10	; 0x0a
    2532:	9b 85       	ldd	r25, Y+11	; 0x0b
    2534:	20 e0       	ldi	r18, 0x00	; 0
    2536:	3f ef       	ldi	r19, 0xFF	; 255
    2538:	4f e7       	ldi	r20, 0x7F	; 127
    253a:	57 e4       	ldi	r21, 0x47	; 71
    253c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2540:	18 16       	cp	r1, r24
    2542:	4c f5       	brge	.+82     	; 0x2596 <HUS_u16Read+0x164>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2544:	6c 85       	ldd	r22, Y+12	; 0x0c
    2546:	7d 85       	ldd	r23, Y+13	; 0x0d
    2548:	8e 85       	ldd	r24, Y+14	; 0x0e
    254a:	9f 85       	ldd	r25, Y+15	; 0x0f
    254c:	20 e0       	ldi	r18, 0x00	; 0
    254e:	30 e0       	ldi	r19, 0x00	; 0
    2550:	40 e2       	ldi	r20, 0x20	; 32
    2552:	51 e4       	ldi	r21, 0x41	; 65
    2554:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2558:	dc 01       	movw	r26, r24
    255a:	cb 01       	movw	r24, r22
    255c:	bc 01       	movw	r22, r24
    255e:	cd 01       	movw	r24, r26
    2560:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2564:	dc 01       	movw	r26, r24
    2566:	cb 01       	movw	r24, r22
    2568:	9f 83       	std	Y+7, r25	; 0x07
    256a:	8e 83       	std	Y+6, r24	; 0x06
    256c:	0f c0       	rjmp	.+30     	; 0x258c <HUS_u16Read+0x15a>
    256e:	88 ec       	ldi	r24, 0xC8	; 200
    2570:	90 e0       	ldi	r25, 0x00	; 0
    2572:	9d 83       	std	Y+5, r25	; 0x05
    2574:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2576:	8c 81       	ldd	r24, Y+4	; 0x04
    2578:	9d 81       	ldd	r25, Y+5	; 0x05
    257a:	01 97       	sbiw	r24, 0x01	; 1
    257c:	f1 f7       	brne	.-4      	; 0x257a <HUS_u16Read+0x148>
    257e:	9d 83       	std	Y+5, r25	; 0x05
    2580:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2582:	8e 81       	ldd	r24, Y+6	; 0x06
    2584:	9f 81       	ldd	r25, Y+7	; 0x07
    2586:	01 97       	sbiw	r24, 0x01	; 1
    2588:	9f 83       	std	Y+7, r25	; 0x07
    258a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    258c:	8e 81       	ldd	r24, Y+6	; 0x06
    258e:	9f 81       	ldd	r25, Y+7	; 0x07
    2590:	00 97       	sbiw	r24, 0x00	; 0
    2592:	69 f7       	brne	.-38     	; 0x256e <HUS_u16Read+0x13c>
    2594:	24 c0       	rjmp	.+72     	; 0x25de <HUS_u16Read+0x1ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2596:	68 85       	ldd	r22, Y+8	; 0x08
    2598:	79 85       	ldd	r23, Y+9	; 0x09
    259a:	8a 85       	ldd	r24, Y+10	; 0x0a
    259c:	9b 85       	ldd	r25, Y+11	; 0x0b
    259e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25a2:	dc 01       	movw	r26, r24
    25a4:	cb 01       	movw	r24, r22
    25a6:	9f 83       	std	Y+7, r25	; 0x07
    25a8:	8e 83       	std	Y+6, r24	; 0x06
    25aa:	8e 81       	ldd	r24, Y+6	; 0x06
    25ac:	9f 81       	ldd	r25, Y+7	; 0x07
    25ae:	9b 83       	std	Y+3, r25	; 0x03
    25b0:	8a 83       	std	Y+2, r24	; 0x02
    25b2:	8a 81       	ldd	r24, Y+2	; 0x02
    25b4:	9b 81       	ldd	r25, Y+3	; 0x03
    25b6:	01 97       	sbiw	r24, 0x01	; 1
    25b8:	f1 f7       	brne	.-4      	; 0x25b6 <HUS_u16Read+0x184>
    25ba:	9b 83       	std	Y+3, r25	; 0x03
    25bc:	8a 83       	std	Y+2, r24	; 0x02
    25be:	0f c0       	rjmp	.+30     	; 0x25de <HUS_u16Read+0x1ac>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    25c0:	69 89       	ldd	r22, Y+17	; 0x11
    25c2:	7a 89       	ldd	r23, Y+18	; 0x12
    25c4:	8b 89       	ldd	r24, Y+19	; 0x13
    25c6:	9c 89       	ldd	r25, Y+20	; 0x14
    25c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25cc:	dc 01       	movw	r26, r24
    25ce:	cb 01       	movw	r24, r22
    25d0:	88 8b       	std	Y+16, r24	; 0x10
    25d2:	88 89       	ldd	r24, Y+16	; 0x10
    25d4:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    25d6:	89 81       	ldd	r24, Y+1	; 0x01
    25d8:	8a 95       	dec	r24
    25da:	f1 f7       	brne	.-4      	; 0x25d8 <HUS_u16Read+0x1a6>
    25dc:	89 83       	std	Y+1, r24	; 0x01

u16 HUS_u16Read()
{
	u8 local_u8Counter=0;
	u16 local_u16Sum=0;
	for(local_u8Counter=0;local_u8Counter<READING_NO;local_u8Counter++)
    25de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25e0:	8f 5f       	subi	r24, 0xFF	; 255
    25e2:	8b 8f       	std	Y+27, r24	; 0x1b
    25e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25e6:	84 31       	cpi	r24, 0x14	; 20
    25e8:	08 f4       	brcc	.+2      	; 0x25ec <HUS_u16Read+0x1ba>
    25ea:	32 cf       	rjmp	.-412    	; 0x2450 <HUS_u16Read+0x1e>
	{
		local_u16Sum += HUS_u16Distance();
		_delay_us(50);
	}
	return (local_u16Sum/READING_NO);
    25ec:	89 8d       	ldd	r24, Y+25	; 0x19
    25ee:	9a 8d       	ldd	r25, Y+26	; 0x1a
    25f0:	24 e1       	ldi	r18, 0x14	; 20
    25f2:	30 e0       	ldi	r19, 0x00	; 0
    25f4:	b9 01       	movw	r22, r18
    25f6:	0e 94 21 18 	call	0x3042	; 0x3042 <__udivmodhi4>
    25fa:	cb 01       	movw	r24, r22
}
    25fc:	6b 96       	adiw	r28, 0x1b	; 27
    25fe:	0f b6       	in	r0, 0x3f	; 63
    2600:	f8 94       	cli
    2602:	de bf       	out	0x3e, r29	; 62
    2604:	0f be       	out	0x3f, r0	; 63
    2606:	cd bf       	out	0x3d, r28	; 61
    2608:	cf 91       	pop	r28
    260a:	df 91       	pop	r29
    260c:	08 95       	ret

0000260e <TIME_INTERRUPT>:

void TIME_INTERRUPT()
{
    260e:	df 93       	push	r29
    2610:	cf 93       	push	r28
    2612:	cd b7       	in	r28, 0x3d	; 61
    2614:	de b7       	in	r29, 0x3e	; 62
	if(global_u8StartUsFlag == FLAG_HIGH)
    2616:	80 91 78 00 	lds	r24, 0x0078
    261a:	81 30       	cpi	r24, 0x01	; 1
    261c:	d9 f4       	brne	.+54     	; 0x2654 <TIME_INTERRUPT+0x46>
	{
		global_u32Ovf++;
    261e:	80 91 7a 00 	lds	r24, 0x007A
    2622:	90 91 7b 00 	lds	r25, 0x007B
    2626:	a0 91 7c 00 	lds	r26, 0x007C
    262a:	b0 91 7d 00 	lds	r27, 0x007D
    262e:	01 96       	adiw	r24, 0x01	; 1
    2630:	a1 1d       	adc	r26, r1
    2632:	b1 1d       	adc	r27, r1
    2634:	80 93 7a 00 	sts	0x007A, r24
    2638:	90 93 7b 00 	sts	0x007B, r25
    263c:	a0 93 7c 00 	sts	0x007C, r26
    2640:	b0 93 7d 00 	sts	0x007D, r27
		global_u32TotalTime=CLEAR;
    2644:	10 92 7e 00 	sts	0x007E, r1
    2648:	10 92 7f 00 	sts	0x007F, r1
    264c:	10 92 80 00 	sts	0x0080, r1
    2650:	10 92 81 00 	sts	0x0081, r1
	}

}
    2654:	cf 91       	pop	r28
    2656:	df 91       	pop	r29
    2658:	08 95       	ret

0000265a <ECHO_INTERRUPT>:

void ECHO_INTERRUPT()
{
    265a:	df 93       	push	r29
    265c:	cf 93       	push	r28
    265e:	cd b7       	in	r28, 0x3d	; 61
    2660:	de b7       	in	r29, 0x3e	; 62
	static u8 local_flag = FLAG_LOW;
	/*WHEN THE WAVE START*/
	if(local_flag == FLAG_LOW)
    2662:	80 91 79 00 	lds	r24, 0x0079
    2666:	88 23       	and	r24, r24
    2668:	51 f4       	brne	.+20     	; 0x267e <ECHO_INTERRUPT+0x24>
	{
		local_flag = FLAG_HIGH;
    266a:	81 e0       	ldi	r24, 0x01	; 1
    266c:	80 93 79 00 	sts	0x0079, r24
		/*CLEAR TCNT*/
		MTIMER0_voidSetPreloadValue(CLEAR);
    2670:	80 e0       	ldi	r24, 0x00	; 0
    2672:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <MTIMER0_voidSetPreloadValue>
		/*START COUNTING THE OVERFLOW*/
		global_u8StartUsFlag=FLAG_HIGH;
    2676:	81 e0       	ldi	r24, 0x01	; 1
    2678:	80 93 78 00 	sts	0x0078, r24
    267c:	35 c0       	rjmp	.+106    	; 0x26e8 <ECHO_INTERRUPT+0x8e>
	}
	 /*WHEN THE WAVE END*/
	else if(local_flag == FLAG_HIGH)
    267e:	80 91 79 00 	lds	r24, 0x0079
    2682:	81 30       	cpi	r24, 0x01	; 1
    2684:	89 f5       	brne	.+98     	; 0x26e8 <ECHO_INTERRUPT+0x8e>
	{
		local_flag = FLAG_LOW;
    2686:	10 92 79 00 	sts	0x0079, r1
		/*STOP COUNTING THE TIME OF OVERFLOW*/
		global_u8StartUsFlag = FLAG_LOW;
    268a:	10 92 78 00 	sts	0x0078, r1
		/*GET THE TOTAL NUMBER OF TICKS*/
		global_u32TotalTime = (global_u32Ovf*OVF_TICKS)+TCNT0;
    268e:	80 91 7a 00 	lds	r24, 0x007A
    2692:	90 91 7b 00 	lds	r25, 0x007B
    2696:	a0 91 7c 00 	lds	r26, 0x007C
    269a:	b0 91 7d 00 	lds	r27, 0x007D
    269e:	24 e6       	ldi	r18, 0x64	; 100
    26a0:	30 e0       	ldi	r19, 0x00	; 0
    26a2:	40 e0       	ldi	r20, 0x00	; 0
    26a4:	50 e0       	ldi	r21, 0x00	; 0
    26a6:	bc 01       	movw	r22, r24
    26a8:	cd 01       	movw	r24, r26
    26aa:	0e 94 02 18 	call	0x3004	; 0x3004 <__mulsi3>
    26ae:	9b 01       	movw	r18, r22
    26b0:	ac 01       	movw	r20, r24
    26b2:	e2 e5       	ldi	r30, 0x52	; 82
    26b4:	f0 e0       	ldi	r31, 0x00	; 0
    26b6:	80 81       	ld	r24, Z
    26b8:	88 2f       	mov	r24, r24
    26ba:	90 e0       	ldi	r25, 0x00	; 0
    26bc:	a0 e0       	ldi	r26, 0x00	; 0
    26be:	b0 e0       	ldi	r27, 0x00	; 0
    26c0:	82 0f       	add	r24, r18
    26c2:	93 1f       	adc	r25, r19
    26c4:	a4 1f       	adc	r26, r20
    26c6:	b5 1f       	adc	r27, r21
    26c8:	80 93 7e 00 	sts	0x007E, r24
    26cc:	90 93 7f 00 	sts	0x007F, r25
    26d0:	a0 93 80 00 	sts	0x0080, r26
    26d4:	b0 93 81 00 	sts	0x0081, r27
		/*RESET THE OVERFLOW COUNTER*/
		global_u32Ovf=CLEAR;
    26d8:	10 92 7a 00 	sts	0x007A, r1
    26dc:	10 92 7b 00 	sts	0x007B, r1
    26e0:	10 92 7c 00 	sts	0x007C, r1
    26e4:	10 92 7d 00 	sts	0x007D, r1
	}
}
    26e8:	cf 91       	pop	r28
    26ea:	df 91       	pop	r29
    26ec:	08 95       	ret

000026ee <main>:
void SCAN_LEFT();

void SCAN_METAL();
void METAL();
int main(void)
{
    26ee:	df 93       	push	r29
    26f0:	cf 93       	push	r28
    26f2:	cd b7       	in	r28, 0x3d	; 61
    26f4:	de b7       	in	r29, 0x3e	; 62
    26f6:	6c 97       	sbiw	r28, 0x1c	; 28
    26f8:	0f b6       	in	r0, 0x3f	; 63
    26fa:	f8 94       	cli
    26fc:	de bf       	out	0x3e, r29	; 62
    26fe:	0f be       	out	0x3f, r0	; 63
    2700:	cd bf       	out	0x3d, r28	; 61
	MDIO_voidInit();
    2702:	0e 94 4f 06 	call	0xc9e	; 0xc9e <MDIO_voidInit>
	/* GI / TIMER0 / EXTI1*/
	HUS_voidInit();
    2706:	0e 94 8b 10 	call	0x2116	; 0x2116 <HUS_voidInit>
	/*PWM DC MOTOR*/
//	MTIMER2_voidInit();
//	MTIMER2_voidSetOCR2Value(128);

	MTIMER1_voidInit();
    270a:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <MTIMER1_voidInit>
	/*START POSITON FOR SERVO*/
	HSERVO_voidSetServo90(0);
    270e:	80 e0       	ldi	r24, 0x00	; 0
    2710:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <HSERVO_voidSetServo90>
	HSERVO_voidSetServo90(1);
    2714:	81 e0       	ldi	r24, 0x01	; 1
    2716:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <HSERVO_voidSetServo90>
    271a:	80 e0       	ldi	r24, 0x00	; 0
    271c:	90 e0       	ldi	r25, 0x00	; 0
    271e:	aa ef       	ldi	r26, 0xFA	; 250
    2720:	b3 e4       	ldi	r27, 0x43	; 67
    2722:	89 8f       	std	Y+25, r24	; 0x19
    2724:	9a 8f       	std	Y+26, r25	; 0x1a
    2726:	ab 8f       	std	Y+27, r26	; 0x1b
    2728:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    272a:	69 8d       	ldd	r22, Y+25	; 0x19
    272c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    272e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2730:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2732:	20 e0       	ldi	r18, 0x00	; 0
    2734:	30 e0       	ldi	r19, 0x00	; 0
    2736:	4a ef       	ldi	r20, 0xFA	; 250
    2738:	54 e4       	ldi	r21, 0x44	; 68
    273a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    273e:	dc 01       	movw	r26, r24
    2740:	cb 01       	movw	r24, r22
    2742:	8d 8b       	std	Y+21, r24	; 0x15
    2744:	9e 8b       	std	Y+22, r25	; 0x16
    2746:	af 8b       	std	Y+23, r26	; 0x17
    2748:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    274a:	6d 89       	ldd	r22, Y+21	; 0x15
    274c:	7e 89       	ldd	r23, Y+22	; 0x16
    274e:	8f 89       	ldd	r24, Y+23	; 0x17
    2750:	98 8d       	ldd	r25, Y+24	; 0x18
    2752:	20 e0       	ldi	r18, 0x00	; 0
    2754:	30 e0       	ldi	r19, 0x00	; 0
    2756:	40 e8       	ldi	r20, 0x80	; 128
    2758:	5f e3       	ldi	r21, 0x3F	; 63
    275a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    275e:	88 23       	and	r24, r24
    2760:	2c f4       	brge	.+10     	; 0x276c <main+0x7e>
		__ticks = 1;
    2762:	81 e0       	ldi	r24, 0x01	; 1
    2764:	90 e0       	ldi	r25, 0x00	; 0
    2766:	9c 8b       	std	Y+20, r25	; 0x14
    2768:	8b 8b       	std	Y+19, r24	; 0x13
    276a:	3f c0       	rjmp	.+126    	; 0x27ea <main+0xfc>
	else if (__tmp > 65535)
    276c:	6d 89       	ldd	r22, Y+21	; 0x15
    276e:	7e 89       	ldd	r23, Y+22	; 0x16
    2770:	8f 89       	ldd	r24, Y+23	; 0x17
    2772:	98 8d       	ldd	r25, Y+24	; 0x18
    2774:	20 e0       	ldi	r18, 0x00	; 0
    2776:	3f ef       	ldi	r19, 0xFF	; 255
    2778:	4f e7       	ldi	r20, 0x7F	; 127
    277a:	57 e4       	ldi	r21, 0x47	; 71
    277c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2780:	18 16       	cp	r1, r24
    2782:	4c f5       	brge	.+82     	; 0x27d6 <main+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2784:	69 8d       	ldd	r22, Y+25	; 0x19
    2786:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2788:	8b 8d       	ldd	r24, Y+27	; 0x1b
    278a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    278c:	20 e0       	ldi	r18, 0x00	; 0
    278e:	30 e0       	ldi	r19, 0x00	; 0
    2790:	40 e2       	ldi	r20, 0x20	; 32
    2792:	51 e4       	ldi	r21, 0x41	; 65
    2794:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2798:	dc 01       	movw	r26, r24
    279a:	cb 01       	movw	r24, r22
    279c:	bc 01       	movw	r22, r24
    279e:	cd 01       	movw	r24, r26
    27a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27a4:	dc 01       	movw	r26, r24
    27a6:	cb 01       	movw	r24, r22
    27a8:	9c 8b       	std	Y+20, r25	; 0x14
    27aa:	8b 8b       	std	Y+19, r24	; 0x13
    27ac:	0f c0       	rjmp	.+30     	; 0x27cc <main+0xde>
    27ae:	88 ec       	ldi	r24, 0xC8	; 200
    27b0:	90 e0       	ldi	r25, 0x00	; 0
    27b2:	9a 8b       	std	Y+18, r25	; 0x12
    27b4:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    27b6:	89 89       	ldd	r24, Y+17	; 0x11
    27b8:	9a 89       	ldd	r25, Y+18	; 0x12
    27ba:	01 97       	sbiw	r24, 0x01	; 1
    27bc:	f1 f7       	brne	.-4      	; 0x27ba <main+0xcc>
    27be:	9a 8b       	std	Y+18, r25	; 0x12
    27c0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27c2:	8b 89       	ldd	r24, Y+19	; 0x13
    27c4:	9c 89       	ldd	r25, Y+20	; 0x14
    27c6:	01 97       	sbiw	r24, 0x01	; 1
    27c8:	9c 8b       	std	Y+20, r25	; 0x14
    27ca:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27cc:	8b 89       	ldd	r24, Y+19	; 0x13
    27ce:	9c 89       	ldd	r25, Y+20	; 0x14
    27d0:	00 97       	sbiw	r24, 0x00	; 0
    27d2:	69 f7       	brne	.-38     	; 0x27ae <main+0xc0>
    27d4:	14 c0       	rjmp	.+40     	; 0x27fe <main+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27d6:	6d 89       	ldd	r22, Y+21	; 0x15
    27d8:	7e 89       	ldd	r23, Y+22	; 0x16
    27da:	8f 89       	ldd	r24, Y+23	; 0x17
    27dc:	98 8d       	ldd	r25, Y+24	; 0x18
    27de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27e2:	dc 01       	movw	r26, r24
    27e4:	cb 01       	movw	r24, r22
    27e6:	9c 8b       	std	Y+20, r25	; 0x14
    27e8:	8b 8b       	std	Y+19, r24	; 0x13
    27ea:	8b 89       	ldd	r24, Y+19	; 0x13
    27ec:	9c 89       	ldd	r25, Y+20	; 0x14
    27ee:	98 8b       	std	Y+16, r25	; 0x10
    27f0:	8f 87       	std	Y+15, r24	; 0x0f
    27f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    27f4:	98 89       	ldd	r25, Y+16	; 0x10
    27f6:	01 97       	sbiw	r24, 0x01	; 1
    27f8:	f1 f7       	brne	.-4      	; 0x27f6 <main+0x108>
    27fa:	98 8b       	std	Y+16, r25	; 0x10
    27fc:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(500);
	while(1)
	{
		global_u16FrontDistance=HUS_u16Read();
    27fe:	0e 94 19 12 	call	0x2432	; 0x2432 <HUS_u16Read>
    2802:	90 93 83 00 	sts	0x0083, r25
    2806:	80 93 82 00 	sts	0x0082, r24

		if (global_u16FrontDistance>=LIMIT_DISYANCE)
    280a:	80 91 82 00 	lds	r24, 0x0082
    280e:	90 91 83 00 	lds	r25, 0x0083
    2812:	80 31       	cpi	r24, 0x10	; 16
    2814:	91 05       	cpc	r25, r1
    2816:	08 f4       	brcc	.+2      	; 0x281a <main+0x12c>
    2818:	83 c0       	rjmp	.+262    	; 0x2920 <main+0x232>
		{

			FORWARD_LEFT_WHEEL();
    281a:	0e 94 d5 14 	call	0x29aa	; 0x29aa <FORWARD_LEFT_WHEEL>
			FORWARD_RIGHT_WHEEL();
    281e:	0e 94 9f 14 	call	0x293e	; 0x293e <FORWARD_RIGHT_WHEEL>
    2822:	80 e0       	ldi	r24, 0x00	; 0
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	aa ef       	ldi	r26, 0xFA	; 250
    2828:	b3 e4       	ldi	r27, 0x43	; 67
    282a:	8b 87       	std	Y+11, r24	; 0x0b
    282c:	9c 87       	std	Y+12, r25	; 0x0c
    282e:	ad 87       	std	Y+13, r26	; 0x0d
    2830:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2832:	6b 85       	ldd	r22, Y+11	; 0x0b
    2834:	7c 85       	ldd	r23, Y+12	; 0x0c
    2836:	8d 85       	ldd	r24, Y+13	; 0x0d
    2838:	9e 85       	ldd	r25, Y+14	; 0x0e
    283a:	20 e0       	ldi	r18, 0x00	; 0
    283c:	30 e0       	ldi	r19, 0x00	; 0
    283e:	4a ef       	ldi	r20, 0xFA	; 250
    2840:	54 e4       	ldi	r21, 0x44	; 68
    2842:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2846:	dc 01       	movw	r26, r24
    2848:	cb 01       	movw	r24, r22
    284a:	8f 83       	std	Y+7, r24	; 0x07
    284c:	98 87       	std	Y+8, r25	; 0x08
    284e:	a9 87       	std	Y+9, r26	; 0x09
    2850:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2852:	6f 81       	ldd	r22, Y+7	; 0x07
    2854:	78 85       	ldd	r23, Y+8	; 0x08
    2856:	89 85       	ldd	r24, Y+9	; 0x09
    2858:	9a 85       	ldd	r25, Y+10	; 0x0a
    285a:	20 e0       	ldi	r18, 0x00	; 0
    285c:	30 e0       	ldi	r19, 0x00	; 0
    285e:	40 e8       	ldi	r20, 0x80	; 128
    2860:	5f e3       	ldi	r21, 0x3F	; 63
    2862:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2866:	88 23       	and	r24, r24
    2868:	2c f4       	brge	.+10     	; 0x2874 <main+0x186>
		__ticks = 1;
    286a:	81 e0       	ldi	r24, 0x01	; 1
    286c:	90 e0       	ldi	r25, 0x00	; 0
    286e:	9e 83       	std	Y+6, r25	; 0x06
    2870:	8d 83       	std	Y+5, r24	; 0x05
    2872:	3f c0       	rjmp	.+126    	; 0x28f2 <main+0x204>
	else if (__tmp > 65535)
    2874:	6f 81       	ldd	r22, Y+7	; 0x07
    2876:	78 85       	ldd	r23, Y+8	; 0x08
    2878:	89 85       	ldd	r24, Y+9	; 0x09
    287a:	9a 85       	ldd	r25, Y+10	; 0x0a
    287c:	20 e0       	ldi	r18, 0x00	; 0
    287e:	3f ef       	ldi	r19, 0xFF	; 255
    2880:	4f e7       	ldi	r20, 0x7F	; 127
    2882:	57 e4       	ldi	r21, 0x47	; 71
    2884:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2888:	18 16       	cp	r1, r24
    288a:	4c f5       	brge	.+82     	; 0x28de <main+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    288c:	6b 85       	ldd	r22, Y+11	; 0x0b
    288e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2890:	8d 85       	ldd	r24, Y+13	; 0x0d
    2892:	9e 85       	ldd	r25, Y+14	; 0x0e
    2894:	20 e0       	ldi	r18, 0x00	; 0
    2896:	30 e0       	ldi	r19, 0x00	; 0
    2898:	40 e2       	ldi	r20, 0x20	; 32
    289a:	51 e4       	ldi	r21, 0x41	; 65
    289c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28a0:	dc 01       	movw	r26, r24
    28a2:	cb 01       	movw	r24, r22
    28a4:	bc 01       	movw	r22, r24
    28a6:	cd 01       	movw	r24, r26
    28a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ac:	dc 01       	movw	r26, r24
    28ae:	cb 01       	movw	r24, r22
    28b0:	9e 83       	std	Y+6, r25	; 0x06
    28b2:	8d 83       	std	Y+5, r24	; 0x05
    28b4:	0f c0       	rjmp	.+30     	; 0x28d4 <main+0x1e6>
    28b6:	88 ec       	ldi	r24, 0xC8	; 200
    28b8:	90 e0       	ldi	r25, 0x00	; 0
    28ba:	9c 83       	std	Y+4, r25	; 0x04
    28bc:	8b 83       	std	Y+3, r24	; 0x03
    28be:	8b 81       	ldd	r24, Y+3	; 0x03
    28c0:	9c 81       	ldd	r25, Y+4	; 0x04
    28c2:	01 97       	sbiw	r24, 0x01	; 1
    28c4:	f1 f7       	brne	.-4      	; 0x28c2 <main+0x1d4>
    28c6:	9c 83       	std	Y+4, r25	; 0x04
    28c8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28ca:	8d 81       	ldd	r24, Y+5	; 0x05
    28cc:	9e 81       	ldd	r25, Y+6	; 0x06
    28ce:	01 97       	sbiw	r24, 0x01	; 1
    28d0:	9e 83       	std	Y+6, r25	; 0x06
    28d2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28d4:	8d 81       	ldd	r24, Y+5	; 0x05
    28d6:	9e 81       	ldd	r25, Y+6	; 0x06
    28d8:	00 97       	sbiw	r24, 0x00	; 0
    28da:	69 f7       	brne	.-38     	; 0x28b6 <main+0x1c8>
    28dc:	14 c0       	rjmp	.+40     	; 0x2906 <main+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28de:	6f 81       	ldd	r22, Y+7	; 0x07
    28e0:	78 85       	ldd	r23, Y+8	; 0x08
    28e2:	89 85       	ldd	r24, Y+9	; 0x09
    28e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    28e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ea:	dc 01       	movw	r26, r24
    28ec:	cb 01       	movw	r24, r22
    28ee:	9e 83       	std	Y+6, r25	; 0x06
    28f0:	8d 83       	std	Y+5, r24	; 0x05
    28f2:	8d 81       	ldd	r24, Y+5	; 0x05
    28f4:	9e 81       	ldd	r25, Y+6	; 0x06
    28f6:	9a 83       	std	Y+2, r25	; 0x02
    28f8:	89 83       	std	Y+1, r24	; 0x01
    28fa:	89 81       	ldd	r24, Y+1	; 0x01
    28fc:	9a 81       	ldd	r25, Y+2	; 0x02
    28fe:	01 97       	sbiw	r24, 0x01	; 1
    2900:	f1 f7       	brne	.-4      	; 0x28fe <main+0x210>
    2902:	9a 83       	std	Y+2, r25	; 0x02
    2904:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);
			STOP_LEFT_WHEEL();
    2906:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <STOP_LEFT_WHEEL>
			STOP_RIGHT_WHEEL();
    290a:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <STOP_RIGHT_WHEEL>
			SCAN_METAL();
    290e:	0e 94 d7 17 	call	0x2fae	; 0x2fae <SCAN_METAL>
			global_u16FrontDistance=HUS_u16Read();
    2912:	0e 94 19 12 	call	0x2432	; 0x2432 <HUS_u16Read>
    2916:	90 93 83 00 	sts	0x0083, r25
    291a:	80 93 82 00 	sts	0x0082, r24
    291e:	6f cf       	rjmp	.-290    	; 0x27fe <main+0x110>
		}
		else if(global_u16FrontDistance<LIMIT_DISYANCE)
    2920:	80 91 82 00 	lds	r24, 0x0082
    2924:	90 91 83 00 	lds	r25, 0x0083
    2928:	80 31       	cpi	r24, 0x10	; 16
    292a:	91 05       	cpc	r25, r1
    292c:	08 f0       	brcs	.+2      	; 0x2930 <main+0x242>
    292e:	67 cf       	rjmp	.-306    	; 0x27fe <main+0x110>
		{
			STOP_RIGHT_WHEEL();
    2930:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <STOP_RIGHT_WHEEL>
			STOP_LEFT_WHEEL();
    2934:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <STOP_LEFT_WHEEL>
			TAKE_ROAD();
    2938:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <TAKE_ROAD>
    293c:	60 cf       	rjmp	.-320    	; 0x27fe <main+0x110>

0000293e <FORWARD_RIGHT_WHEEL>:

	}
}

void FORWARD_RIGHT_WHEEL()
{
    293e:	df 93       	push	r29
    2940:	cf 93       	push	r28
    2942:	cd b7       	in	r28, 0x3d	; 61
    2944:	de b7       	in	r29, 0x3e	; 62
	// stop forward pins
	MDIO_voidSetPinValue(PORTA,PIN1,PIN_LOW);
    2946:	80 e0       	ldi	r24, 0x00	; 0
    2948:	61 e0       	ldi	r22, 0x01	; 1
    294a:	40 e0       	ldi	r20, 0x00	; 0
    294c:	0e 94 89 07 	call	0xf12	; 0xf12 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(PORTA,PIN3,PIN_LOW);
    2950:	80 e0       	ldi	r24, 0x00	; 0
    2952:	63 e0       	ldi	r22, 0x03	; 3
    2954:	40 e0       	ldi	r20, 0x00	; 0
    2956:	0e 94 89 07 	call	0xf12	; 0xf12 <MDIO_voidSetPinValue>
	// forward pin high
	MDIO_voidSetPinValue(PORTA,PIN2,PIN_HIGH);
    295a:	80 e0       	ldi	r24, 0x00	; 0
    295c:	62 e0       	ldi	r22, 0x02	; 2
    295e:	41 e0       	ldi	r20, 0x01	; 1
    2960:	0e 94 89 07 	call	0xf12	; 0xf12 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(PORTA,PIN0,PIN_HIGH);
    2964:	80 e0       	ldi	r24, 0x00	; 0
    2966:	60 e0       	ldi	r22, 0x00	; 0
    2968:	41 e0       	ldi	r20, 0x01	; 1
    296a:	0e 94 89 07 	call	0xf12	; 0xf12 <MDIO_voidSetPinValue>

}
    296e:	cf 91       	pop	r28
    2970:	df 91       	pop	r29
    2972:	08 95       	ret

00002974 <BACK_RIGHT_WHEEL>:
void BACK_RIGHT_WHEEL()
{
    2974:	df 93       	push	r29
    2976:	cf 93       	push	r28
    2978:	cd b7       	in	r28, 0x3d	; 61
    297a:	de b7       	in	r29, 0x3e	; 62
	// stop forward pins
	MDIO_voidSetPinValue(PORTA,PIN2,PIN_LOW);
    297c:	80 e0       	ldi	r24, 0x00	; 0
    297e:	62 e0       	ldi	r22, 0x02	; 2
    2980:	40 e0       	ldi	r20, 0x00	; 0
    2982:	0e 94 89 07 	call	0xf12	; 0xf12 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(PORTA,PIN0,PIN_LOW);
    2986:	80 e0       	ldi	r24, 0x00	; 0
    2988:	60 e0       	ldi	r22, 0x00	; 0
    298a:	40 e0       	ldi	r20, 0x00	; 0
    298c:	0e 94 89 07 	call	0xf12	; 0xf12 <MDIO_voidSetPinValue>
	// backward pin high
	MDIO_voidSetPinValue(PORTA,PIN3,PIN_HIGH);
    2990:	80 e0       	ldi	r24, 0x00	; 0
    2992:	63 e0       	ldi	r22, 0x03	; 3
    2994:	41 e0       	ldi	r20, 0x01	; 1
    2996:	0e 94 89 07 	call	0xf12	; 0xf12 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(PORTA,PIN1,PIN_HIGH);
    299a:	80 e0       	ldi	r24, 0x00	; 0
    299c:	61 e0       	ldi	r22, 0x01	; 1
    299e:	41 e0       	ldi	r20, 0x01	; 1
    29a0:	0e 94 89 07 	call	0xf12	; 0xf12 <MDIO_voidSetPinValue>

}
    29a4:	cf 91       	pop	r28
    29a6:	df 91       	pop	r29
    29a8:	08 95       	ret

000029aa <FORWARD_LEFT_WHEEL>:

void FORWARD_LEFT_WHEEL()
{
    29aa:	df 93       	push	r29
    29ac:	cf 93       	push	r28
    29ae:	cd b7       	in	r28, 0x3d	; 61
    29b0:	de b7       	in	r29, 0x3e	; 62
	// stop backward pins
	MDIO_voidSetPinValue(PORTA,PIN6,PIN_LOW);
    29b2:	80 e0       	ldi	r24, 0x00	; 0
    29b4:	66 e0       	ldi	r22, 0x06	; 6
    29b6:	40 e0       	ldi	r20, 0x00	; 0
    29b8:	0e 94 89 07 	call	0xf12	; 0xf12 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(PORTA,PIN7,PIN_LOW);
    29bc:	80 e0       	ldi	r24, 0x00	; 0
    29be:	67 e0       	ldi	r22, 0x07	; 7
    29c0:	40 e0       	ldi	r20, 0x00	; 0
    29c2:	0e 94 89 07 	call	0xf12	; 0xf12 <MDIO_voidSetPinValue>
	// forward pin high
	MDIO_voidSetPinValue(PORTA,PIN5,PIN_HIGH);
    29c6:	80 e0       	ldi	r24, 0x00	; 0
    29c8:	65 e0       	ldi	r22, 0x05	; 5
    29ca:	41 e0       	ldi	r20, 0x01	; 1
    29cc:	0e 94 89 07 	call	0xf12	; 0xf12 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(PORTA,PIN4,PIN_HIGH);
    29d0:	80 e0       	ldi	r24, 0x00	; 0
    29d2:	64 e0       	ldi	r22, 0x04	; 4
    29d4:	41 e0       	ldi	r20, 0x01	; 1
    29d6:	0e 94 89 07 	call	0xf12	; 0xf12 <MDIO_voidSetPinValue>

}
    29da:	cf 91       	pop	r28
    29dc:	df 91       	pop	r29
    29de:	08 95       	ret

000029e0 <BACK_LEFT_WHEEL>:
void BACK_LEFT_WHEEL()
{
    29e0:	df 93       	push	r29
    29e2:	cf 93       	push	r28
    29e4:	cd b7       	in	r28, 0x3d	; 61
    29e6:	de b7       	in	r29, 0x3e	; 62
	// stop forward pins
	MDIO_voidSetPinValue(PORTA,PIN4,PIN_LOW);
    29e8:	80 e0       	ldi	r24, 0x00	; 0
    29ea:	64 e0       	ldi	r22, 0x04	; 4
    29ec:	40 e0       	ldi	r20, 0x00	; 0
    29ee:	0e 94 89 07 	call	0xf12	; 0xf12 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(PORTA,PIN5,PIN_LOW);
    29f2:	80 e0       	ldi	r24, 0x00	; 0
    29f4:	65 e0       	ldi	r22, 0x05	; 5
    29f6:	40 e0       	ldi	r20, 0x00	; 0
    29f8:	0e 94 89 07 	call	0xf12	; 0xf12 <MDIO_voidSetPinValue>
	// backward pin high
	MDIO_voidSetPinValue(PORTA,PIN7,PIN_HIGH);
    29fc:	80 e0       	ldi	r24, 0x00	; 0
    29fe:	67 e0       	ldi	r22, 0x07	; 7
    2a00:	41 e0       	ldi	r20, 0x01	; 1
    2a02:	0e 94 89 07 	call	0xf12	; 0xf12 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(PORTA,PIN6,PIN_HIGH);
    2a06:	80 e0       	ldi	r24, 0x00	; 0
    2a08:	66 e0       	ldi	r22, 0x06	; 6
    2a0a:	41 e0       	ldi	r20, 0x01	; 1
    2a0c:	0e 94 89 07 	call	0xf12	; 0xf12 <MDIO_voidSetPinValue>

}
    2a10:	cf 91       	pop	r28
    2a12:	df 91       	pop	r29
    2a14:	08 95       	ret

00002a16 <STOP_RIGHT_WHEEL>:

void STOP_RIGHT_WHEEL()
{
    2a16:	df 93       	push	r29
    2a18:	cf 93       	push	r28
    2a1a:	cd b7       	in	r28, 0x3d	; 61
    2a1c:	de b7       	in	r29, 0x3e	; 62
	// right wheel stop
	MDIO_voidSetPinValue(PORTA,PIN0,PIN_LOW);
    2a1e:	80 e0       	ldi	r24, 0x00	; 0
    2a20:	60 e0       	ldi	r22, 0x00	; 0
    2a22:	40 e0       	ldi	r20, 0x00	; 0
    2a24:	0e 94 89 07 	call	0xf12	; 0xf12 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(PORTA,PIN1,PIN_LOW);
    2a28:	80 e0       	ldi	r24, 0x00	; 0
    2a2a:	61 e0       	ldi	r22, 0x01	; 1
    2a2c:	40 e0       	ldi	r20, 0x00	; 0
    2a2e:	0e 94 89 07 	call	0xf12	; 0xf12 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(PORTA,PIN2,PIN_LOW);
    2a32:	80 e0       	ldi	r24, 0x00	; 0
    2a34:	62 e0       	ldi	r22, 0x02	; 2
    2a36:	40 e0       	ldi	r20, 0x00	; 0
    2a38:	0e 94 89 07 	call	0xf12	; 0xf12 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(PORTA,PIN3,PIN_LOW);
    2a3c:	80 e0       	ldi	r24, 0x00	; 0
    2a3e:	63 e0       	ldi	r22, 0x03	; 3
    2a40:	40 e0       	ldi	r20, 0x00	; 0
    2a42:	0e 94 89 07 	call	0xf12	; 0xf12 <MDIO_voidSetPinValue>

}
    2a46:	cf 91       	pop	r28
    2a48:	df 91       	pop	r29
    2a4a:	08 95       	ret

00002a4c <STOP_LEFT_WHEEL>:
void STOP_LEFT_WHEEL()
{
    2a4c:	df 93       	push	r29
    2a4e:	cf 93       	push	r28
    2a50:	cd b7       	in	r28, 0x3d	; 61
    2a52:	de b7       	in	r29, 0x3e	; 62
	// left wheel stop
	MDIO_voidSetPinValue(PORTA,PIN4,PIN_LOW);
    2a54:	80 e0       	ldi	r24, 0x00	; 0
    2a56:	64 e0       	ldi	r22, 0x04	; 4
    2a58:	40 e0       	ldi	r20, 0x00	; 0
    2a5a:	0e 94 89 07 	call	0xf12	; 0xf12 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(PORTA,PIN5,PIN_LOW);
    2a5e:	80 e0       	ldi	r24, 0x00	; 0
    2a60:	65 e0       	ldi	r22, 0x05	; 5
    2a62:	40 e0       	ldi	r20, 0x00	; 0
    2a64:	0e 94 89 07 	call	0xf12	; 0xf12 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(PORTA,PIN6,PIN_LOW);
    2a68:	80 e0       	ldi	r24, 0x00	; 0
    2a6a:	66 e0       	ldi	r22, 0x06	; 6
    2a6c:	40 e0       	ldi	r20, 0x00	; 0
    2a6e:	0e 94 89 07 	call	0xf12	; 0xf12 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(PORTA,PIN7,PIN_LOW);
    2a72:	80 e0       	ldi	r24, 0x00	; 0
    2a74:	67 e0       	ldi	r22, 0x07	; 7
    2a76:	40 e0       	ldi	r20, 0x00	; 0
    2a78:	0e 94 89 07 	call	0xf12	; 0xf12 <MDIO_voidSetPinValue>

}
    2a7c:	cf 91       	pop	r28
    2a7e:	df 91       	pop	r29
    2a80:	08 95       	ret

00002a82 <STEP_BACK>:
void STEP_BACK()
{
    2a82:	df 93       	push	r29
    2a84:	cf 93       	push	r28
    2a86:	00 d0       	rcall	.+0      	; 0x2a88 <STEP_BACK+0x6>
    2a88:	cd b7       	in	r28, 0x3d	; 61
    2a8a:	de b7       	in	r29, 0x3e	; 62
	u16 Local_u16Counter=0;
    2a8c:	1a 82       	std	Y+2, r1	; 0x02
    2a8e:	19 82       	std	Y+1, r1	; 0x01
    2a90:	09 c0       	rjmp	.+18     	; 0x2aa4 <STEP_BACK+0x22>
	while(Local_u16Counter<=10000)
	{
		Local_u16Counter++;
    2a92:	89 81       	ldd	r24, Y+1	; 0x01
    2a94:	9a 81       	ldd	r25, Y+2	; 0x02
    2a96:	01 96       	adiw	r24, 0x01	; 1
    2a98:	9a 83       	std	Y+2, r25	; 0x02
    2a9a:	89 83       	std	Y+1, r24	; 0x01
		BACK_LEFT_WHEEL();
    2a9c:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <BACK_LEFT_WHEEL>
		BACK_RIGHT_WHEEL();
    2aa0:	0e 94 ba 14 	call	0x2974	; 0x2974 <BACK_RIGHT_WHEEL>

}
void STEP_BACK()
{
	u16 Local_u16Counter=0;
	while(Local_u16Counter<=10000)
    2aa4:	89 81       	ldd	r24, Y+1	; 0x01
    2aa6:	9a 81       	ldd	r25, Y+2	; 0x02
    2aa8:	27 e2       	ldi	r18, 0x27	; 39
    2aaa:	81 31       	cpi	r24, 0x11	; 17
    2aac:	92 07       	cpc	r25, r18
    2aae:	88 f3       	brcs	.-30     	; 0x2a92 <STEP_BACK+0x10>
	{
		Local_u16Counter++;
		BACK_LEFT_WHEEL();
		BACK_RIGHT_WHEEL();
	}
	STOP_LEFT_WHEEL();
    2ab0:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <STOP_LEFT_WHEEL>
	STOP_RIGHT_WHEEL();
    2ab4:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <STOP_RIGHT_WHEEL>

}
    2ab8:	0f 90       	pop	r0
    2aba:	0f 90       	pop	r0
    2abc:	cf 91       	pop	r28
    2abe:	df 91       	pop	r29
    2ac0:	08 95       	ret

00002ac2 <TURN_RIGHT>:

void TURN_RIGHT()
{
    2ac2:	df 93       	push	r29
    2ac4:	cf 93       	push	r28
    2ac6:	00 d0       	rcall	.+0      	; 0x2ac8 <TURN_RIGHT+0x6>
    2ac8:	cd b7       	in	r28, 0x3d	; 61
    2aca:	de b7       	in	r29, 0x3e	; 62
	u16 local_u16Counter=0;
    2acc:	1a 82       	std	Y+2, r1	; 0x02
    2ace:	19 82       	std	Y+1, r1	; 0x01
    2ad0:	09 c0       	rjmp	.+18     	; 0x2ae4 <TURN_RIGHT+0x22>
	while(local_u16Counter<7000)
	{
		local_u16Counter++;
    2ad2:	89 81       	ldd	r24, Y+1	; 0x01
    2ad4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ad6:	01 96       	adiw	r24, 0x01	; 1
    2ad8:	9a 83       	std	Y+2, r25	; 0x02
    2ada:	89 83       	std	Y+1, r24	; 0x01
		BACK_RIGHT_WHEEL();
    2adc:	0e 94 ba 14 	call	0x2974	; 0x2974 <BACK_RIGHT_WHEEL>
		FORWARD_LEFT_WHEEL();
    2ae0:	0e 94 d5 14 	call	0x29aa	; 0x29aa <FORWARD_LEFT_WHEEL>
}

void TURN_RIGHT()
{
	u16 local_u16Counter=0;
	while(local_u16Counter<7000)
    2ae4:	89 81       	ldd	r24, Y+1	; 0x01
    2ae6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ae8:	2b e1       	ldi	r18, 0x1B	; 27
    2aea:	88 35       	cpi	r24, 0x58	; 88
    2aec:	92 07       	cpc	r25, r18
    2aee:	88 f3       	brcs	.-30     	; 0x2ad2 <TURN_RIGHT+0x10>
		local_u16Counter++;
		BACK_RIGHT_WHEEL();
		FORWARD_LEFT_WHEEL();

	}
	STOP_LEFT_WHEEL();
    2af0:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <STOP_LEFT_WHEEL>
	STOP_RIGHT_WHEEL();
    2af4:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <STOP_RIGHT_WHEEL>
}
    2af8:	0f 90       	pop	r0
    2afa:	0f 90       	pop	r0
    2afc:	cf 91       	pop	r28
    2afe:	df 91       	pop	r29
    2b00:	08 95       	ret

00002b02 <TURN_LEFT>:
void TURN_LEFT()
{
    2b02:	df 93       	push	r29
    2b04:	cf 93       	push	r28
    2b06:	00 d0       	rcall	.+0      	; 0x2b08 <TURN_LEFT+0x6>
    2b08:	cd b7       	in	r28, 0x3d	; 61
    2b0a:	de b7       	in	r29, 0x3e	; 62
	u16 local_u16Counter=0;
    2b0c:	1a 82       	std	Y+2, r1	; 0x02
    2b0e:	19 82       	std	Y+1, r1	; 0x01
    2b10:	09 c0       	rjmp	.+18     	; 0x2b24 <TURN_LEFT+0x22>
	while(local_u16Counter<7000)
	{
		local_u16Counter++;
    2b12:	89 81       	ldd	r24, Y+1	; 0x01
    2b14:	9a 81       	ldd	r25, Y+2	; 0x02
    2b16:	01 96       	adiw	r24, 0x01	; 1
    2b18:	9a 83       	std	Y+2, r25	; 0x02
    2b1a:	89 83       	std	Y+1, r24	; 0x01
		BACK_LEFT_WHEEL();
    2b1c:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <BACK_LEFT_WHEEL>
		FORWARD_RIGHT_WHEEL();
    2b20:	0e 94 9f 14 	call	0x293e	; 0x293e <FORWARD_RIGHT_WHEEL>
	STOP_RIGHT_WHEEL();
}
void TURN_LEFT()
{
	u16 local_u16Counter=0;
	while(local_u16Counter<7000)
    2b24:	89 81       	ldd	r24, Y+1	; 0x01
    2b26:	9a 81       	ldd	r25, Y+2	; 0x02
    2b28:	2b e1       	ldi	r18, 0x1B	; 27
    2b2a:	88 35       	cpi	r24, 0x58	; 88
    2b2c:	92 07       	cpc	r25, r18
    2b2e:	88 f3       	brcs	.-30     	; 0x2b12 <TURN_LEFT+0x10>
	{
		local_u16Counter++;
		BACK_LEFT_WHEEL();
		FORWARD_RIGHT_WHEEL();
	}
	STOP_LEFT_WHEEL();
    2b30:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <STOP_LEFT_WHEEL>
	STOP_RIGHT_WHEEL();
    2b34:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <STOP_RIGHT_WHEEL>
}
    2b38:	0f 90       	pop	r0
    2b3a:	0f 90       	pop	r0
    2b3c:	cf 91       	pop	r28
    2b3e:	df 91       	pop	r29
    2b40:	08 95       	ret

00002b42 <SCAN_RIGHT>:


void SCAN_RIGHT()
{
    2b42:	df 93       	push	r29
    2b44:	cf 93       	push	r28
    2b46:	cd b7       	in	r28, 0x3d	; 61
    2b48:	de b7       	in	r29, 0x3e	; 62
    2b4a:	6c 97       	sbiw	r28, 0x1c	; 28
    2b4c:	0f b6       	in	r0, 0x3f	; 63
    2b4e:	f8 94       	cli
    2b50:	de bf       	out	0x3e, r29	; 62
    2b52:	0f be       	out	0x3f, r0	; 63
    2b54:	cd bf       	out	0x3d, r28	; 61
	HSERVO_voidCW(0);
    2b56:	80 e0       	ldi	r24, 0x00	; 0
    2b58:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <HSERVO_voidCW>
    2b5c:	80 e0       	ldi	r24, 0x00	; 0
    2b5e:	90 e0       	ldi	r25, 0x00	; 0
    2b60:	aa e7       	ldi	r26, 0x7A	; 122
    2b62:	b4 e4       	ldi	r27, 0x44	; 68
    2b64:	89 8f       	std	Y+25, r24	; 0x19
    2b66:	9a 8f       	std	Y+26, r25	; 0x1a
    2b68:	ab 8f       	std	Y+27, r26	; 0x1b
    2b6a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b6c:	69 8d       	ldd	r22, Y+25	; 0x19
    2b6e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b70:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b72:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b74:	20 e0       	ldi	r18, 0x00	; 0
    2b76:	30 e0       	ldi	r19, 0x00	; 0
    2b78:	4a ef       	ldi	r20, 0xFA	; 250
    2b7a:	54 e4       	ldi	r21, 0x44	; 68
    2b7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b80:	dc 01       	movw	r26, r24
    2b82:	cb 01       	movw	r24, r22
    2b84:	8d 8b       	std	Y+21, r24	; 0x15
    2b86:	9e 8b       	std	Y+22, r25	; 0x16
    2b88:	af 8b       	std	Y+23, r26	; 0x17
    2b8a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b8c:	6d 89       	ldd	r22, Y+21	; 0x15
    2b8e:	7e 89       	ldd	r23, Y+22	; 0x16
    2b90:	8f 89       	ldd	r24, Y+23	; 0x17
    2b92:	98 8d       	ldd	r25, Y+24	; 0x18
    2b94:	20 e0       	ldi	r18, 0x00	; 0
    2b96:	30 e0       	ldi	r19, 0x00	; 0
    2b98:	40 e8       	ldi	r20, 0x80	; 128
    2b9a:	5f e3       	ldi	r21, 0x3F	; 63
    2b9c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ba0:	88 23       	and	r24, r24
    2ba2:	2c f4       	brge	.+10     	; 0x2bae <SCAN_RIGHT+0x6c>
		__ticks = 1;
    2ba4:	81 e0       	ldi	r24, 0x01	; 1
    2ba6:	90 e0       	ldi	r25, 0x00	; 0
    2ba8:	9c 8b       	std	Y+20, r25	; 0x14
    2baa:	8b 8b       	std	Y+19, r24	; 0x13
    2bac:	3f c0       	rjmp	.+126    	; 0x2c2c <SCAN_RIGHT+0xea>
	else if (__tmp > 65535)
    2bae:	6d 89       	ldd	r22, Y+21	; 0x15
    2bb0:	7e 89       	ldd	r23, Y+22	; 0x16
    2bb2:	8f 89       	ldd	r24, Y+23	; 0x17
    2bb4:	98 8d       	ldd	r25, Y+24	; 0x18
    2bb6:	20 e0       	ldi	r18, 0x00	; 0
    2bb8:	3f ef       	ldi	r19, 0xFF	; 255
    2bba:	4f e7       	ldi	r20, 0x7F	; 127
    2bbc:	57 e4       	ldi	r21, 0x47	; 71
    2bbe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bc2:	18 16       	cp	r1, r24
    2bc4:	4c f5       	brge	.+82     	; 0x2c18 <SCAN_RIGHT+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bc6:	69 8d       	ldd	r22, Y+25	; 0x19
    2bc8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2bca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bcc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bce:	20 e0       	ldi	r18, 0x00	; 0
    2bd0:	30 e0       	ldi	r19, 0x00	; 0
    2bd2:	40 e2       	ldi	r20, 0x20	; 32
    2bd4:	51 e4       	ldi	r21, 0x41	; 65
    2bd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bda:	dc 01       	movw	r26, r24
    2bdc:	cb 01       	movw	r24, r22
    2bde:	bc 01       	movw	r22, r24
    2be0:	cd 01       	movw	r24, r26
    2be2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2be6:	dc 01       	movw	r26, r24
    2be8:	cb 01       	movw	r24, r22
    2bea:	9c 8b       	std	Y+20, r25	; 0x14
    2bec:	8b 8b       	std	Y+19, r24	; 0x13
    2bee:	0f c0       	rjmp	.+30     	; 0x2c0e <SCAN_RIGHT+0xcc>
    2bf0:	88 ec       	ldi	r24, 0xC8	; 200
    2bf2:	90 e0       	ldi	r25, 0x00	; 0
    2bf4:	9a 8b       	std	Y+18, r25	; 0x12
    2bf6:	89 8b       	std	Y+17, r24	; 0x11
    2bf8:	89 89       	ldd	r24, Y+17	; 0x11
    2bfa:	9a 89       	ldd	r25, Y+18	; 0x12
    2bfc:	01 97       	sbiw	r24, 0x01	; 1
    2bfe:	f1 f7       	brne	.-4      	; 0x2bfc <SCAN_RIGHT+0xba>
    2c00:	9a 8b       	std	Y+18, r25	; 0x12
    2c02:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c04:	8b 89       	ldd	r24, Y+19	; 0x13
    2c06:	9c 89       	ldd	r25, Y+20	; 0x14
    2c08:	01 97       	sbiw	r24, 0x01	; 1
    2c0a:	9c 8b       	std	Y+20, r25	; 0x14
    2c0c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c0e:	8b 89       	ldd	r24, Y+19	; 0x13
    2c10:	9c 89       	ldd	r25, Y+20	; 0x14
    2c12:	00 97       	sbiw	r24, 0x00	; 0
    2c14:	69 f7       	brne	.-38     	; 0x2bf0 <SCAN_RIGHT+0xae>
    2c16:	14 c0       	rjmp	.+40     	; 0x2c40 <SCAN_RIGHT+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c18:	6d 89       	ldd	r22, Y+21	; 0x15
    2c1a:	7e 89       	ldd	r23, Y+22	; 0x16
    2c1c:	8f 89       	ldd	r24, Y+23	; 0x17
    2c1e:	98 8d       	ldd	r25, Y+24	; 0x18
    2c20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c24:	dc 01       	movw	r26, r24
    2c26:	cb 01       	movw	r24, r22
    2c28:	9c 8b       	std	Y+20, r25	; 0x14
    2c2a:	8b 8b       	std	Y+19, r24	; 0x13
    2c2c:	8b 89       	ldd	r24, Y+19	; 0x13
    2c2e:	9c 89       	ldd	r25, Y+20	; 0x14
    2c30:	98 8b       	std	Y+16, r25	; 0x10
    2c32:	8f 87       	std	Y+15, r24	; 0x0f
    2c34:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c36:	98 89       	ldd	r25, Y+16	; 0x10
    2c38:	01 97       	sbiw	r24, 0x01	; 1
    2c3a:	f1 f7       	brne	.-4      	; 0x2c38 <SCAN_RIGHT+0xf6>
    2c3c:	98 8b       	std	Y+16, r25	; 0x10
    2c3e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	global_u16RightDistance = HUS_u16Read();
    2c40:	0e 94 19 12 	call	0x2432	; 0x2432 <HUS_u16Read>
    2c44:	90 93 85 00 	sts	0x0085, r25
    2c48:	80 93 84 00 	sts	0x0084, r24
	HSERVO_voidSetServo90(0);
    2c4c:	80 e0       	ldi	r24, 0x00	; 0
    2c4e:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <HSERVO_voidSetServo90>
    2c52:	80 e0       	ldi	r24, 0x00	; 0
    2c54:	90 e0       	ldi	r25, 0x00	; 0
    2c56:	a8 ec       	ldi	r26, 0xC8	; 200
    2c58:	b2 e4       	ldi	r27, 0x42	; 66
    2c5a:	8b 87       	std	Y+11, r24	; 0x0b
    2c5c:	9c 87       	std	Y+12, r25	; 0x0c
    2c5e:	ad 87       	std	Y+13, r26	; 0x0d
    2c60:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c62:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c64:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c66:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c68:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c6a:	20 e0       	ldi	r18, 0x00	; 0
    2c6c:	30 e0       	ldi	r19, 0x00	; 0
    2c6e:	4a ef       	ldi	r20, 0xFA	; 250
    2c70:	54 e4       	ldi	r21, 0x44	; 68
    2c72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c76:	dc 01       	movw	r26, r24
    2c78:	cb 01       	movw	r24, r22
    2c7a:	8f 83       	std	Y+7, r24	; 0x07
    2c7c:	98 87       	std	Y+8, r25	; 0x08
    2c7e:	a9 87       	std	Y+9, r26	; 0x09
    2c80:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c82:	6f 81       	ldd	r22, Y+7	; 0x07
    2c84:	78 85       	ldd	r23, Y+8	; 0x08
    2c86:	89 85       	ldd	r24, Y+9	; 0x09
    2c88:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c8a:	20 e0       	ldi	r18, 0x00	; 0
    2c8c:	30 e0       	ldi	r19, 0x00	; 0
    2c8e:	40 e8       	ldi	r20, 0x80	; 128
    2c90:	5f e3       	ldi	r21, 0x3F	; 63
    2c92:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c96:	88 23       	and	r24, r24
    2c98:	2c f4       	brge	.+10     	; 0x2ca4 <SCAN_RIGHT+0x162>
		__ticks = 1;
    2c9a:	81 e0       	ldi	r24, 0x01	; 1
    2c9c:	90 e0       	ldi	r25, 0x00	; 0
    2c9e:	9e 83       	std	Y+6, r25	; 0x06
    2ca0:	8d 83       	std	Y+5, r24	; 0x05
    2ca2:	3f c0       	rjmp	.+126    	; 0x2d22 <SCAN_RIGHT+0x1e0>
	else if (__tmp > 65535)
    2ca4:	6f 81       	ldd	r22, Y+7	; 0x07
    2ca6:	78 85       	ldd	r23, Y+8	; 0x08
    2ca8:	89 85       	ldd	r24, Y+9	; 0x09
    2caa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cac:	20 e0       	ldi	r18, 0x00	; 0
    2cae:	3f ef       	ldi	r19, 0xFF	; 255
    2cb0:	4f e7       	ldi	r20, 0x7F	; 127
    2cb2:	57 e4       	ldi	r21, 0x47	; 71
    2cb4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cb8:	18 16       	cp	r1, r24
    2cba:	4c f5       	brge	.+82     	; 0x2d0e <SCAN_RIGHT+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cbc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cbe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cc2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cc4:	20 e0       	ldi	r18, 0x00	; 0
    2cc6:	30 e0       	ldi	r19, 0x00	; 0
    2cc8:	40 e2       	ldi	r20, 0x20	; 32
    2cca:	51 e4       	ldi	r21, 0x41	; 65
    2ccc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cd0:	dc 01       	movw	r26, r24
    2cd2:	cb 01       	movw	r24, r22
    2cd4:	bc 01       	movw	r22, r24
    2cd6:	cd 01       	movw	r24, r26
    2cd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cdc:	dc 01       	movw	r26, r24
    2cde:	cb 01       	movw	r24, r22
    2ce0:	9e 83       	std	Y+6, r25	; 0x06
    2ce2:	8d 83       	std	Y+5, r24	; 0x05
    2ce4:	0f c0       	rjmp	.+30     	; 0x2d04 <SCAN_RIGHT+0x1c2>
    2ce6:	88 ec       	ldi	r24, 0xC8	; 200
    2ce8:	90 e0       	ldi	r25, 0x00	; 0
    2cea:	9c 83       	std	Y+4, r25	; 0x04
    2cec:	8b 83       	std	Y+3, r24	; 0x03
    2cee:	8b 81       	ldd	r24, Y+3	; 0x03
    2cf0:	9c 81       	ldd	r25, Y+4	; 0x04
    2cf2:	01 97       	sbiw	r24, 0x01	; 1
    2cf4:	f1 f7       	brne	.-4      	; 0x2cf2 <SCAN_RIGHT+0x1b0>
    2cf6:	9c 83       	std	Y+4, r25	; 0x04
    2cf8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cfa:	8d 81       	ldd	r24, Y+5	; 0x05
    2cfc:	9e 81       	ldd	r25, Y+6	; 0x06
    2cfe:	01 97       	sbiw	r24, 0x01	; 1
    2d00:	9e 83       	std	Y+6, r25	; 0x06
    2d02:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d04:	8d 81       	ldd	r24, Y+5	; 0x05
    2d06:	9e 81       	ldd	r25, Y+6	; 0x06
    2d08:	00 97       	sbiw	r24, 0x00	; 0
    2d0a:	69 f7       	brne	.-38     	; 0x2ce6 <SCAN_RIGHT+0x1a4>
    2d0c:	14 c0       	rjmp	.+40     	; 0x2d36 <SCAN_RIGHT+0x1f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d0e:	6f 81       	ldd	r22, Y+7	; 0x07
    2d10:	78 85       	ldd	r23, Y+8	; 0x08
    2d12:	89 85       	ldd	r24, Y+9	; 0x09
    2d14:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d1a:	dc 01       	movw	r26, r24
    2d1c:	cb 01       	movw	r24, r22
    2d1e:	9e 83       	std	Y+6, r25	; 0x06
    2d20:	8d 83       	std	Y+5, r24	; 0x05
    2d22:	8d 81       	ldd	r24, Y+5	; 0x05
    2d24:	9e 81       	ldd	r25, Y+6	; 0x06
    2d26:	9a 83       	std	Y+2, r25	; 0x02
    2d28:	89 83       	std	Y+1, r24	; 0x01
    2d2a:	89 81       	ldd	r24, Y+1	; 0x01
    2d2c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d2e:	01 97       	sbiw	r24, 0x01	; 1
    2d30:	f1 f7       	brne	.-4      	; 0x2d2e <SCAN_RIGHT+0x1ec>
    2d32:	9a 83       	std	Y+2, r25	; 0x02
    2d34:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
}
    2d36:	6c 96       	adiw	r28, 0x1c	; 28
    2d38:	0f b6       	in	r0, 0x3f	; 63
    2d3a:	f8 94       	cli
    2d3c:	de bf       	out	0x3e, r29	; 62
    2d3e:	0f be       	out	0x3f, r0	; 63
    2d40:	cd bf       	out	0x3d, r28	; 61
    2d42:	cf 91       	pop	r28
    2d44:	df 91       	pop	r29
    2d46:	08 95       	ret

00002d48 <SCAN_LEFT>:
void SCAN_LEFT()
{
    2d48:	df 93       	push	r29
    2d4a:	cf 93       	push	r28
    2d4c:	cd b7       	in	r28, 0x3d	; 61
    2d4e:	de b7       	in	r29, 0x3e	; 62
    2d50:	6c 97       	sbiw	r28, 0x1c	; 28
    2d52:	0f b6       	in	r0, 0x3f	; 63
    2d54:	f8 94       	cli
    2d56:	de bf       	out	0x3e, r29	; 62
    2d58:	0f be       	out	0x3f, r0	; 63
    2d5a:	cd bf       	out	0x3d, r28	; 61
	HSERVO_voidCCW(0);
    2d5c:	80 e0       	ldi	r24, 0x00	; 0
    2d5e:	0e 94 a2 0b 	call	0x1744	; 0x1744 <HSERVO_voidCCW>
    2d62:	80 e0       	ldi	r24, 0x00	; 0
    2d64:	90 e0       	ldi	r25, 0x00	; 0
    2d66:	aa e7       	ldi	r26, 0x7A	; 122
    2d68:	b4 e4       	ldi	r27, 0x44	; 68
    2d6a:	89 8f       	std	Y+25, r24	; 0x19
    2d6c:	9a 8f       	std	Y+26, r25	; 0x1a
    2d6e:	ab 8f       	std	Y+27, r26	; 0x1b
    2d70:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d72:	69 8d       	ldd	r22, Y+25	; 0x19
    2d74:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d76:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d78:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d7a:	20 e0       	ldi	r18, 0x00	; 0
    2d7c:	30 e0       	ldi	r19, 0x00	; 0
    2d7e:	4a ef       	ldi	r20, 0xFA	; 250
    2d80:	54 e4       	ldi	r21, 0x44	; 68
    2d82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d86:	dc 01       	movw	r26, r24
    2d88:	cb 01       	movw	r24, r22
    2d8a:	8d 8b       	std	Y+21, r24	; 0x15
    2d8c:	9e 8b       	std	Y+22, r25	; 0x16
    2d8e:	af 8b       	std	Y+23, r26	; 0x17
    2d90:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2d92:	6d 89       	ldd	r22, Y+21	; 0x15
    2d94:	7e 89       	ldd	r23, Y+22	; 0x16
    2d96:	8f 89       	ldd	r24, Y+23	; 0x17
    2d98:	98 8d       	ldd	r25, Y+24	; 0x18
    2d9a:	20 e0       	ldi	r18, 0x00	; 0
    2d9c:	30 e0       	ldi	r19, 0x00	; 0
    2d9e:	40 e8       	ldi	r20, 0x80	; 128
    2da0:	5f e3       	ldi	r21, 0x3F	; 63
    2da2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2da6:	88 23       	and	r24, r24
    2da8:	2c f4       	brge	.+10     	; 0x2db4 <SCAN_LEFT+0x6c>
		__ticks = 1;
    2daa:	81 e0       	ldi	r24, 0x01	; 1
    2dac:	90 e0       	ldi	r25, 0x00	; 0
    2dae:	9c 8b       	std	Y+20, r25	; 0x14
    2db0:	8b 8b       	std	Y+19, r24	; 0x13
    2db2:	3f c0       	rjmp	.+126    	; 0x2e32 <SCAN_LEFT+0xea>
	else if (__tmp > 65535)
    2db4:	6d 89       	ldd	r22, Y+21	; 0x15
    2db6:	7e 89       	ldd	r23, Y+22	; 0x16
    2db8:	8f 89       	ldd	r24, Y+23	; 0x17
    2dba:	98 8d       	ldd	r25, Y+24	; 0x18
    2dbc:	20 e0       	ldi	r18, 0x00	; 0
    2dbe:	3f ef       	ldi	r19, 0xFF	; 255
    2dc0:	4f e7       	ldi	r20, 0x7F	; 127
    2dc2:	57 e4       	ldi	r21, 0x47	; 71
    2dc4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2dc8:	18 16       	cp	r1, r24
    2dca:	4c f5       	brge	.+82     	; 0x2e1e <SCAN_LEFT+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dcc:	69 8d       	ldd	r22, Y+25	; 0x19
    2dce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2dd0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2dd2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2dd4:	20 e0       	ldi	r18, 0x00	; 0
    2dd6:	30 e0       	ldi	r19, 0x00	; 0
    2dd8:	40 e2       	ldi	r20, 0x20	; 32
    2dda:	51 e4       	ldi	r21, 0x41	; 65
    2ddc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2de0:	dc 01       	movw	r26, r24
    2de2:	cb 01       	movw	r24, r22
    2de4:	bc 01       	movw	r22, r24
    2de6:	cd 01       	movw	r24, r26
    2de8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dec:	dc 01       	movw	r26, r24
    2dee:	cb 01       	movw	r24, r22
    2df0:	9c 8b       	std	Y+20, r25	; 0x14
    2df2:	8b 8b       	std	Y+19, r24	; 0x13
    2df4:	0f c0       	rjmp	.+30     	; 0x2e14 <SCAN_LEFT+0xcc>
    2df6:	88 ec       	ldi	r24, 0xC8	; 200
    2df8:	90 e0       	ldi	r25, 0x00	; 0
    2dfa:	9a 8b       	std	Y+18, r25	; 0x12
    2dfc:	89 8b       	std	Y+17, r24	; 0x11
    2dfe:	89 89       	ldd	r24, Y+17	; 0x11
    2e00:	9a 89       	ldd	r25, Y+18	; 0x12
    2e02:	01 97       	sbiw	r24, 0x01	; 1
    2e04:	f1 f7       	brne	.-4      	; 0x2e02 <SCAN_LEFT+0xba>
    2e06:	9a 8b       	std	Y+18, r25	; 0x12
    2e08:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e0a:	8b 89       	ldd	r24, Y+19	; 0x13
    2e0c:	9c 89       	ldd	r25, Y+20	; 0x14
    2e0e:	01 97       	sbiw	r24, 0x01	; 1
    2e10:	9c 8b       	std	Y+20, r25	; 0x14
    2e12:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e14:	8b 89       	ldd	r24, Y+19	; 0x13
    2e16:	9c 89       	ldd	r25, Y+20	; 0x14
    2e18:	00 97       	sbiw	r24, 0x00	; 0
    2e1a:	69 f7       	brne	.-38     	; 0x2df6 <SCAN_LEFT+0xae>
    2e1c:	14 c0       	rjmp	.+40     	; 0x2e46 <SCAN_LEFT+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e1e:	6d 89       	ldd	r22, Y+21	; 0x15
    2e20:	7e 89       	ldd	r23, Y+22	; 0x16
    2e22:	8f 89       	ldd	r24, Y+23	; 0x17
    2e24:	98 8d       	ldd	r25, Y+24	; 0x18
    2e26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e2a:	dc 01       	movw	r26, r24
    2e2c:	cb 01       	movw	r24, r22
    2e2e:	9c 8b       	std	Y+20, r25	; 0x14
    2e30:	8b 8b       	std	Y+19, r24	; 0x13
    2e32:	8b 89       	ldd	r24, Y+19	; 0x13
    2e34:	9c 89       	ldd	r25, Y+20	; 0x14
    2e36:	98 8b       	std	Y+16, r25	; 0x10
    2e38:	8f 87       	std	Y+15, r24	; 0x0f
    2e3a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e3c:	98 89       	ldd	r25, Y+16	; 0x10
    2e3e:	01 97       	sbiw	r24, 0x01	; 1
    2e40:	f1 f7       	brne	.-4      	; 0x2e3e <SCAN_LEFT+0xf6>
    2e42:	98 8b       	std	Y+16, r25	; 0x10
    2e44:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	global_u16LeftDistance = HUS_u16Read();
    2e46:	0e 94 19 12 	call	0x2432	; 0x2432 <HUS_u16Read>
    2e4a:	90 93 87 00 	sts	0x0087, r25
    2e4e:	80 93 86 00 	sts	0x0086, r24
	HSERVO_voidSetServo90(0);
    2e52:	80 e0       	ldi	r24, 0x00	; 0
    2e54:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <HSERVO_voidSetServo90>
    2e58:	80 e0       	ldi	r24, 0x00	; 0
    2e5a:	90 e0       	ldi	r25, 0x00	; 0
    2e5c:	a8 ec       	ldi	r26, 0xC8	; 200
    2e5e:	b2 e4       	ldi	r27, 0x42	; 66
    2e60:	8b 87       	std	Y+11, r24	; 0x0b
    2e62:	9c 87       	std	Y+12, r25	; 0x0c
    2e64:	ad 87       	std	Y+13, r26	; 0x0d
    2e66:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e68:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e6a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e70:	20 e0       	ldi	r18, 0x00	; 0
    2e72:	30 e0       	ldi	r19, 0x00	; 0
    2e74:	4a ef       	ldi	r20, 0xFA	; 250
    2e76:	54 e4       	ldi	r21, 0x44	; 68
    2e78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e7c:	dc 01       	movw	r26, r24
    2e7e:	cb 01       	movw	r24, r22
    2e80:	8f 83       	std	Y+7, r24	; 0x07
    2e82:	98 87       	std	Y+8, r25	; 0x08
    2e84:	a9 87       	std	Y+9, r26	; 0x09
    2e86:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e88:	6f 81       	ldd	r22, Y+7	; 0x07
    2e8a:	78 85       	ldd	r23, Y+8	; 0x08
    2e8c:	89 85       	ldd	r24, Y+9	; 0x09
    2e8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e90:	20 e0       	ldi	r18, 0x00	; 0
    2e92:	30 e0       	ldi	r19, 0x00	; 0
    2e94:	40 e8       	ldi	r20, 0x80	; 128
    2e96:	5f e3       	ldi	r21, 0x3F	; 63
    2e98:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e9c:	88 23       	and	r24, r24
    2e9e:	2c f4       	brge	.+10     	; 0x2eaa <SCAN_LEFT+0x162>
		__ticks = 1;
    2ea0:	81 e0       	ldi	r24, 0x01	; 1
    2ea2:	90 e0       	ldi	r25, 0x00	; 0
    2ea4:	9e 83       	std	Y+6, r25	; 0x06
    2ea6:	8d 83       	std	Y+5, r24	; 0x05
    2ea8:	3f c0       	rjmp	.+126    	; 0x2f28 <SCAN_LEFT+0x1e0>
	else if (__tmp > 65535)
    2eaa:	6f 81       	ldd	r22, Y+7	; 0x07
    2eac:	78 85       	ldd	r23, Y+8	; 0x08
    2eae:	89 85       	ldd	r24, Y+9	; 0x09
    2eb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eb2:	20 e0       	ldi	r18, 0x00	; 0
    2eb4:	3f ef       	ldi	r19, 0xFF	; 255
    2eb6:	4f e7       	ldi	r20, 0x7F	; 127
    2eb8:	57 e4       	ldi	r21, 0x47	; 71
    2eba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ebe:	18 16       	cp	r1, r24
    2ec0:	4c f5       	brge	.+82     	; 0x2f14 <SCAN_LEFT+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ec2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ec4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ec6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ec8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2eca:	20 e0       	ldi	r18, 0x00	; 0
    2ecc:	30 e0       	ldi	r19, 0x00	; 0
    2ece:	40 e2       	ldi	r20, 0x20	; 32
    2ed0:	51 e4       	ldi	r21, 0x41	; 65
    2ed2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ed6:	dc 01       	movw	r26, r24
    2ed8:	cb 01       	movw	r24, r22
    2eda:	bc 01       	movw	r22, r24
    2edc:	cd 01       	movw	r24, r26
    2ede:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ee2:	dc 01       	movw	r26, r24
    2ee4:	cb 01       	movw	r24, r22
    2ee6:	9e 83       	std	Y+6, r25	; 0x06
    2ee8:	8d 83       	std	Y+5, r24	; 0x05
    2eea:	0f c0       	rjmp	.+30     	; 0x2f0a <SCAN_LEFT+0x1c2>
    2eec:	88 ec       	ldi	r24, 0xC8	; 200
    2eee:	90 e0       	ldi	r25, 0x00	; 0
    2ef0:	9c 83       	std	Y+4, r25	; 0x04
    2ef2:	8b 83       	std	Y+3, r24	; 0x03
    2ef4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ef6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ef8:	01 97       	sbiw	r24, 0x01	; 1
    2efa:	f1 f7       	brne	.-4      	; 0x2ef8 <SCAN_LEFT+0x1b0>
    2efc:	9c 83       	std	Y+4, r25	; 0x04
    2efe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f00:	8d 81       	ldd	r24, Y+5	; 0x05
    2f02:	9e 81       	ldd	r25, Y+6	; 0x06
    2f04:	01 97       	sbiw	r24, 0x01	; 1
    2f06:	9e 83       	std	Y+6, r25	; 0x06
    2f08:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f0a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f0c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f0e:	00 97       	sbiw	r24, 0x00	; 0
    2f10:	69 f7       	brne	.-38     	; 0x2eec <SCAN_LEFT+0x1a4>
    2f12:	14 c0       	rjmp	.+40     	; 0x2f3c <SCAN_LEFT+0x1f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f14:	6f 81       	ldd	r22, Y+7	; 0x07
    2f16:	78 85       	ldd	r23, Y+8	; 0x08
    2f18:	89 85       	ldd	r24, Y+9	; 0x09
    2f1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f20:	dc 01       	movw	r26, r24
    2f22:	cb 01       	movw	r24, r22
    2f24:	9e 83       	std	Y+6, r25	; 0x06
    2f26:	8d 83       	std	Y+5, r24	; 0x05
    2f28:	8d 81       	ldd	r24, Y+5	; 0x05
    2f2a:	9e 81       	ldd	r25, Y+6	; 0x06
    2f2c:	9a 83       	std	Y+2, r25	; 0x02
    2f2e:	89 83       	std	Y+1, r24	; 0x01
    2f30:	89 81       	ldd	r24, Y+1	; 0x01
    2f32:	9a 81       	ldd	r25, Y+2	; 0x02
    2f34:	01 97       	sbiw	r24, 0x01	; 1
    2f36:	f1 f7       	brne	.-4      	; 0x2f34 <SCAN_LEFT+0x1ec>
    2f38:	9a 83       	std	Y+2, r25	; 0x02
    2f3a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);

}
    2f3c:	6c 96       	adiw	r28, 0x1c	; 28
    2f3e:	0f b6       	in	r0, 0x3f	; 63
    2f40:	f8 94       	cli
    2f42:	de bf       	out	0x3e, r29	; 62
    2f44:	0f be       	out	0x3f, r0	; 63
    2f46:	cd bf       	out	0x3d, r28	; 61
    2f48:	cf 91       	pop	r28
    2f4a:	df 91       	pop	r29
    2f4c:	08 95       	ret

00002f4e <TAKE_ROAD>:

void TAKE_ROAD()
{
    2f4e:	df 93       	push	r29
    2f50:	cf 93       	push	r28
    2f52:	cd b7       	in	r28, 0x3d	; 61
    2f54:	de b7       	in	r29, 0x3e	; 62
	scan_again:
	SCAN_RIGHT();
    2f56:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <SCAN_RIGHT>
	SCAN_LEFT();
    2f5a:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <SCAN_LEFT>
	if(global_u16RightDistance >= global_u16LeftDistance+40)
    2f5e:	80 91 86 00 	lds	r24, 0x0086
    2f62:	90 91 87 00 	lds	r25, 0x0087
    2f66:	9c 01       	movw	r18, r24
    2f68:	28 5d       	subi	r18, 0xD8	; 216
    2f6a:	3f 4f       	sbci	r19, 0xFF	; 255
    2f6c:	80 91 84 00 	lds	r24, 0x0084
    2f70:	90 91 85 00 	lds	r25, 0x0085
    2f74:	82 17       	cp	r24, r18
    2f76:	93 07       	cpc	r25, r19
    2f78:	18 f0       	brcs	.+6      	; 0x2f80 <TAKE_ROAD+0x32>
	{
		TURN_RIGHT();
    2f7a:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <TURN_RIGHT>
    2f7e:	14 c0       	rjmp	.+40     	; 0x2fa8 <TAKE_ROAD+0x5a>
	}
	else if(global_u16LeftDistance > global_u16RightDistance+40)
    2f80:	80 91 84 00 	lds	r24, 0x0084
    2f84:	90 91 85 00 	lds	r25, 0x0085
    2f88:	9c 01       	movw	r18, r24
    2f8a:	28 5d       	subi	r18, 0xD8	; 216
    2f8c:	3f 4f       	sbci	r19, 0xFF	; 255
    2f8e:	80 91 86 00 	lds	r24, 0x0086
    2f92:	90 91 87 00 	lds	r25, 0x0087
    2f96:	28 17       	cp	r18, r24
    2f98:	39 07       	cpc	r19, r25
    2f9a:	18 f4       	brcc	.+6      	; 0x2fa2 <TAKE_ROAD+0x54>
	{
		TURN_LEFT();
    2f9c:	0e 94 81 15 	call	0x2b02	; 0x2b02 <TURN_LEFT>
    2fa0:	03 c0       	rjmp	.+6      	; 0x2fa8 <TAKE_ROAD+0x5a>
	}
	else
	{
		STEP_BACK();
    2fa2:	0e 94 41 15 	call	0x2a82	; 0x2a82 <STEP_BACK>
    2fa6:	d7 cf       	rjmp	.-82     	; 0x2f56 <TAKE_ROAD+0x8>
		goto scan_again;
	}
}
    2fa8:	cf 91       	pop	r28
    2faa:	df 91       	pop	r29
    2fac:	08 95       	ret

00002fae <SCAN_METAL>:
void SCAN_METAL()
{
    2fae:	df 93       	push	r29
    2fb0:	cf 93       	push	r28
    2fb2:	cd b7       	in	r28, 0x3d	; 61
    2fb4:	de b7       	in	r29, 0x3e	; 62
	HSERVO_voidCW(1);
    2fb6:	81 e0       	ldi	r24, 0x01	; 1
    2fb8:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <HSERVO_voidCW>
	METAL();
    2fbc:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <METAL>
	HSERVO_voidSetServo90(1);
    2fc0:	81 e0       	ldi	r24, 0x01	; 1
    2fc2:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <HSERVO_voidSetServo90>
	METAL();
    2fc6:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <METAL>
	HSERVO_voidCCW(1);
    2fca:	81 e0       	ldi	r24, 0x01	; 1
    2fcc:	0e 94 a2 0b 	call	0x1744	; 0x1744 <HSERVO_voidCCW>
	METAL();
    2fd0:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <METAL>
	HSERVO_voidSetServo90(1);
    2fd4:	81 e0       	ldi	r24, 0x01	; 1
    2fd6:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <HSERVO_voidSetServo90>
}
    2fda:	cf 91       	pop	r28
    2fdc:	df 91       	pop	r29
    2fde:	08 95       	ret

00002fe0 <METAL>:
void METAL()
{
    2fe0:	df 93       	push	r29
    2fe2:	cf 93       	push	r28
    2fe4:	cd b7       	in	r28, 0x3d	; 61
    2fe6:	de b7       	in	r29, 0x3e	; 62
    2fe8:	04 c0       	rjmp	.+8      	; 0x2ff2 <METAL+0x12>

	while(MDIO_u8GetPinValue(PORTD,PIN2)==1)
	{
		STOP_LEFT_WHEEL();
    2fea:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <STOP_LEFT_WHEEL>
		STOP_RIGHT_WHEEL();
    2fee:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <STOP_RIGHT_WHEEL>
	HSERVO_voidSetServo90(1);
}
void METAL()
{

	while(MDIO_u8GetPinValue(PORTD,PIN2)==1)
    2ff2:	83 e0       	ldi	r24, 0x03	; 3
    2ff4:	62 e0       	ldi	r22, 0x02	; 2
    2ff6:	0e 94 9f 08 	call	0x113e	; 0x113e <MDIO_u8GetPinValue>
    2ffa:	81 30       	cpi	r24, 0x01	; 1
    2ffc:	b1 f3       	breq	.-20     	; 0x2fea <METAL+0xa>
	{
		STOP_LEFT_WHEEL();
		STOP_RIGHT_WHEEL();
	}
}
    2ffe:	cf 91       	pop	r28
    3000:	df 91       	pop	r29
    3002:	08 95       	ret

00003004 <__mulsi3>:
    3004:	62 9f       	mul	r22, r18
    3006:	d0 01       	movw	r26, r0
    3008:	73 9f       	mul	r23, r19
    300a:	f0 01       	movw	r30, r0
    300c:	82 9f       	mul	r24, r18
    300e:	e0 0d       	add	r30, r0
    3010:	f1 1d       	adc	r31, r1
    3012:	64 9f       	mul	r22, r20
    3014:	e0 0d       	add	r30, r0
    3016:	f1 1d       	adc	r31, r1
    3018:	92 9f       	mul	r25, r18
    301a:	f0 0d       	add	r31, r0
    301c:	83 9f       	mul	r24, r19
    301e:	f0 0d       	add	r31, r0
    3020:	74 9f       	mul	r23, r20
    3022:	f0 0d       	add	r31, r0
    3024:	65 9f       	mul	r22, r21
    3026:	f0 0d       	add	r31, r0
    3028:	99 27       	eor	r25, r25
    302a:	72 9f       	mul	r23, r18
    302c:	b0 0d       	add	r27, r0
    302e:	e1 1d       	adc	r30, r1
    3030:	f9 1f       	adc	r31, r25
    3032:	63 9f       	mul	r22, r19
    3034:	b0 0d       	add	r27, r0
    3036:	e1 1d       	adc	r30, r1
    3038:	f9 1f       	adc	r31, r25
    303a:	bd 01       	movw	r22, r26
    303c:	cf 01       	movw	r24, r30
    303e:	11 24       	eor	r1, r1
    3040:	08 95       	ret

00003042 <__udivmodhi4>:
    3042:	aa 1b       	sub	r26, r26
    3044:	bb 1b       	sub	r27, r27
    3046:	51 e1       	ldi	r21, 0x11	; 17
    3048:	07 c0       	rjmp	.+14     	; 0x3058 <__udivmodhi4_ep>

0000304a <__udivmodhi4_loop>:
    304a:	aa 1f       	adc	r26, r26
    304c:	bb 1f       	adc	r27, r27
    304e:	a6 17       	cp	r26, r22
    3050:	b7 07       	cpc	r27, r23
    3052:	10 f0       	brcs	.+4      	; 0x3058 <__udivmodhi4_ep>
    3054:	a6 1b       	sub	r26, r22
    3056:	b7 0b       	sbc	r27, r23

00003058 <__udivmodhi4_ep>:
    3058:	88 1f       	adc	r24, r24
    305a:	99 1f       	adc	r25, r25
    305c:	5a 95       	dec	r21
    305e:	a9 f7       	brne	.-22     	; 0x304a <__udivmodhi4_loop>
    3060:	80 95       	com	r24
    3062:	90 95       	com	r25
    3064:	bc 01       	movw	r22, r24
    3066:	cd 01       	movw	r24, r26
    3068:	08 95       	ret

0000306a <__udivmodsi4>:
    306a:	a1 e2       	ldi	r26, 0x21	; 33
    306c:	1a 2e       	mov	r1, r26
    306e:	aa 1b       	sub	r26, r26
    3070:	bb 1b       	sub	r27, r27
    3072:	fd 01       	movw	r30, r26
    3074:	0d c0       	rjmp	.+26     	; 0x3090 <__udivmodsi4_ep>

00003076 <__udivmodsi4_loop>:
    3076:	aa 1f       	adc	r26, r26
    3078:	bb 1f       	adc	r27, r27
    307a:	ee 1f       	adc	r30, r30
    307c:	ff 1f       	adc	r31, r31
    307e:	a2 17       	cp	r26, r18
    3080:	b3 07       	cpc	r27, r19
    3082:	e4 07       	cpc	r30, r20
    3084:	f5 07       	cpc	r31, r21
    3086:	20 f0       	brcs	.+8      	; 0x3090 <__udivmodsi4_ep>
    3088:	a2 1b       	sub	r26, r18
    308a:	b3 0b       	sbc	r27, r19
    308c:	e4 0b       	sbc	r30, r20
    308e:	f5 0b       	sbc	r31, r21

00003090 <__udivmodsi4_ep>:
    3090:	66 1f       	adc	r22, r22
    3092:	77 1f       	adc	r23, r23
    3094:	88 1f       	adc	r24, r24
    3096:	99 1f       	adc	r25, r25
    3098:	1a 94       	dec	r1
    309a:	69 f7       	brne	.-38     	; 0x3076 <__udivmodsi4_loop>
    309c:	60 95       	com	r22
    309e:	70 95       	com	r23
    30a0:	80 95       	com	r24
    30a2:	90 95       	com	r25
    30a4:	9b 01       	movw	r18, r22
    30a6:	ac 01       	movw	r20, r24
    30a8:	bd 01       	movw	r22, r26
    30aa:	cf 01       	movw	r24, r30
    30ac:	08 95       	ret

000030ae <__prologue_saves__>:
    30ae:	2f 92       	push	r2
    30b0:	3f 92       	push	r3
    30b2:	4f 92       	push	r4
    30b4:	5f 92       	push	r5
    30b6:	6f 92       	push	r6
    30b8:	7f 92       	push	r7
    30ba:	8f 92       	push	r8
    30bc:	9f 92       	push	r9
    30be:	af 92       	push	r10
    30c0:	bf 92       	push	r11
    30c2:	cf 92       	push	r12
    30c4:	df 92       	push	r13
    30c6:	ef 92       	push	r14
    30c8:	ff 92       	push	r15
    30ca:	0f 93       	push	r16
    30cc:	1f 93       	push	r17
    30ce:	cf 93       	push	r28
    30d0:	df 93       	push	r29
    30d2:	cd b7       	in	r28, 0x3d	; 61
    30d4:	de b7       	in	r29, 0x3e	; 62
    30d6:	ca 1b       	sub	r28, r26
    30d8:	db 0b       	sbc	r29, r27
    30da:	0f b6       	in	r0, 0x3f	; 63
    30dc:	f8 94       	cli
    30de:	de bf       	out	0x3e, r29	; 62
    30e0:	0f be       	out	0x3f, r0	; 63
    30e2:	cd bf       	out	0x3d, r28	; 61
    30e4:	09 94       	ijmp

000030e6 <__epilogue_restores__>:
    30e6:	2a 88       	ldd	r2, Y+18	; 0x12
    30e8:	39 88       	ldd	r3, Y+17	; 0x11
    30ea:	48 88       	ldd	r4, Y+16	; 0x10
    30ec:	5f 84       	ldd	r5, Y+15	; 0x0f
    30ee:	6e 84       	ldd	r6, Y+14	; 0x0e
    30f0:	7d 84       	ldd	r7, Y+13	; 0x0d
    30f2:	8c 84       	ldd	r8, Y+12	; 0x0c
    30f4:	9b 84       	ldd	r9, Y+11	; 0x0b
    30f6:	aa 84       	ldd	r10, Y+10	; 0x0a
    30f8:	b9 84       	ldd	r11, Y+9	; 0x09
    30fa:	c8 84       	ldd	r12, Y+8	; 0x08
    30fc:	df 80       	ldd	r13, Y+7	; 0x07
    30fe:	ee 80       	ldd	r14, Y+6	; 0x06
    3100:	fd 80       	ldd	r15, Y+5	; 0x05
    3102:	0c 81       	ldd	r16, Y+4	; 0x04
    3104:	1b 81       	ldd	r17, Y+3	; 0x03
    3106:	aa 81       	ldd	r26, Y+2	; 0x02
    3108:	b9 81       	ldd	r27, Y+1	; 0x01
    310a:	ce 0f       	add	r28, r30
    310c:	d1 1d       	adc	r29, r1
    310e:	0f b6       	in	r0, 0x3f	; 63
    3110:	f8 94       	cli
    3112:	de bf       	out	0x3e, r29	; 62
    3114:	0f be       	out	0x3f, r0	; 63
    3116:	cd bf       	out	0x3d, r28	; 61
    3118:	ed 01       	movw	r28, r26
    311a:	08 95       	ret

0000311c <_exit>:
    311c:	f8 94       	cli

0000311e <__stop_program>:
    311e:	ff cf       	rjmp	.-2      	; 0x311e <__stop_program>
